{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { basename, relative } from '@sentry/utils';\n/** Rewrite event frames paths */\nvar RewriteFrames = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function RewriteFrames(options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = RewriteFrames.id;\n    /**\n     * @inheritDoc\n     */\n    this._iteratee = function (frame) {\n      if (!frame.filename) {\n        return frame;\n      }\n      // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n      var isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n      var startsWithSlash = /^\\//.test(frame.filename);\n      if (isWindowsFrame || startsWithSlash) {\n        var filename = isWindowsFrame ? frame.filename.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n        .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n        var base = _this._root ? relative(_this._root, filename) : basename(filename);\n        frame.filename = \"app:///\" + base;\n      }\n      return frame;\n    };\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  RewriteFrames.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event) {\n      var self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  };\n  /** JSDoc */\n  RewriteFrames.prototype.process = function (event) {\n    if (event.exception && Array.isArray(event.exception.values)) {\n      return this._processExceptionsEvent(event);\n    }\n    if (event.stacktrace) {\n      return this._processStacktraceEvent(event);\n    }\n    return event;\n  };\n  /** JSDoc */\n  RewriteFrames.prototype._processExceptionsEvent = function (event) {\n    var _this = this;\n    try {\n      return __assign(__assign({}, event), {\n        exception: __assign(__assign({}, event.exception), {\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception.values.map(function (value) {\n            return __assign(__assign({}, value), {\n              stacktrace: _this._processStacktrace(value.stacktrace)\n            });\n          })\n        })\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n  RewriteFrames.prototype._processStacktraceEvent = function (event) {\n    try {\n      return __assign(__assign({}, event), {\n        stacktrace: this._processStacktrace(event.stacktrace)\n      });\n    } catch (_oO) {\n      return event;\n    }\n  };\n  /** JSDoc */\n  RewriteFrames.prototype._processStacktrace = function (stacktrace) {\n    var _this = this;\n    return __assign(__assign({}, stacktrace), {\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(function (f) {\n        return _this._iteratee(f);\n      })\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  RewriteFrames.id = 'RewriteFrames';\n  return RewriteFrames;\n}();\nexport { RewriteFrames };","map":{"version":3,"names":["basename","relative","RewriteFrames","options","_this","name","id","_iteratee","frame","filename","isWindowsFrame","test","startsWithSlash","replace","base","_root","root","iteratee","prototype","setupOnce","addGlobalEventProcessor","getCurrentHub","event","self","getIntegration","process","exception","Array","isArray","values","_processExceptionsEvent","stacktrace","_processStacktraceEvent","__assign","map","value","_processStacktrace","_oO","frames","f"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\rewriteframes.ts"],"sourcesContent":["import { Event, EventProcessor, Hub, Integration, StackFrame, Stacktrace } from '@sentry/types';\nimport { basename, relative } from '@sentry/utils';\n\ntype StackFrameIteratee = (frame: StackFrame) => StackFrame;\n\n/** Rewrite event frames paths */\nexport class RewriteFrames implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'RewriteFrames';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = RewriteFrames.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _root?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { root?: string; iteratee?: StackFrameIteratee } = {}) {\n    if (options.root) {\n      this._root = options.root;\n    }\n    if (options.iteratee) {\n      this._iteratee = options.iteratee;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor(event => {\n      const self = getCurrentHub().getIntegration(RewriteFrames);\n      if (self) {\n        return self.process(event);\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  public process(event: Event): Event {\n    if (event.exception && Array.isArray(event.exception.values)) {\n      return this._processExceptionsEvent(event);\n    }\n\n    if (event.stacktrace) {\n      return this._processStacktraceEvent(event);\n    }\n\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _iteratee: StackFrameIteratee = (frame: StackFrame) => {\n    if (!frame.filename) {\n      return frame;\n    }\n    // Check if the frame filename begins with `/` or a Windows-style prefix such as `C:\\`\n    const isWindowsFrame = /^[A-Z]:\\\\/.test(frame.filename);\n    const startsWithSlash = /^\\//.test(frame.filename);\n    if (isWindowsFrame || startsWithSlash) {\n      const filename = isWindowsFrame\n        ? frame.filename\n            .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n            .replace(/\\\\/g, '/') // replace all `\\\\` instances with `/`\n        : frame.filename;\n      const base = this._root ? relative(this._root, filename) : basename(filename);\n      frame.filename = `app:///${base}`;\n    }\n    return frame;\n  };\n\n  /** JSDoc */\n  private _processExceptionsEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        exception: {\n          ...event.exception,\n          // The check for this is performed inside `process` call itself, safe to skip here\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          values: event.exception!.values!.map(value => ({\n            ...value,\n            stacktrace: this._processStacktrace(value.stacktrace),\n          })),\n        },\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktraceEvent(event: Event): Event {\n    try {\n      return {\n        ...event,\n        stacktrace: this._processStacktrace(event.stacktrace),\n      };\n    } catch (_oO) {\n      return event;\n    }\n  }\n\n  /** JSDoc */\n  private _processStacktrace(stacktrace?: Stacktrace): Stacktrace {\n    return {\n      ...stacktrace,\n      frames: stacktrace && stacktrace.frames && stacktrace.frames.map(f => this._iteratee(f)),\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}