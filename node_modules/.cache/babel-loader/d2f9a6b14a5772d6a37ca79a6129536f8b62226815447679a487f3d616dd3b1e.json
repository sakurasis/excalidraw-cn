{"ast":null,"code":"import { Dsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nvar API = /** @class */function () {\n  /** Create a new instance of API */\n  function API(dsn, metadata) {\n    if (metadata === void 0) {\n      metadata = {};\n    }\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n  }\n  /** Returns the Dsn object. */\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  API.prototype.getBaseApiEndpoint = function () {\n    var dsn = this._dsnObject;\n    var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n    var port = dsn.port ? \":\" + dsn.port : '';\n    return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n  };\n  /** Returns the store endpoint URL. */\n  API.prototype.getStoreEndpoint = function () {\n    return this._getIngestEndpoint('store');\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return this.getStoreEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return this._getEnvelopeEndpoint() + \"?\" + this._encodedAuth();\n  };\n  /** Returns only the path component for the store endpoint. */\n  API.prototype.getStoreEndpointPath = function () {\n    var dsn = this._dsnObject;\n    return (dsn.path ? \"/\" + dsn.path : '') + \"/api/\" + dsn.projectId + \"/store/\";\n  };\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  API.prototype.getRequestHeaders = function (clientName, clientVersion) {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    var dsn = this._dsnObject;\n    var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n    header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n    header.push(\"sentry_key=\" + dsn.publicKey);\n    if (dsn.pass) {\n      header.push(\"sentry_secret=\" + dsn.pass);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', ')\n    };\n  };\n  /** Returns the url to the report dialog endpoint. */\n  API.prototype.getReportDialogEndpoint = function (dialogOptions) {\n    if (dialogOptions === void 0) {\n      dialogOptions = {};\n    }\n    var dsn = this._dsnObject;\n    var endpoint = this.getBaseApiEndpoint() + \"embed/error-page/\";\n    var encodedOptions = [];\n    encodedOptions.push(\"dsn=\" + dsn.toString());\n    for (var key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(\"name=\" + encodeURIComponent(dialogOptions.user.name));\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(\"email=\" + encodeURIComponent(dialogOptions.user.email));\n        }\n      } else {\n        encodedOptions.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]));\n      }\n    }\n    if (encodedOptions.length) {\n      return endpoint + \"?\" + encodedOptions.join('&');\n    }\n    return endpoint;\n  };\n  /** Returns the envelope endpoint URL. */\n  API.prototype._getEnvelopeEndpoint = function () {\n    return this._getIngestEndpoint('envelope');\n  };\n  /** Returns the ingest API endpoint for target. */\n  API.prototype._getIngestEndpoint = function (target) {\n    var base = this.getBaseApiEndpoint();\n    var dsn = this._dsnObject;\n    return \"\" + base + dsn.projectId + \"/\" + target + \"/\";\n  };\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  API.prototype._encodedAuth = function () {\n    var dsn = this._dsnObject;\n    var auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION\n    };\n    return urlEncode(auth);\n  };\n  return API;\n}();\nexport { API };","map":{"version":3,"names":["Dsn","urlEncode","SENTRY_API_VERSION","API","dsn","metadata","_dsnObject","prototype","getDsn","getBaseApiEndpoint","protocol","port","host","path","getStoreEndpoint","_getIngestEndpoint","getStoreEndpointWithUrlEncodedAuth","_encodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","_getEnvelopeEndpoint","getStoreEndpointPath","projectId","getRequestHeaders","clientName","clientVersion","header","push","publicKey","pass","join","getReportDialogEndpoint","dialogOptions","endpoint","encodedOptions","toString","key","user","name","encodeURIComponent","email","length","target","base","auth","sentry_key","sentry_version"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\core\\src\\api.ts"],"sourcesContent":["import { DsnLike, SdkMetadata } from '@sentry/types';\nimport { Dsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}) {\n    this.dsn = dsn;\n    this._dsnObject = new Dsn(dsn);\n    this.metadata = metadata;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return this._getIngestEndpoint('store');\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return `${this.getStoreEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return `${this._getEnvelopeEndpoint()}?${this._encodedAuth()}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /**\n   * Returns an object that can be used in request headers.\n   * This is needed for node and the old /store endpoint in sentry\n   */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.publicKey}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this.getBaseApiEndpoint()}embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'dsn') {\n        continue;\n      }\n\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n\n  /** Returns the envelope endpoint URL. */\n  private _getEnvelopeEndpoint(): string {\n    return this._getIngestEndpoint('envelope');\n  }\n\n  /** Returns the ingest API endpoint for target. */\n  private _getIngestEndpoint(target: 'store' | 'envelope'): string {\n    const base = this.getBaseApiEndpoint();\n    const dsn = this._dsnObject;\n    return `${base}${dsn.projectId}/${target}/`;\n  }\n\n  /** Returns a URL-encoded string with auth config suitable for a query string. */\n  private _encodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      // We send only the minimum set of required information. See\n      // https://github.com/getsentry/sentry-javascript/issues/2572.\n      sentry_key: dsn.publicKey,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    return urlEncode(auth);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}