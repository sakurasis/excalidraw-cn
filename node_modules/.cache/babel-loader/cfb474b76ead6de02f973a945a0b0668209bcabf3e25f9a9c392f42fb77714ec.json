{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\excalidraw-app\\\\CustomStats.tsx\";\nimport { useEffect, useState } from \"react\";\nimport { debounce, getVersion, nFormatter } from \"../utils\";\nimport { getElementsStorageSize, getTotalStorageSize } from \"./data/localStorage\";\nimport { DEFAULT_VERSION } from \"../constants\";\nimport { t } from \"../i18n\";\nimport { copyTextToSystemClipboard } from \"../clipboard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst STORAGE_SIZE_TIMEOUT = 500;\nconst getStorageSizes = debounce(cb => {\n  cb({\n    scene: getElementsStorageSize(),\n    total: getTotalStorageSize()\n  });\n}, STORAGE_SIZE_TIMEOUT);\nconst CustomStats = props => {\n  const [storageSizes, setStorageSizes] = useState({\n    scene: 0,\n    total: 0\n  });\n  useEffect(() => {\n    getStorageSizes(sizes => {\n      setStorageSizes(sizes);\n    });\n  }, [props.elements, props.appState]);\n  useEffect(() => () => getStorageSizes.cancel(), []);\n  const version = getVersion();\n  let hash;\n  let timestamp;\n  if (version !== DEFAULT_VERSION) {\n    timestamp = version.slice(0, 16).replace(\"T\", \" \");\n    hash = version.slice(21);\n  } else {\n    timestamp = t(\"stats.versionNotAvailable\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"th\", {\n        colSpan: 2,\n        children: t(\"stats.storage\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: t(\"stats.scene\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: nFormatter(storageSizes.scene, 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: t(\"stats.total\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: nFormatter(storageSizes.total, 1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"th\", {\n        colSpan: 2,\n        children: t(\"stats.version\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: 2,\n        style: {\n          textAlign: \"center\",\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          try {\n            await copyTextToSystemClipboard(getVersion());\n            props.setToast(t(\"toast.copyToClipboard\"));\n          } catch {}\n        },\n        title: t(\"stats.versionCopy\"),\n        children: [timestamp, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), hash]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\nexport default CustomStats;","map":{"version":3,"names":["useEffect","useState","debounce","getVersion","nFormatter","getElementsStorageSize","getTotalStorageSize","DEFAULT_VERSION","t","copyTextToSystemClipboard","jsxDEV","_jsxDEV","Fragment","_Fragment","STORAGE_SIZE_TIMEOUT","getStorageSizes","cb","scene","total","CustomStats","props","storageSizes","setStorageSizes","sizes","elements","appState","cancel","version","hash","timestamp","slice","replace","children","colSpan","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","cursor","onClick","setToast","title"],"sources":["D:/project/excalidraw-cn/src/excalidraw-app/CustomStats.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { debounce, getVersion, nFormatter } from \"../utils\";\nimport {\n  getElementsStorageSize,\n  getTotalStorageSize,\n} from \"./data/localStorage\";\nimport { DEFAULT_VERSION } from \"../constants\";\nimport { t } from \"../i18n\";\nimport { copyTextToSystemClipboard } from \"../clipboard\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { UIAppState } from \"../types\";\n\ntype StorageSizes = { scene: number; total: number };\n\nconst STORAGE_SIZE_TIMEOUT = 500;\n\nconst getStorageSizes = debounce((cb: (sizes: StorageSizes) => void) => {\n  cb({\n    scene: getElementsStorageSize(),\n    total: getTotalStorageSize(),\n  });\n}, STORAGE_SIZE_TIMEOUT);\n\ntype Props = {\n  setToast: (message: string) => void;\n  elements: readonly NonDeletedExcalidrawElement[];\n  appState: UIAppState;\n};\nconst CustomStats = (props: Props) => {\n  const [storageSizes, setStorageSizes] = useState<StorageSizes>({\n    scene: 0,\n    total: 0,\n  });\n\n  useEffect(() => {\n    getStorageSizes((sizes) => {\n      setStorageSizes(sizes);\n    });\n  }, [props.elements, props.appState]);\n  useEffect(() => () => getStorageSizes.cancel(), []);\n\n  const version = getVersion();\n  let hash;\n  let timestamp;\n\n  if (version !== DEFAULT_VERSION) {\n    timestamp = version.slice(0, 16).replace(\"T\", \" \");\n    hash = version.slice(21);\n  } else {\n    timestamp = t(\"stats.versionNotAvailable\");\n  }\n\n  return (\n    <>\n      <tr>\n        <th colSpan={2}>{t(\"stats.storage\")}</th>\n      </tr>\n      <tr>\n        <td>{t(\"stats.scene\")}</td>\n        <td>{nFormatter(storageSizes.scene, 1)}</td>\n      </tr>\n      <tr>\n        <td>{t(\"stats.total\")}</td>\n        <td>{nFormatter(storageSizes.total, 1)}</td>\n      </tr>\n      <tr>\n        <th colSpan={2}>{t(\"stats.version\")}</th>\n      </tr>\n      <tr>\n        <td\n          colSpan={2}\n          style={{ textAlign: \"center\", cursor: \"pointer\" }}\n          onClick={async () => {\n            try {\n              await copyTextToSystemClipboard(getVersion());\n              props.setToast(t(\"toast.copyToClipboard\"));\n            } catch {}\n          }}\n          title={t(\"stats.versionCopy\")}\n        >\n          {timestamp}\n          <br />\n          {hash}\n        </td>\n      </tr>\n    </>\n  );\n};\n\nexport default CustomStats;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}