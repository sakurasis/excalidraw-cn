{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { isError, isPlainObject, logger, normalize } from '@sentry/utils';\n/** Patch toString calls to return proper name for wrapped functions */\nvar ExtraErrorData = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function ExtraErrorData(_options) {\n    if (_options === void 0) {\n      _options = {\n        depth: 3\n      };\n    }\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n    this.name = ExtraErrorData.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  ExtraErrorData.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  };\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n  ExtraErrorData.prototype.enhanceEventWithErrorData = function (event, hint) {\n    var _a;\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n    var name = hint.originalException.name || hint.originalException.constructor.name;\n    var errorData = this._extractErrorData(hint.originalException);\n    if (errorData) {\n      var contexts = __assign({}, event.contexts);\n      var normalizedErrorData = normalize(errorData, this._options.depth);\n      if (isPlainObject(normalizedErrorData)) {\n        contexts = __assign(__assign({}, event.contexts), (_a = {}, _a[name] = __assign({}, normalizedErrorData), _a));\n      }\n      return __assign(__assign({}, event), {\n        contexts: contexts\n      });\n    }\n    return event;\n  };\n  /**\n   * Extract extra information from the Error object\n   */\n  ExtraErrorData.prototype._extractErrorData = function (error) {\n    var e_1, _a;\n    var result = null;\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      var nativeKeys_1 = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      var errorKeys = Object.getOwnPropertyNames(error).filter(function (key) {\n        return nativeKeys_1.indexOf(key) === -1;\n      });\n      if (errorKeys.length) {\n        var extraErrorInfo = {};\n        try {\n          for (var errorKeys_1 = __values(errorKeys), errorKeys_1_1 = errorKeys_1.next(); !errorKeys_1_1.done; errorKeys_1_1 = errorKeys_1.next()) {\n            var key = errorKeys_1_1.value;\n            var value = error[key];\n            if (isError(value)) {\n              value = value.toString();\n            }\n            extraErrorInfo[key] = value;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (errorKeys_1_1 && !errorKeys_1_1.done && (_a = errorKeys_1.return)) _a.call(errorKeys_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        result = extraErrorInfo;\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n    return result;\n  };\n  /**\n   * @inheritDoc\n   */\n  ExtraErrorData.id = 'ExtraErrorData';\n  return ExtraErrorData;\n}();\nexport { ExtraErrorData };","map":{"version":3,"names":["isError","isPlainObject","logger","normalize","ExtraErrorData","_options","depth","name","id","prototype","setupOnce","addGlobalEventProcessor","getCurrentHub","event","hint","self","getIntegration","enhanceEventWithErrorData","originalException","constructor","errorData","_extractErrorData","contexts","__assign","normalizedErrorData","_a","error","result","nativeKeys_1","errorKeys","Object","getOwnPropertyNames","filter","key","indexOf","length","extraErrorInfo","errorKeys_1","__values","errorKeys_1_1","next","done","value","toString","oO"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\extraerrordata.ts"],"sourcesContent":["import { Event, EventHint, EventProcessor, ExtendedError, Hub, Integration } from '@sentry/types';\nimport { isError, isPlainObject, logger, normalize } from '@sentry/utils';\n\n/** JSDoc */\ninterface ExtraErrorDataOptions {\n  depth?: number;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(private readonly _options: ExtraErrorDataOptions = { depth: 3 }) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the Event\n   */\n  public enhanceEventWithErrorData(event: Event, hint?: EventHint): Event {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n    const name = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n    const errorData = this._extractErrorData(hint.originalException as ExtendedError);\n\n    if (errorData) {\n      let contexts = {\n        ...event.contexts,\n      };\n\n      const normalizedErrorData = normalize(errorData, this._options.depth);\n      if (isPlainObject(normalizedErrorData)) {\n        contexts = {\n          ...event.contexts,\n          [name]: {\n            ...normalizedErrorData,\n          },\n        };\n      }\n\n      return {\n        ...event,\n        contexts,\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private _extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    let result = null;\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).toString();\n          }\n          extraErrorInfo[key] = value;\n        }\n        result = extraErrorInfo;\n      }\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}