{"ast":null,"code":"import _createForOfIteratorHelper from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"x\",\"y\",\"strokeColor\",\"backgroundColor\",\"fillStyle\",\"strokeWidth\",\"strokeStyle\",\"roughness\",\"opacity\",\"width\",\"height\",\"angle\",\"groupIds\",\"frameId\",\"roundness\",\"boundElements\",\"link\",\"locked\"];import{arrayToMap,getFontString,getUpdatedTimestamp,isTestEnv}from\"../utils\";import{randomInteger,randomId}from\"../random\";import{bumpVersion,newElementWith}from\"./mutateElement\";import{getNewGroupIdsForDuplication}from\"../groups\";import{getElementAbsoluteCoords}from\".\";import{adjustXYWithRotation}from\"../math\";import{getResizedElementAbsoluteCoords}from\"./bounds\";import{getContainerElement,measureText,normalizeText,wrapText,getBoundTextMaxWidth,getDefaultLineHeight}from\"./textElement\";import{DEFAULT_ELEMENT_PROPS,DEFAULT_FONT_FAMILY,DEFAULT_FONT_SIZE,DEFAULT_TEXT_ALIGN,DEFAULT_VERTICAL_ALIGN,VERTICAL_ALIGN}from\"../constants\";var _newElementBase=function _newElementBase(type,_ref){var _rest$seed,_rest$versionNonce;var x=_ref.x,y=_ref.y,_ref$strokeColor=_ref.strokeColor,strokeColor=_ref$strokeColor===void 0?DEFAULT_ELEMENT_PROPS.strokeColor:_ref$strokeColor,_ref$backgroundColor=_ref.backgroundColor,backgroundColor=_ref$backgroundColor===void 0?DEFAULT_ELEMENT_PROPS.backgroundColor:_ref$backgroundColor,_ref$fillStyle=_ref.fillStyle,fillStyle=_ref$fillStyle===void 0?DEFAULT_ELEMENT_PROPS.fillStyle:_ref$fillStyle,_ref$strokeWidth=_ref.strokeWidth,strokeWidth=_ref$strokeWidth===void 0?DEFAULT_ELEMENT_PROPS.strokeWidth:_ref$strokeWidth,_ref$strokeStyle=_ref.strokeStyle,strokeStyle=_ref$strokeStyle===void 0?DEFAULT_ELEMENT_PROPS.strokeStyle:_ref$strokeStyle,_ref$roughness=_ref.roughness,roughness=_ref$roughness===void 0?DEFAULT_ELEMENT_PROPS.roughness:_ref$roughness,_ref$opacity=_ref.opacity,opacity=_ref$opacity===void 0?DEFAULT_ELEMENT_PROPS.opacity:_ref$opacity,_ref$width=_ref.width,width=_ref$width===void 0?0:_ref$width,_ref$height=_ref.height,height=_ref$height===void 0?0:_ref$height,_ref$angle=_ref.angle,angle=_ref$angle===void 0?0:_ref$angle,_ref$groupIds=_ref.groupIds,groupIds=_ref$groupIds===void 0?[]:_ref$groupIds,_ref$frameId=_ref.frameId,frameId=_ref$frameId===void 0?null:_ref$frameId,_ref$roundness=_ref.roundness,roundness=_ref$roundness===void 0?null:_ref$roundness,_ref$boundElements=_ref.boundElements,boundElements=_ref$boundElements===void 0?null:_ref$boundElements,_ref$link=_ref.link,link=_ref$link===void 0?null:_ref$link,_ref$locked=_ref.locked,locked=_ref$locked===void 0?DEFAULT_ELEMENT_PROPS.locked:_ref$locked,rest=_objectWithoutProperties(_ref,_excluded);// assign type to guard against excess properties\nvar element={id:rest.id||randomId(),type:type,x:x,y:y,width:width,height:height,angle:angle,strokeColor:strokeColor,backgroundColor:backgroundColor,fillStyle:fillStyle,strokeWidth:strokeWidth,strokeStyle:strokeStyle,roughness:roughness,opacity:opacity,groupIds:groupIds,frameId:frameId,roundness:roundness,seed:(_rest$seed=rest.seed)!==null&&_rest$seed!==void 0?_rest$seed:randomInteger(),version:rest.version||1,versionNonce:(_rest$versionNonce=rest.versionNonce)!==null&&_rest$versionNonce!==void 0?_rest$versionNonce:0,isDeleted:false,boundElements:boundElements,updated:getUpdatedTimestamp(),link:link,locked:locked};return element;};export var newElement=function newElement(opts){return _newElementBase(opts.type,opts);};export var newFrameElement=function newFrameElement(opts){var frameElement=newElementWith(_objectSpread(_objectSpread({},_newElementBase(\"frame\",opts)),{},{type:\"frame\",name:null}),{});return frameElement;};/** computes element x/y offset based on textAlign/verticalAlign */var getTextElementPositionOffsets=function getTextElementPositionOffsets(opts,metrics){return{x:opts.textAlign===\"center\"?metrics.width/2:opts.textAlign===\"right\"?metrics.width:0,y:opts.verticalAlign===\"middle\"?metrics.height/2:0};};export var newTextElement=function newTextElement(opts){var fontFamily=opts.fontFamily||DEFAULT_FONT_FAMILY;var fontSize=opts.fontSize||DEFAULT_FONT_SIZE;var lineHeight=opts.lineHeight||getDefaultLineHeight(fontFamily);var text=normalizeText(opts.text);var metrics=measureText(text,getFontString({fontFamily:fontFamily,fontSize:fontSize}),lineHeight);var textAlign=opts.textAlign||DEFAULT_TEXT_ALIGN;var verticalAlign=opts.verticalAlign||DEFAULT_VERTICAL_ALIGN;var offsets=getTextElementPositionOffsets({textAlign:textAlign,verticalAlign:verticalAlign},metrics);var textElement=newElementWith(_objectSpread(_objectSpread({},_newElementBase(\"text\",opts)),{},{text:text,fontSize:fontSize,fontFamily:fontFamily,textAlign:textAlign,verticalAlign:verticalAlign,x:opts.x-offsets.x,y:opts.y-offsets.y,width:metrics.width,height:metrics.height,baseline:metrics.baseline,containerId:opts.containerId||null,originalText:text,lineHeight:lineHeight,isFrameName:opts.isFrameName||false}),{});return textElement;};var getAdjustedDimensions=function getAdjustedDimensions(element,nextText){var _measureText=measureText(nextText,getFontString(element),element.lineHeight),nextWidth=_measureText.width,nextHeight=_measureText.height,nextBaseline=_measureText.baseline;var textAlign=element.textAlign,verticalAlign=element.verticalAlign;var x;var y;if(textAlign===\"center\"&&verticalAlign===VERTICAL_ALIGN.MIDDLE&&!element.containerId){var prevMetrics=measureText(element.text,getFontString(element),element.lineHeight);var offsets=getTextElementPositionOffsets(element,{width:nextWidth-prevMetrics.width,height:nextHeight-prevMetrics.height});x=element.x-offsets.x;y=element.y-offsets.y;}else{var _getElementAbsoluteCo=getElementAbsoluteCoords(element),_getElementAbsoluteCo2=_slicedToArray(_getElementAbsoluteCo,4),x1=_getElementAbsoluteCo2[0],y1=_getElementAbsoluteCo2[1],x2=_getElementAbsoluteCo2[2],y2=_getElementAbsoluteCo2[3];var _getResizedElementAbs=getResizedElementAbsoluteCoords(element,nextWidth,nextHeight,false),_getResizedElementAbs2=_slicedToArray(_getResizedElementAbs,4),nextX1=_getResizedElementAbs2[0],nextY1=_getResizedElementAbs2[1],nextX2=_getResizedElementAbs2[2],nextY2=_getResizedElementAbs2[3];var deltaX1=(x1-nextX1)/2;var deltaY1=(y1-nextY1)/2;var deltaX2=(x2-nextX2)/2;var deltaY2=(y2-nextY2)/2;var _adjustXYWithRotation=adjustXYWithRotation({s:true,e:textAlign===\"center\"||textAlign===\"left\",w:textAlign===\"center\"||textAlign===\"right\"},element.x,element.y,element.angle,deltaX1,deltaY1,deltaX2,deltaY2);var _adjustXYWithRotation2=_slicedToArray(_adjustXYWithRotation,2);x=_adjustXYWithRotation2[0];y=_adjustXYWithRotation2[1];}return{width:nextWidth,height:nextHeight,baseline:nextBaseline,x:Number.isFinite(x)?x:element.x,y:Number.isFinite(y)?y:element.y};};export var refreshTextDimensions=function refreshTextDimensions(textElement){var text=arguments.length>1&&arguments[1]!==undefined?arguments[1]:textElement.text;if(textElement.isDeleted){return;}var container=getContainerElement(textElement);if(container){text=wrapText(text,getFontString(textElement),getBoundTextMaxWidth(container));}var dimensions=getAdjustedDimensions(textElement,text);return _objectSpread({text:text},dimensions);};export var updateTextElement=function updateTextElement(textElement,_ref2){var text=_ref2.text,isDeleted=_ref2.isDeleted,originalText=_ref2.originalText;return newElementWith(textElement,_objectSpread({originalText:originalText,isDeleted:isDeleted!==null&&isDeleted!==void 0?isDeleted:textElement.isDeleted},refreshTextDimensions(textElement,originalText)));};export var newFreeDrawElement=function newFreeDrawElement(opts){return _objectSpread(_objectSpread({},_newElementBase(opts.type,opts)),{},{points:opts.points||[],pressures:[],simulatePressure:opts.simulatePressure,lastCommittedPoint:null});};export var newLinearElement=function newLinearElement(opts){return _objectSpread(_objectSpread({},_newElementBase(opts.type,opts)),{},{points:opts.points||[],lastCommittedPoint:null,startBinding:null,endBinding:null,startArrowhead:opts.startArrowhead,endArrowhead:opts.endArrowhead});};export var newImageElement=function newImageElement(opts){var _opts$status,_opts$fileId,_opts$scale;return _objectSpread(_objectSpread({},_newElementBase(\"image\",opts)),{},{// in the future we'll support changing stroke color for some SVG elements,\n// and `transparent` will likely mean \"use original colors of the image\"\nstrokeColor:\"transparent\",status:(_opts$status=opts.status)!==null&&_opts$status!==void 0?_opts$status:\"pending\",fileId:(_opts$fileId=opts.fileId)!==null&&_opts$fileId!==void 0?_opts$fileId:null,scale:(_opts$scale=opts.scale)!==null&&_opts$scale!==void 0?_opts$scale:[1,1]});};// Simplified deep clone for the purpose of cloning ExcalidrawElement.\n//\n// Only clones plain objects and arrays. Doesn't clone Date, RegExp, Map, Set,\n// Typed arrays and other non-null objects.\n//\n// Adapted from https://github.com/lukeed/klona\n//\n// The reason for `deepCopyElement()` wrapper is type safety (only allow\n// passing ExcalidrawElement as the top-level argument).\nvar _deepCopyElement=function _deepCopyElement(val){var depth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;// only clone non-primitives\nif(val==null||typeof val!==\"object\"){return val;}var objectType=Object.prototype.toString.call(val);if(objectType===\"[object Object]\"){var tmp=typeof val.constructor===\"function\"?Object.create(Object.getPrototypeOf(val)):{};for(var key in val){if(val.hasOwnProperty(key)){// don't copy non-serializable objects like these caches. They'll be\n// populated when the element is rendered.\nif(depth===0&&(key===\"shape\"||key===\"canvas\")){continue;}tmp[key]=_deepCopyElement(val[key],depth+1);}}return tmp;}if(Array.isArray(val)){var k=val.length;var arr=new Array(k);while(k--){arr[k]=_deepCopyElement(val[k],depth+1);}return arr;}// we're not cloning non-array & non-plain-object objects because we\n// don't support them on excalidraw elements yet. If we do, we need to make\n// sure we start cloning them, so let's warn about it.\nif(process.env.NODE_ENV===\"development\"){if(objectType!==\"[object Object]\"&&objectType!==\"[object Array]\"&&objectType.startsWith(\"[object \")){console.warn(\"_deepCloneElement: unexpected object type \".concat(objectType,\". This value will not be cloned!\"));}}return val;};/**\n * Clones ExcalidrawElement data structure. Does not regenerate id, nonce, or\n * any value. The purpose is to to break object references for immutability\n * reasons, whenever we want to keep the original element, but ensure it's not\n * mutated.\n *\n * Only clones plain objects and arrays. Doesn't clone Date, RegExp, Map, Set,\n * Typed arrays and other non-null objects.\n */export var deepCopyElement=function deepCopyElement(val){return _deepCopyElement(val);};/**\n * utility wrapper to generate new id. In test env it reuses the old + postfix\n * for test assertions.\n */var regenerateId=function regenerateId(previousId){if(isTestEnv()&&previousId){var _window$h,_window$h$app;var nextId=\"\".concat(previousId,\"_copy\");// `window.h` may not be defined in some unit tests\nif((_window$h=window.h)!==null&&_window$h!==void 0&&(_window$h$app=_window$h.app)!==null&&_window$h$app!==void 0&&_window$h$app.getSceneElementsIncludingDeleted().find(function(el){return el.id===nextId;})){nextId+=\"_copy\";}return nextId;}return randomId();};/**\n * Duplicate an element, often used in the alt-drag operation.\n * Note that this method has gotten a bit complicated since the\n * introduction of gruoping/ungrouping elements.\n * @param editingGroupId The current group being edited. The new\n *                       element will inherit this group and its\n *                       parents.\n * @param groupIdMapForOperation A Map that maps old group IDs to\n *                               duplicated ones. If you are duplicating\n *                               multiple elements at once, share this map\n *                               amongst all of them\n * @param element Element to duplicate\n * @param overrides Any element properties to override\n */export var duplicateElement=function duplicateElement(editingGroupId,groupIdMapForOperation,element,overrides){var copy=deepCopyElement(element);copy.id=regenerateId(copy.id);copy.boundElements=null;copy.updated=getUpdatedTimestamp();copy.seed=randomInteger();copy.groupIds=getNewGroupIdsForDuplication(copy.groupIds,editingGroupId,function(groupId){if(!groupIdMapForOperation.has(groupId)){groupIdMapForOperation.set(groupId,regenerateId(groupId));}return groupIdMapForOperation.get(groupId);});if(overrides){copy=Object.assign(copy,overrides);}return copy;};/**\n * Clones elements, regenerating their ids (including bindings) and group ids.\n *\n * If bindings don't exist in the elements array, they are removed. Therefore,\n * it's advised to supply the whole elements array, or sets of elements that\n * are encapsulated (such as library items), if the purpose is to retain\n * bindings to the cloned elements intact.\n *\n * NOTE by default does not randomize or regenerate anything except the id.\n */export var duplicateElements=function duplicateElements(elements,opts){var clonedElements=[];var origElementsMap=arrayToMap(elements);// used for for migrating old ids to new ids\nvar elementNewIdsMap=new Map();var maybeGetNewId=function maybeGetNewId(id){// if we've already migrated the element id, return the new one directly\nif(elementNewIdsMap.has(id)){return elementNewIdsMap.get(id);}// if we haven't migrated the element id, but an old element with the same\n// id exists, generate a new id for it and return it\nif(origElementsMap.has(id)){var newId=regenerateId(id);elementNewIdsMap.set(id,newId);return newId;}// if old element doesn't exist, return null to mark it for removal\nreturn null;};var groupNewIdsMap=new Map();var _iterator=_createForOfIteratorHelper(elements),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var element=_step.value;var clonedElement=_deepCopyElement(element);clonedElement.id=maybeGetNewId(element.id);if(opts!==null&&opts!==void 0&&opts.randomizeSeed){clonedElement.seed=randomInteger();bumpVersion(clonedElement);}if(clonedElement.groupIds){clonedElement.groupIds=clonedElement.groupIds.map(function(groupId){if(!groupNewIdsMap.has(groupId)){groupNewIdsMap.set(groupId,regenerateId(groupId));}return groupNewIdsMap.get(groupId);});}if(\"containerId\"in clonedElement&&clonedElement.containerId){var newContainerId=maybeGetNewId(clonedElement.containerId);clonedElement.containerId=newContainerId;}if(\"boundElements\"in clonedElement&&clonedElement.boundElements){clonedElement.boundElements=clonedElement.boundElements.reduce(function(acc,binding){var newBindingId=maybeGetNewId(binding.id);if(newBindingId){acc.push(_objectSpread(_objectSpread({},binding),{},{id:newBindingId}));}return acc;},[]);}if(\"endBinding\"in clonedElement&&clonedElement.endBinding){var newEndBindingId=maybeGetNewId(clonedElement.endBinding.elementId);clonedElement.endBinding=newEndBindingId?_objectSpread(_objectSpread({},clonedElement.endBinding),{},{elementId:newEndBindingId}):null;}if(\"startBinding\"in clonedElement&&clonedElement.startBinding){var _newEndBindingId=maybeGetNewId(clonedElement.startBinding.elementId);clonedElement.startBinding=_newEndBindingId?_objectSpread(_objectSpread({},clonedElement.startBinding),{},{elementId:_newEndBindingId}):null;}if(clonedElement.frameId){clonedElement.frameId=maybeGetNewId(clonedElement.frameId);}clonedElements.push(clonedElement);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return clonedElements;};","map":{"version":3,"names":["arrayToMap","getFontString","getUpdatedTimestamp","isTestEnv","randomInteger","randomId","bumpVersion","newElementWith","getNewGroupIdsForDuplication","getElementAbsoluteCoords","adjustXYWithRotation","getResizedElementAbsoluteCoords","getContainerElement","measureText","normalizeText","wrapText","getBoundTextMaxWidth","getDefaultLineHeight","DEFAULT_ELEMENT_PROPS","DEFAULT_FONT_FAMILY","DEFAULT_FONT_SIZE","DEFAULT_TEXT_ALIGN","DEFAULT_VERTICAL_ALIGN","VERTICAL_ALIGN","_newElementBase","type","_ref","_rest$seed","_rest$versionNonce","x","y","_ref$strokeColor","strokeColor","_ref$backgroundColor","backgroundColor","_ref$fillStyle","fillStyle","_ref$strokeWidth","strokeWidth","_ref$strokeStyle","strokeStyle","_ref$roughness","roughness","_ref$opacity","opacity","_ref$width","width","_ref$height","height","_ref$angle","angle","_ref$groupIds","groupIds","_ref$frameId","frameId","_ref$roundness","roundness","_ref$boundElements","boundElements","_ref$link","link","_ref$locked","locked","rest","_objectWithoutProperties","_excluded","element","id","seed","version","versionNonce","isDeleted","updated","newElement","opts","newFrameElement","frameElement","_objectSpread","name","getTextElementPositionOffsets","metrics","textAlign","verticalAlign","newTextElement","fontFamily","fontSize","lineHeight","text","offsets","textElement","baseline","containerId","originalText","isFrameName","getAdjustedDimensions","nextText","_measureText","nextWidth","nextHeight","nextBaseline","MIDDLE","prevMetrics","_getElementAbsoluteCo","_getElementAbsoluteCo2","_slicedToArray","x1","y1","x2","y2","_getResizedElementAbs","_getResizedElementAbs2","nextX1","nextY1","nextX2","nextY2","deltaX1","deltaY1","deltaX2","deltaY2","_adjustXYWithRotation","s","e","w","_adjustXYWithRotation2","Number","isFinite","refreshTextDimensions","arguments","length","undefined","container","dimensions","updateTextElement","_ref2","newFreeDrawElement","points","pressures","simulatePressure","lastCommittedPoint","newLinearElement","startBinding","endBinding","startArrowhead","endArrowhead","newImageElement","_opts$status","_opts$fileId","_opts$scale","status","fileId","scale","_deepCopyElement","val","depth","objectType","Object","prototype","toString","call","tmp","constructor","create","getPrototypeOf","key","hasOwnProperty","Array","isArray","k","arr","process","env","NODE_ENV","startsWith","console","warn","concat","deepCopyElement","regenerateId","previousId","_window$h","_window$h$app","nextId","window","h","app","getSceneElementsIncludingDeleted","find","el","duplicateElement","editingGroupId","groupIdMapForOperation","overrides","copy","groupId","has","set","get","assign","duplicateElements","elements","clonedElements","origElementsMap","elementNewIdsMap","Map","maybeGetNewId","newId","groupNewIdsMap","_iterator","_createForOfIteratorHelper","_step","n","done","value","clonedElement","randomizeSeed","map","newContainerId","reduce","acc","binding","newBindingId","push","newEndBindingId","elementId","err","f"],"sources":["D:/project/excalidraw-cn/src/element/newElement.ts"],"sourcesContent":["import {\n  ExcalidrawElement,\n  ExcalidrawImageElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawGenericElement,\n  NonDeleted,\n  TextAlign,\n  GroupId,\n  VerticalAlign,\n  Arrowhead,\n  ExcalidrawFreeDrawElement,\n  FontFamilyValues,\n  ExcalidrawTextContainer,\n  ExcalidrawFrameElement,\n} from \"../element/types\";\nimport {\n  arrayToMap,\n  getFontString,\n  getUpdatedTimestamp,\n  isTestEnv,\n} from \"../utils\";\nimport { randomInteger, randomId } from \"../random\";\nimport { bumpVersion, newElementWith } from \"./mutateElement\";\nimport { getNewGroupIdsForDuplication } from \"../groups\";\nimport { AppState } from \"../types\";\nimport { getElementAbsoluteCoords } from \".\";\nimport { adjustXYWithRotation } from \"../math\";\nimport { getResizedElementAbsoluteCoords } from \"./bounds\";\nimport {\n  getContainerElement,\n  measureText,\n  normalizeText,\n  wrapText,\n  getBoundTextMaxWidth,\n  getDefaultLineHeight,\n} from \"./textElement\";\nimport {\n  DEFAULT_ELEMENT_PROPS,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_SIZE,\n  DEFAULT_TEXT_ALIGN,\n  DEFAULT_VERTICAL_ALIGN,\n  VERTICAL_ALIGN,\n} from \"../constants\";\nimport { MarkOptional, Merge, Mutable } from \"../utility-types\";\n\ntype ElementConstructorOpts = MarkOptional<\n  Omit<ExcalidrawGenericElement, \"id\" | \"type\" | \"isDeleted\" | \"updated\">,\n  | \"width\"\n  | \"height\"\n  | \"angle\"\n  | \"groupIds\"\n  | \"frameId\"\n  | \"boundElements\"\n  | \"seed\"\n  | \"version\"\n  | \"versionNonce\"\n  | \"link\"\n  | \"strokeStyle\"\n  | \"fillStyle\"\n  | \"strokeColor\"\n  | \"backgroundColor\"\n  | \"roughness\"\n  | \"strokeWidth\"\n  | \"roundness\"\n  | \"locked\"\n  | \"opacity\"\n>;\n\nconst _newElementBase = <T extends ExcalidrawElement>(\n  type: T[\"type\"],\n  {\n    x,\n    y,\n    strokeColor = DEFAULT_ELEMENT_PROPS.strokeColor,\n    backgroundColor = DEFAULT_ELEMENT_PROPS.backgroundColor,\n    fillStyle = DEFAULT_ELEMENT_PROPS.fillStyle,\n    strokeWidth = DEFAULT_ELEMENT_PROPS.strokeWidth,\n    strokeStyle = DEFAULT_ELEMENT_PROPS.strokeStyle,\n    roughness = DEFAULT_ELEMENT_PROPS.roughness,\n    opacity = DEFAULT_ELEMENT_PROPS.opacity,\n    width = 0,\n    height = 0,\n    angle = 0,\n    groupIds = [],\n    frameId = null,\n    roundness = null,\n    boundElements = null,\n    link = null,\n    locked = DEFAULT_ELEMENT_PROPS.locked,\n    ...rest\n  }: ElementConstructorOpts & Omit<Partial<ExcalidrawGenericElement>, \"type\">,\n) => {\n  // assign type to guard against excess properties\n  const element: Merge<ExcalidrawGenericElement, { type: T[\"type\"] }> = {\n    id: rest.id || randomId(),\n    type,\n    x,\n    y,\n    width,\n    height,\n    angle,\n    strokeColor,\n    backgroundColor,\n    fillStyle,\n    strokeWidth,\n    strokeStyle,\n    roughness,\n    opacity,\n    groupIds,\n    frameId,\n    roundness,\n    seed: rest.seed ?? randomInteger(),\n    version: rest.version || 1,\n    versionNonce: rest.versionNonce ?? 0,\n    isDeleted: false as false,\n    boundElements,\n    updated: getUpdatedTimestamp(),\n    link,\n    locked,\n  };\n  return element;\n};\n\nexport const newElement = (\n  opts: {\n    type: ExcalidrawGenericElement[\"type\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawGenericElement> =>\n  _newElementBase<ExcalidrawGenericElement>(opts.type, opts);\n\nexport const newFrameElement = (\n  opts: ElementConstructorOpts,\n): NonDeleted<ExcalidrawFrameElement> => {\n  const frameElement = newElementWith(\n    {\n      ..._newElementBase<ExcalidrawFrameElement>(\"frame\", opts),\n      type: \"frame\",\n      name: null,\n    },\n    {},\n  );\n\n  return frameElement;\n};\n\n/** computes element x/y offset based on textAlign/verticalAlign */\nconst getTextElementPositionOffsets = (\n  opts: {\n    textAlign: ExcalidrawTextElement[\"textAlign\"];\n    verticalAlign: ExcalidrawTextElement[\"verticalAlign\"];\n  },\n  metrics: {\n    width: number;\n    height: number;\n  },\n) => {\n  return {\n    x:\n      opts.textAlign === \"center\"\n        ? metrics.width / 2\n        : opts.textAlign === \"right\"\n        ? metrics.width\n        : 0,\n    y: opts.verticalAlign === \"middle\" ? metrics.height / 2 : 0,\n  };\n};\n\nexport const newTextElement = (\n  opts: {\n    text: string;\n    fontSize?: number;\n    fontFamily?: FontFamilyValues;\n    textAlign?: TextAlign;\n    verticalAlign?: VerticalAlign;\n    containerId?: ExcalidrawTextContainer[\"id\"];\n    lineHeight?: ExcalidrawTextElement[\"lineHeight\"];\n    strokeWidth?: ExcalidrawTextElement[\"strokeWidth\"];\n    isFrameName?: boolean;\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawTextElement> => {\n  const fontFamily = opts.fontFamily || DEFAULT_FONT_FAMILY;\n  const fontSize = opts.fontSize || DEFAULT_FONT_SIZE;\n  const lineHeight = opts.lineHeight || getDefaultLineHeight(fontFamily);\n  const text = normalizeText(opts.text);\n  const metrics = measureText(\n    text,\n    getFontString({ fontFamily, fontSize }),\n    lineHeight,\n  );\n  const textAlign = opts.textAlign || DEFAULT_TEXT_ALIGN;\n  const verticalAlign = opts.verticalAlign || DEFAULT_VERTICAL_ALIGN;\n  const offsets = getTextElementPositionOffsets(\n    { textAlign, verticalAlign },\n    metrics,\n  );\n\n  const textElement = newElementWith(\n    {\n      ..._newElementBase<ExcalidrawTextElement>(\"text\", opts),\n      text,\n      fontSize,\n      fontFamily,\n      textAlign,\n      verticalAlign,\n      x: opts.x - offsets.x,\n      y: opts.y - offsets.y,\n      width: metrics.width,\n      height: metrics.height,\n      baseline: metrics.baseline,\n      containerId: opts.containerId || null,\n      originalText: text,\n      lineHeight,\n      isFrameName: opts.isFrameName || false,\n    },\n    {},\n  );\n  return textElement;\n};\n\nconst getAdjustedDimensions = (\n  element: ExcalidrawTextElement,\n  nextText: string,\n): {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  baseline: number;\n} => {\n  const {\n    width: nextWidth,\n    height: nextHeight,\n    baseline: nextBaseline,\n  } = measureText(nextText, getFontString(element), element.lineHeight);\n  const { textAlign, verticalAlign } = element;\n  let x: number;\n  let y: number;\n  if (\n    textAlign === \"center\" &&\n    verticalAlign === VERTICAL_ALIGN.MIDDLE &&\n    !element.containerId\n  ) {\n    const prevMetrics = measureText(\n      element.text,\n      getFontString(element),\n      element.lineHeight,\n    );\n    const offsets = getTextElementPositionOffsets(element, {\n      width: nextWidth - prevMetrics.width,\n      height: nextHeight - prevMetrics.height,\n    });\n\n    x = element.x - offsets.x;\n    y = element.y - offsets.y;\n  } else {\n    const [x1, y1, x2, y2] = getElementAbsoluteCoords(element);\n\n    const [nextX1, nextY1, nextX2, nextY2] = getResizedElementAbsoluteCoords(\n      element,\n      nextWidth,\n      nextHeight,\n      false,\n    );\n    const deltaX1 = (x1 - nextX1) / 2;\n    const deltaY1 = (y1 - nextY1) / 2;\n    const deltaX2 = (x2 - nextX2) / 2;\n    const deltaY2 = (y2 - nextY2) / 2;\n\n    [x, y] = adjustXYWithRotation(\n      {\n        s: true,\n        e: textAlign === \"center\" || textAlign === \"left\",\n        w: textAlign === \"center\" || textAlign === \"right\",\n      },\n      element.x,\n      element.y,\n      element.angle,\n      deltaX1,\n      deltaY1,\n      deltaX2,\n      deltaY2,\n    );\n  }\n\n  return {\n    width: nextWidth,\n    height: nextHeight,\n    baseline: nextBaseline,\n    x: Number.isFinite(x) ? x : element.x,\n    y: Number.isFinite(y) ? y : element.y,\n  };\n};\n\nexport const refreshTextDimensions = (\n  textElement: ExcalidrawTextElement,\n  text = textElement.text,\n) => {\n  if (textElement.isDeleted) {\n    return;\n  }\n  const container = getContainerElement(textElement);\n  if (container) {\n    text = wrapText(\n      text,\n      getFontString(textElement),\n      getBoundTextMaxWidth(container),\n    );\n  }\n  const dimensions = getAdjustedDimensions(textElement, text);\n  return { text, ...dimensions };\n};\n\nexport const updateTextElement = (\n  textElement: ExcalidrawTextElement,\n  {\n    text,\n    isDeleted,\n    originalText,\n  }: {\n    text: string;\n    isDeleted?: boolean;\n    originalText: string;\n  },\n): ExcalidrawTextElement => {\n  return newElementWith(textElement, {\n    originalText,\n    isDeleted: isDeleted ?? textElement.isDeleted,\n    ...refreshTextDimensions(textElement, originalText),\n  });\n};\n\nexport const newFreeDrawElement = (\n  opts: {\n    type: \"freedraw\";\n    points?: ExcalidrawFreeDrawElement[\"points\"];\n    simulatePressure: boolean;\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawFreeDrawElement> => {\n  return {\n    ..._newElementBase<ExcalidrawFreeDrawElement>(opts.type, opts),\n    points: opts.points || [],\n    pressures: [],\n    simulatePressure: opts.simulatePressure,\n    lastCommittedPoint: null,\n  };\n};\n\nexport const newLinearElement = (\n  opts: {\n    type: ExcalidrawLinearElement[\"type\"];\n    startArrowhead: Arrowhead | null;\n    endArrowhead: Arrowhead | null;\n    points?: ExcalidrawLinearElement[\"points\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawLinearElement> => {\n  return {\n    ..._newElementBase<ExcalidrawLinearElement>(opts.type, opts),\n    points: opts.points || [],\n    lastCommittedPoint: null,\n    startBinding: null,\n    endBinding: null,\n    startArrowhead: opts.startArrowhead,\n    endArrowhead: opts.endArrowhead,\n  };\n};\n\nexport const newImageElement = (\n  opts: {\n    type: ExcalidrawImageElement[\"type\"];\n    status?: ExcalidrawImageElement[\"status\"];\n    fileId?: ExcalidrawImageElement[\"fileId\"];\n    scale?: ExcalidrawImageElement[\"scale\"];\n  } & ElementConstructorOpts,\n): NonDeleted<ExcalidrawImageElement> => {\n  return {\n    ..._newElementBase<ExcalidrawImageElement>(\"image\", opts),\n    // in the future we'll support changing stroke color for some SVG elements,\n    // and `transparent` will likely mean \"use original colors of the image\"\n    strokeColor: \"transparent\",\n    status: opts.status ?? \"pending\",\n    fileId: opts.fileId ?? null,\n    scale: opts.scale ?? [1, 1],\n  };\n};\n\n// Simplified deep clone for the purpose of cloning ExcalidrawElement.\n//\n// Only clones plain objects and arrays. Doesn't clone Date, RegExp, Map, Set,\n// Typed arrays and other non-null objects.\n//\n// Adapted from https://github.com/lukeed/klona\n//\n// The reason for `deepCopyElement()` wrapper is type safety (only allow\n// passing ExcalidrawElement as the top-level argument).\nconst _deepCopyElement = (val: any, depth: number = 0) => {\n  // only clone non-primitives\n  if (val == null || typeof val !== \"object\") {\n    return val;\n  }\n\n  const objectType = Object.prototype.toString.call(val);\n\n  if (objectType === \"[object Object]\") {\n    const tmp =\n      typeof val.constructor === \"function\"\n        ? Object.create(Object.getPrototypeOf(val))\n        : {};\n    for (const key in val) {\n      if (val.hasOwnProperty(key)) {\n        // don't copy non-serializable objects like these caches. They'll be\n        // populated when the element is rendered.\n        if (depth === 0 && (key === \"shape\" || key === \"canvas\")) {\n          continue;\n        }\n        tmp[key] = _deepCopyElement(val[key], depth + 1);\n      }\n    }\n    return tmp;\n  }\n\n  if (Array.isArray(val)) {\n    let k = val.length;\n    const arr = new Array(k);\n    while (k--) {\n      arr[k] = _deepCopyElement(val[k], depth + 1);\n    }\n    return arr;\n  }\n\n  // we're not cloning non-array & non-plain-object objects because we\n  // don't support them on excalidraw elements yet. If we do, we need to make\n  // sure we start cloning them, so let's warn about it.\n  if (process.env.NODE_ENV === \"development\") {\n    if (\n      objectType !== \"[object Object]\" &&\n      objectType !== \"[object Array]\" &&\n      objectType.startsWith(\"[object \")\n    ) {\n      console.warn(\n        `_deepCloneElement: unexpected object type ${objectType}. This value will not be cloned!`,\n      );\n    }\n  }\n\n  return val;\n};\n\n/**\n * Clones ExcalidrawElement data structure. Does not regenerate id, nonce, or\n * any value. The purpose is to to break object references for immutability\n * reasons, whenever we want to keep the original element, but ensure it's not\n * mutated.\n *\n * Only clones plain objects and arrays. Doesn't clone Date, RegExp, Map, Set,\n * Typed arrays and other non-null objects.\n */\nexport const deepCopyElement = <T extends ExcalidrawElement>(\n  val: T,\n): Mutable<T> => {\n  return _deepCopyElement(val);\n};\n\n/**\n * utility wrapper to generate new id. In test env it reuses the old + postfix\n * for test assertions.\n */\nconst regenerateId = (\n  /** supply null if no previous id exists */\n  previousId: string | null,\n) => {\n  if (isTestEnv() && previousId) {\n    let nextId = `${previousId}_copy`;\n    // `window.h` may not be defined in some unit tests\n    if (\n      window.h?.app\n        ?.getSceneElementsIncludingDeleted()\n        .find((el) => el.id === nextId)\n    ) {\n      nextId += \"_copy\";\n    }\n    return nextId;\n  }\n  return randomId();\n};\n\n/**\n * Duplicate an element, often used in the alt-drag operation.\n * Note that this method has gotten a bit complicated since the\n * introduction of gruoping/ungrouping elements.\n * @param editingGroupId The current group being edited. The new\n *                       element will inherit this group and its\n *                       parents.\n * @param groupIdMapForOperation A Map that maps old group IDs to\n *                               duplicated ones. If you are duplicating\n *                               multiple elements at once, share this map\n *                               amongst all of them\n * @param element Element to duplicate\n * @param overrides Any element properties to override\n */\nexport const duplicateElement = <TElement extends ExcalidrawElement>(\n  editingGroupId: AppState[\"editingGroupId\"],\n  groupIdMapForOperation: Map<GroupId, GroupId>,\n  element: TElement,\n  overrides?: Partial<TElement>,\n): Readonly<TElement> => {\n  let copy = deepCopyElement(element);\n\n  copy.id = regenerateId(copy.id);\n  copy.boundElements = null;\n  copy.updated = getUpdatedTimestamp();\n  copy.seed = randomInteger();\n  copy.groupIds = getNewGroupIdsForDuplication(\n    copy.groupIds,\n    editingGroupId,\n    (groupId) => {\n      if (!groupIdMapForOperation.has(groupId)) {\n        groupIdMapForOperation.set(groupId, regenerateId(groupId));\n      }\n      return groupIdMapForOperation.get(groupId)!;\n    },\n  );\n  if (overrides) {\n    copy = Object.assign(copy, overrides);\n  }\n  return copy;\n};\n\n/**\n * Clones elements, regenerating their ids (including bindings) and group ids.\n *\n * If bindings don't exist in the elements array, they are removed. Therefore,\n * it's advised to supply the whole elements array, or sets of elements that\n * are encapsulated (such as library items), if the purpose is to retain\n * bindings to the cloned elements intact.\n *\n * NOTE by default does not randomize or regenerate anything except the id.\n */\nexport const duplicateElements = (\n  elements: readonly ExcalidrawElement[],\n  opts?: {\n    /** NOTE also updates version flags and `updated` */\n    randomizeSeed: boolean;\n  },\n) => {\n  const clonedElements: ExcalidrawElement[] = [];\n\n  const origElementsMap = arrayToMap(elements);\n\n  // used for for migrating old ids to new ids\n  const elementNewIdsMap = new Map<\n    /* orig */ ExcalidrawElement[\"id\"],\n    /* new */ ExcalidrawElement[\"id\"]\n  >();\n\n  const maybeGetNewId = (id: ExcalidrawElement[\"id\"]) => {\n    // if we've already migrated the element id, return the new one directly\n    if (elementNewIdsMap.has(id)) {\n      return elementNewIdsMap.get(id)!;\n    }\n    // if we haven't migrated the element id, but an old element with the same\n    // id exists, generate a new id for it and return it\n    if (origElementsMap.has(id)) {\n      const newId = regenerateId(id);\n      elementNewIdsMap.set(id, newId);\n      return newId;\n    }\n    // if old element doesn't exist, return null to mark it for removal\n    return null;\n  };\n\n  const groupNewIdsMap = new Map</* orig */ GroupId, /* new */ GroupId>();\n\n  for (const element of elements) {\n    const clonedElement: Mutable<ExcalidrawElement> = _deepCopyElement(element);\n\n    clonedElement.id = maybeGetNewId(element.id)!;\n\n    if (opts?.randomizeSeed) {\n      clonedElement.seed = randomInteger();\n      bumpVersion(clonedElement);\n    }\n\n    if (clonedElement.groupIds) {\n      clonedElement.groupIds = clonedElement.groupIds.map((groupId) => {\n        if (!groupNewIdsMap.has(groupId)) {\n          groupNewIdsMap.set(groupId, regenerateId(groupId));\n        }\n        return groupNewIdsMap.get(groupId)!;\n      });\n    }\n\n    if (\"containerId\" in clonedElement && clonedElement.containerId) {\n      const newContainerId = maybeGetNewId(clonedElement.containerId);\n      clonedElement.containerId = newContainerId;\n    }\n\n    if (\"boundElements\" in clonedElement && clonedElement.boundElements) {\n      clonedElement.boundElements = clonedElement.boundElements.reduce(\n        (\n          acc: Mutable<NonNullable<ExcalidrawElement[\"boundElements\"]>>,\n          binding,\n        ) => {\n          const newBindingId = maybeGetNewId(binding.id);\n          if (newBindingId) {\n            acc.push({ ...binding, id: newBindingId });\n          }\n          return acc;\n        },\n        [],\n      );\n    }\n\n    if (\"endBinding\" in clonedElement && clonedElement.endBinding) {\n      const newEndBindingId = maybeGetNewId(clonedElement.endBinding.elementId);\n      clonedElement.endBinding = newEndBindingId\n        ? {\n            ...clonedElement.endBinding,\n            elementId: newEndBindingId,\n          }\n        : null;\n    }\n    if (\"startBinding\" in clonedElement && clonedElement.startBinding) {\n      const newEndBindingId = maybeGetNewId(\n        clonedElement.startBinding.elementId,\n      );\n      clonedElement.startBinding = newEndBindingId\n        ? {\n            ...clonedElement.startBinding,\n            elementId: newEndBindingId,\n          }\n        : null;\n    }\n\n    if (clonedElement.frameId) {\n      clonedElement.frameId = maybeGetNewId(clonedElement.frameId);\n    }\n\n    clonedElements.push(clonedElement);\n  }\n\n  return clonedElements;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}