{"ast":null,"code":"import*as GA from\"./ga\";/**\n * A line is stored as an array `[0, c, a, b, 0, 0, 0, 0]` representing:\n *   c * e0 + a * e1 + b*e2\n *\n * This maps to a standard formula `a * x + b * y + c`.\n *\n * `(-b, a)` corresponds to a 2D vector parallel to the line. The lines\n * have a natural orientation, corresponding to that vector.\n *\n * The magnitude (\"norm\") of the line is `sqrt(a ^ 2 + b ^ 2)`.\n * `c / norm(line)` is the oriented distance from line to origin.\n */ // Returns line with direction (x, y) through origin\nexport var vector=function vector(x,y){return GA.normalized([0,0,-y,x,0,0,0,0]);};// For equation ax + by + c = 0.\nexport var equation=function equation(a,b,c){return GA.normalized([0,c,a,b,0,0,0,0]);};export var through=function through(from,to){return GA.normalized(GA.join(to,from));};export var orthogonal=function orthogonal(line,point){return GA.dot(line,point);};// Returns a line perpendicular to the line through `against` and `intersection`\n// going through `intersection`.\nexport var orthogonalThrough=function orthogonalThrough(against,intersection){return orthogonal(through(against,intersection),intersection);};export var parallel=function parallel(line,distance){var result=line.slice();result[1]-=distance;return result;};export var parallelThrough=function parallelThrough(line,point){return orthogonal(orthogonal(point,line),point);};export var distance=function distance(line1,line2){return GA.inorm(GA.meet(line1,line2));};export var angle=function angle(line1,line2){return Math.acos(GA.dot(line1,line2)[0]);};// The orientation of the line\nexport var sign=function sign(line){return Math.sign(line[1]);};","map":{"version":3,"names":["GA","vector","x","y","normalized","equation","a","b","c","through","from","to","join","orthogonal","line","point","dot","orthogonalThrough","against","intersection","parallel","distance","result","slice","parallelThrough","line1","line2","inorm","meet","angle","Math","acos","sign"],"sources":["D:/project/excalidraw-cn/src/galines.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Point } from \"./ga\";\n\n/**\n * A line is stored as an array `[0, c, a, b, 0, 0, 0, 0]` representing:\n *   c * e0 + a * e1 + b*e2\n *\n * This maps to a standard formula `a * x + b * y + c`.\n *\n * `(-b, a)` corresponds to a 2D vector parallel to the line. The lines\n * have a natural orientation, corresponding to that vector.\n *\n * The magnitude (\"norm\") of the line is `sqrt(a ^ 2 + b ^ 2)`.\n * `c / norm(line)` is the oriented distance from line to origin.\n */\n\n// Returns line with direction (x, y) through origin\nexport const vector = (x: number, y: number): Line =>\n  GA.normalized([0, 0, -y, x, 0, 0, 0, 0]);\n\n// For equation ax + by + c = 0.\nexport const equation = (a: number, b: number, c: number): Line =>\n  GA.normalized([0, c, a, b, 0, 0, 0, 0]);\n\nexport const through = (from: Point, to: Point): Line =>\n  GA.normalized(GA.join(to, from));\n\nexport const orthogonal = (line: Line, point: Point): Line =>\n  GA.dot(line, point);\n\n// Returns a line perpendicular to the line through `against` and `intersection`\n// going through `intersection`.\nexport const orthogonalThrough = (against: Point, intersection: Point): Line =>\n  orthogonal(through(against, intersection), intersection);\n\nexport const parallel = (line: Line, distance: number): Line => {\n  const result = line.slice();\n  result[1] -= distance;\n  return result as unknown as Line;\n};\n\nexport const parallelThrough = (line: Line, point: Point): Line =>\n  orthogonal(orthogonal(point, line), point);\n\nexport const distance = (line1: Line, line2: Line): number =>\n  GA.inorm(GA.meet(line1, line2));\n\nexport const angle = (line1: Line, line2: Line): number =>\n  Math.acos(GA.dot(line1, line2)[0]);\n\n// The orientation of the line\nexport const sign = (line: Line): number => Math.sign(line[1]);\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,EAAE,KAAM,MAAM,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXA,CAaA;AACA,MAAO,IAAM,CAAAC,MAAM,CAAG,QAAT,CAAAA,MAAMA,CAAIC,CAAS,CAAEC,CAAS,QACzC,CAAAH,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAACD,CAAC,CAAED,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,GAE1C;AACA,MAAO,IAAM,CAAAG,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,CAAS,CAAEC,CAAS,CAAEC,CAAS,QACtD,CAAAR,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC,CAAEI,CAAC,CAAEF,CAAC,CAAEC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CAAC,GAEzC,MAAO,IAAM,CAAAE,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,IAAW,CAAEC,EAAS,QAC5C,CAAAX,EAAE,CAACI,UAAU,CAACJ,EAAE,CAACY,IAAI,CAACD,EAAE,CAAED,IAAI,CAAC,CAAC,GAElC,MAAO,IAAM,CAAAG,UAAU,CAAG,QAAb,CAAAA,UAAUA,CAAIC,IAAU,CAAEC,KAAY,QACjD,CAAAf,EAAE,CAACgB,GAAG,CAACF,IAAI,CAAEC,KAAK,CAAC,GAErB;AACA;AACA,MAAO,IAAM,CAAAE,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAIC,OAAc,CAAEC,YAAmB,QACnE,CAAAN,UAAU,CAACJ,OAAO,CAACS,OAAO,CAAEC,YAAY,CAAC,CAAEA,YAAY,CAAC,GAE1D,MAAO,IAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIN,IAAU,CAAEO,QAAgB,CAAW,CAC9D,GAAM,CAAAC,MAAM,CAAGR,IAAI,CAACS,KAAK,EAAE,CAC3BD,MAAM,CAAC,CAAC,CAAC,EAAID,QAAQ,CACrB,MAAO,CAAAC,MAAM,CACf,CAAC,CAED,MAAO,IAAM,CAAAE,eAAe,CAAG,QAAlB,CAAAA,eAAeA,CAAIV,IAAU,CAAEC,KAAY,QACtD,CAAAF,UAAU,CAACA,UAAU,CAACE,KAAK,CAAED,IAAI,CAAC,CAAEC,KAAK,CAAC,GAE5C,MAAO,IAAM,CAAAM,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAII,KAAW,CAAEC,KAAW,QAC/C,CAAA1B,EAAE,CAAC2B,KAAK,CAAC3B,EAAE,CAAC4B,IAAI,CAACH,KAAK,CAAEC,KAAK,CAAC,CAAC,GAEjC,MAAO,IAAM,CAAAG,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAAIJ,KAAW,CAAEC,KAAW,QAC5C,CAAAI,IAAI,CAACC,IAAI,CAAC/B,EAAE,CAACgB,GAAG,CAACS,KAAK,CAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAEpC;AACA,MAAO,IAAM,CAAAM,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAIlB,IAAU,QAAa,CAAAgB,IAAI,CAACE,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}