{"ast":null,"code":"import { getNonDeletedElements } from \"../element\";\nimport { removeAllElementsFromFrame } from \"../frame\";\nimport { getFrameElements } from \"../frame\";\nimport { KEYS } from \"../keys\";\nimport { setCursorForShape, updateActiveTool } from \"../utils\";\nimport { register } from \"./register\";\nconst isSingleFrameSelected = (appState, app) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  return selectedElements.length === 1 && selectedElements[0].type === \"frame\";\n};\nexport const actionSelectAllElementsInFrame = register({\n  name: \"selectAllElementsInFrame\",\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedFrame = app.scene.getSelectedElements(appState)[0];\n    if (selectedFrame && selectedFrame.type === \"frame\") {\n      const elementsInFrame = getFrameElements(getNonDeletedElements(elements), selectedFrame.id).filter(element => !(element.type === \"text\" && element.containerId));\n      return {\n        elements,\n        appState: {\n          ...appState,\n          selectedElementIds: elementsInFrame.reduce((acc, element) => {\n            acc[element.id] = true;\n            return acc;\n          }, {})\n        },\n        commitToHistory: false\n      };\n    }\n    return {\n      elements,\n      appState,\n      commitToHistory: false\n    };\n  },\n  contextItemLabel: \"labels.selectAllElementsInFrame\",\n  predicate: (elements, appState, _, app) => isSingleFrameSelected(appState, app)\n});\nexport const actionRemoveAllElementsFromFrame = register({\n  name: \"removeAllElementsFromFrame\",\n  trackEvent: {\n    category: \"history\"\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedFrame = app.scene.getSelectedElements(appState)[0];\n    if (selectedFrame && selectedFrame.type === \"frame\") {\n      return {\n        elements: removeAllElementsFromFrame(elements, selectedFrame, appState),\n        appState: {\n          ...appState,\n          selectedElementIds: {\n            [selectedFrame.id]: true\n          }\n        },\n        commitToHistory: true\n      };\n    }\n    return {\n      elements,\n      appState,\n      commitToHistory: false\n    };\n  },\n  contextItemLabel: \"labels.removeAllElementsFromFrame\",\n  predicate: (elements, appState, _, app) => isSingleFrameSelected(appState, app)\n});\nexport const actionupdateFrameRendering = register({\n  name: \"updateFrameRendering\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState) => {\n    return {\n      elements,\n      appState: {\n        ...appState,\n        frameRendering: {\n          ...appState.frameRendering,\n          enabled: !appState.frameRendering.enabled\n        }\n      },\n      commitToHistory: false\n    };\n  },\n  contextItemLabel: \"labels.updateFrameRendering\",\n  checked: appState => appState.frameRendering.enabled\n});\nexport const actionSetFrameAsActiveTool = register({\n  name: \"setFrameAsActiveTool\",\n  trackEvent: {\n    category: \"toolbar\"\n  },\n  perform: (elements, appState, _, app) => {\n    const nextActiveTool = updateActiveTool(appState, {\n      type: \"frame\"\n    });\n    setCursorForShape(app.canvas, {\n      ...appState,\n      activeTool: nextActiveTool\n    });\n    return {\n      elements,\n      appState: {\n        ...appState,\n        activeTool: updateActiveTool(appState, {\n          type: \"frame\"\n        })\n      },\n      commitToHistory: false\n    };\n  },\n  keyTest: event => !event[KEYS.CTRL_OR_CMD] && !event.shiftKey && !event.altKey && event.key.toLocaleLowerCase() === KEYS.F\n});","map":{"version":3,"names":["getNonDeletedElements","removeAllElementsFromFrame","getFrameElements","KEYS","setCursorForShape","updateActiveTool","register","isSingleFrameSelected","appState","app","selectedElements","scene","getSelectedElements","length","type","actionSelectAllElementsInFrame","name","trackEvent","category","perform","elements","_","selectedFrame","elementsInFrame","id","filter","element","containerId","selectedElementIds","reduce","acc","commitToHistory","contextItemLabel","predicate","actionRemoveAllElementsFromFrame","actionupdateFrameRendering","viewMode","frameRendering","enabled","checked","actionSetFrameAsActiveTool","nextActiveTool","canvas","activeTool","keyTest","event","CTRL_OR_CMD","shiftKey","altKey","key","toLocaleLowerCase","F"],"sources":["D:/project/excalidraw-cn/src/actions/actionFrame.ts"],"sourcesContent":["import { getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { removeAllElementsFromFrame } from \"../frame\";\nimport { getFrameElements } from \"../frame\";\nimport { KEYS } from \"../keys\";\nimport { AppClassProperties, AppState } from \"../types\";\nimport { setCursorForShape, updateActiveTool } from \"../utils\";\nimport { register } from \"./register\";\n\nconst isSingleFrameSelected = (appState: AppState, app: AppClassProperties) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n\n  return selectedElements.length === 1 && selectedElements[0].type === \"frame\";\n};\n\nexport const actionSelectAllElementsInFrame = register({\n  name: \"selectAllElementsInFrame\",\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedFrame = app.scene.getSelectedElements(appState)[0];\n\n    if (selectedFrame && selectedFrame.type === \"frame\") {\n      const elementsInFrame = getFrameElements(\n        getNonDeletedElements(elements),\n        selectedFrame.id,\n      ).filter((element) => !(element.type === \"text\" && element.containerId));\n\n      return {\n        elements,\n        appState: {\n          ...appState,\n          selectedElementIds: elementsInFrame.reduce((acc, element) => {\n            acc[element.id] = true;\n            return acc;\n          }, {} as Record<ExcalidrawElement[\"id\"], true>),\n        },\n        commitToHistory: false,\n      };\n    }\n\n    return {\n      elements,\n      appState,\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.selectAllElementsInFrame\",\n  predicate: (elements, appState, _, app) =>\n    isSingleFrameSelected(appState, app),\n});\n\nexport const actionRemoveAllElementsFromFrame = register({\n  name: \"removeAllElementsFromFrame\",\n  trackEvent: { category: \"history\" },\n  perform: (elements, appState, _, app) => {\n    const selectedFrame = app.scene.getSelectedElements(appState)[0];\n\n    if (selectedFrame && selectedFrame.type === \"frame\") {\n      return {\n        elements: removeAllElementsFromFrame(elements, selectedFrame, appState),\n        appState: {\n          ...appState,\n          selectedElementIds: {\n            [selectedFrame.id]: true,\n          },\n        },\n        commitToHistory: true,\n      };\n    }\n\n    return {\n      elements,\n      appState,\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.removeAllElementsFromFrame\",\n  predicate: (elements, appState, _, app) =>\n    isSingleFrameSelected(appState, app),\n});\n\nexport const actionupdateFrameRendering = register({\n  name: \"updateFrameRendering\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState) => {\n    return {\n      elements,\n      appState: {\n        ...appState,\n        frameRendering: {\n          ...appState.frameRendering,\n          enabled: !appState.frameRendering.enabled,\n        },\n      },\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.updateFrameRendering\",\n  checked: (appState: AppState) => appState.frameRendering.enabled,\n});\n\nexport const actionSetFrameAsActiveTool = register({\n  name: \"setFrameAsActiveTool\",\n  trackEvent: { category: \"toolbar\" },\n  perform: (elements, appState, _, app) => {\n    const nextActiveTool = updateActiveTool(appState, {\n      type: \"frame\",\n    });\n\n    setCursorForShape(app.canvas, {\n      ...appState,\n      activeTool: nextActiveTool,\n    });\n\n    return {\n      elements,\n      appState: {\n        ...appState,\n        activeTool: updateActiveTool(appState, {\n          type: \"frame\",\n        }),\n      },\n      commitToHistory: false,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] &&\n    !event.shiftKey &&\n    !event.altKey &&\n    event.key.toLocaleLowerCase() === KEYS.F,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}