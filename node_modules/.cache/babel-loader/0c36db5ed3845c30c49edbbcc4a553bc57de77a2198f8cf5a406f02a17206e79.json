{"ast":null,"code":"import _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nexport function rotatePoints(points, center, degrees) {\n  if (points && points.length) {\n    var _center = _slicedToArray(center, 2),\n      cx = _center[0],\n      cy = _center[1];\n    var angle = Math.PI / 180 * degrees;\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    points.forEach(function (p) {\n      var _p = _slicedToArray(p, 2),\n        x = _p[0],\n        y = _p[1];\n      p[0] = (x - cx) * cos - (y - cy) * sin + cx;\n      p[1] = (x - cx) * sin + (y - cy) * cos + cy;\n    });\n  }\n}\nexport function rotateLines(lines, center, degrees) {\n  var points = [];\n  lines.forEach(function (line) {\n    return points.push.apply(points, _toConsumableArray(line));\n  });\n  rotatePoints(points, center, degrees);\n}\nexport function lineLength(line) {\n  var p1 = line[0];\n  var p2 = line[1];\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}","map":{"version":3,"names":["rotatePoints","points","center","degrees","length","_center","_slicedToArray","cx","cy","angle","Math","PI","cos","sin","forEach","p","_p","x","y","rotateLines","lines","line","push","apply","_toConsumableArray","lineLength","p1","p2","sqrt","pow"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/geometry.js"],"sourcesContent":["export function rotatePoints(points, center, degrees) {\n    if (points && points.length) {\n        const [cx, cy] = center;\n        const angle = (Math.PI / 180) * degrees;\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        points.forEach((p) => {\n            const [x, y] = p;\n            p[0] = ((x - cx) * cos) - ((y - cy) * sin) + cx;\n            p[1] = ((x - cx) * sin) + ((y - cy) * cos) + cy;\n        });\n    }\n}\nexport function rotateLines(lines, center, degrees) {\n    const points = [];\n    lines.forEach((line) => points.push(...line));\n    rotatePoints(points, center, degrees);\n}\nexport function lineLength(line) {\n    const p1 = line[0];\n    const p2 = line[1];\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n"],"mappings":";;AAAA,OAAO,SAASA,YAAYA,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAE;EAClD,IAAIF,MAAM,IAAIA,MAAM,CAACG,MAAM,EAAE;IACzB,IAAAC,OAAA,GAAAC,cAAA,CAAiBJ,MAAM;MAAhBK,EAAE,GAAAF,OAAA;MAAEG,EAAE,GAAAH,OAAA;IACb,IAAMI,KAAK,GAAIC,IAAI,CAACC,EAAE,GAAG,GAAG,GAAIR,OAAO;IACvC,IAAMS,GAAG,GAAGF,IAAI,CAACE,GAAG,CAACH,KAAK,CAAC;IAC3B,IAAMI,GAAG,GAAGH,IAAI,CAACG,GAAG,CAACJ,KAAK,CAAC;IAC3BR,MAAM,CAACa,OAAO,CAAC,UAACC,CAAC,EAAK;MAClB,IAAAC,EAAA,GAAAV,cAAA,CAAeS,CAAC;QAATE,CAAC,GAAAD,EAAA;QAAEE,CAAC,GAAAF,EAAA;MACXD,CAAC,CAAC,CAAC,CAAC,GAAI,CAACE,CAAC,GAAGV,EAAE,IAAIK,GAAG,GAAK,CAACM,CAAC,GAAGV,EAAE,IAAIK,GAAI,GAAGN,EAAE;MAC/CQ,CAAC,CAAC,CAAC,CAAC,GAAI,CAACE,CAAC,GAAGV,EAAE,IAAIM,GAAG,GAAK,CAACK,CAAC,GAAGV,EAAE,IAAII,GAAI,GAAGJ,EAAE;IACnD,CAAC,CAAC;EACN;AACJ;AACA,OAAO,SAASW,WAAWA,CAACC,KAAK,EAAElB,MAAM,EAAEC,OAAO,EAAE;EAChD,IAAMF,MAAM,GAAG,EAAE;EACjBmB,KAAK,CAACN,OAAO,CAAC,UAACO,IAAI;IAAA,OAAKpB,MAAM,CAACqB,IAAI,CAAAC,KAAA,CAAXtB,MAAM,EAAAuB,kBAAA,CAASH,IAAI,EAAC;EAAA,EAAC;EAC7CrB,YAAY,CAACC,MAAM,EAAEC,MAAM,EAAEC,OAAO,CAAC;AACzC;AACA,OAAO,SAASsB,UAAUA,CAACJ,IAAI,EAAE;EAC7B,IAAMK,EAAE,GAAGL,IAAI,CAAC,CAAC,CAAC;EAClB,IAAMM,EAAE,GAAGN,IAAI,CAAC,CAAC,CAAC;EAClB,OAAOX,IAAI,CAACkB,IAAI,CAAClB,IAAI,CAACmB,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGjB,IAAI,CAACmB,GAAG,CAACH,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7E"},"metadata":{},"sourceType":"module","externalDependencies":[]}