{"ast":null,"code":"import { RoughGenerator } from './generator';\nexport class RoughCanvas {\n  constructor(canvas, config) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.gen = new RoughGenerator(config);\n  }\n  draw(drawable) {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.getDefaultOptions();\n    const ctx = this.ctx;\n    const precision = drawable.options.fixedDecimalPlaceDigits;\n    for (const drawing of sets) {\n      switch (drawing.type) {\n        case 'path':\n          ctx.save();\n          ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n          ctx.lineWidth = o.strokeWidth;\n          if (o.strokeLineDash) {\n            ctx.setLineDash(o.strokeLineDash);\n          }\n          if (o.strokeLineDashOffset) {\n            ctx.lineDashOffset = o.strokeLineDashOffset;\n          }\n          this._drawToContext(ctx, drawing, precision);\n          ctx.restore();\n          break;\n        case 'fillPath':\n          {\n            ctx.save();\n            ctx.fillStyle = o.fill || '';\n            const fillRule = drawable.shape === 'curve' || drawable.shape === 'polygon' || drawable.shape === 'path' ? 'evenodd' : 'nonzero';\n            this._drawToContext(ctx, drawing, precision, fillRule);\n            ctx.restore();\n            break;\n          }\n        case 'fillSketch':\n          this.fillSketch(ctx, drawing, o);\n          break;\n      }\n    }\n  }\n  fillSketch(ctx, drawing, o) {\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    ctx.save();\n    if (o.fillLineDash) {\n      ctx.setLineDash(o.fillLineDash);\n    }\n    if (o.fillLineDashOffset) {\n      ctx.lineDashOffset = o.fillLineDashOffset;\n    }\n    ctx.strokeStyle = o.fill || '';\n    ctx.lineWidth = fweight;\n    this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n    ctx.restore();\n  }\n  _drawToContext(ctx, drawing, fixedDecimals) {\n    let rule = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'nonzero';\n    ctx.beginPath();\n    for (const item of drawing.ops) {\n      const data = typeof fixedDecimals === 'number' && fixedDecimals >= 0 ? item.data.map(d => +d.toFixed(fixedDecimals)) : item.data;\n      switch (item.op) {\n        case 'move':\n          ctx.moveTo(data[0], data[1]);\n          break;\n        case 'bcurveTo':\n          ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n          break;\n        case 'lineTo':\n          ctx.lineTo(data[0], data[1]);\n          break;\n      }\n    }\n    if (drawing.type === 'fillPath') {\n      ctx.fill(rule);\n    } else {\n      ctx.stroke();\n    }\n  }\n  get generator() {\n    return this.gen;\n  }\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n  line(x1, y1, x2, y2, options) {\n    const d = this.gen.line(x1, y1, x2, y2, options);\n    this.draw(d);\n    return d;\n  }\n  rectangle(x, y, width, height, options) {\n    const d = this.gen.rectangle(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n  ellipse(x, y, width, height, options) {\n    const d = this.gen.ellipse(x, y, width, height, options);\n    this.draw(d);\n    return d;\n  }\n  circle(x, y, diameter, options) {\n    const d = this.gen.circle(x, y, diameter, options);\n    this.draw(d);\n    return d;\n  }\n  linearPath(points, options) {\n    const d = this.gen.linearPath(points, options);\n    this.draw(d);\n    return d;\n  }\n  polygon(points, options) {\n    const d = this.gen.polygon(points, options);\n    this.draw(d);\n    return d;\n  }\n  arc(x, y, width, height, start, stop) {\n    let closed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let options = arguments.length > 7 ? arguments[7] : undefined;\n    const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    this.draw(d);\n    return d;\n  }\n  curve(points, options) {\n    const d = this.gen.curve(points, options);\n    this.draw(d);\n    return d;\n  }\n  path(d, options) {\n    const drawing = this.gen.path(d, options);\n    this.draw(drawing);\n    return drawing;\n  }\n}","map":{"version":3,"names":["RoughGenerator","RoughCanvas","constructor","canvas","config","ctx","getContext","gen","draw","drawable","sets","o","options","getDefaultOptions","precision","fixedDecimalPlaceDigits","drawing","type","save","strokeStyle","stroke","lineWidth","strokeWidth","strokeLineDash","setLineDash","strokeLineDashOffset","lineDashOffset","_drawToContext","restore","fillStyle","fill","fillRule","shape","fillSketch","fweight","fillWeight","fillLineDash","fillLineDashOffset","fixedDecimals","rule","arguments","length","undefined","beginPath","item","ops","data","map","d","toFixed","op","moveTo","bezierCurveTo","lineTo","generator","defaultOptions","line","x1","y1","x2","y2","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","curve","path"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/canvas.js"],"sourcesContent":["import { RoughGenerator } from './generator';\nexport class RoughCanvas {\n    constructor(canvas, config) {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext('2d');\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const ctx = this.ctx;\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            switch (drawing.type) {\n                case 'path':\n                    ctx.save();\n                    ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n                    ctx.lineWidth = o.strokeWidth;\n                    if (o.strokeLineDash) {\n                        ctx.setLineDash(o.strokeLineDash);\n                    }\n                    if (o.strokeLineDashOffset) {\n                        ctx.lineDashOffset = o.strokeLineDashOffset;\n                    }\n                    this._drawToContext(ctx, drawing, precision);\n                    ctx.restore();\n                    break;\n                case 'fillPath': {\n                    ctx.save();\n                    ctx.fillStyle = o.fill || '';\n                    const fillRule = (drawable.shape === 'curve' || drawable.shape === 'polygon' || drawable.shape === 'path') ? 'evenodd' : 'nonzero';\n                    this._drawToContext(ctx, drawing, precision, fillRule);\n                    ctx.restore();\n                    break;\n                }\n                case 'fillSketch':\n                    this.fillSketch(ctx, drawing, o);\n                    break;\n            }\n        }\n    }\n    fillSketch(ctx, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        ctx.save();\n        if (o.fillLineDash) {\n            ctx.setLineDash(o.fillLineDash);\n        }\n        if (o.fillLineDashOffset) {\n            ctx.lineDashOffset = o.fillLineDashOffset;\n        }\n        ctx.strokeStyle = o.fill || '';\n        ctx.lineWidth = fweight;\n        this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n        ctx.restore();\n    }\n    _drawToContext(ctx, drawing, fixedDecimals, rule = 'nonzero') {\n        ctx.beginPath();\n        for (const item of drawing.ops) {\n            const data = ((typeof fixedDecimals === 'number') && fixedDecimals >= 0) ? (item.data.map((d) => +d.toFixed(fixedDecimals))) : item.data;\n            switch (item.op) {\n                case 'move':\n                    ctx.moveTo(data[0], data[1]);\n                    break;\n                case 'bcurveTo':\n                    ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n                    break;\n                case 'lineTo':\n                    ctx.lineTo(data[0], data[1]);\n                    break;\n            }\n        }\n        if (drawing.type === 'fillPath') {\n            ctx.fill(rule);\n        }\n        else {\n            ctx.stroke();\n        }\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        this.draw(d);\n        return d;\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        this.draw(d);\n        return d;\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        this.draw(d);\n        return d;\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        this.draw(d);\n        return d;\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        this.draw(d);\n        return d;\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        this.draw(d);\n        return d;\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        this.draw(drawing);\n        return drawing;\n    }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,aAAa;AAC5C,OAAO,MAAMC,WAAW,CAAC;EACrBC,WAAWA,CAACC,MAAM,EAAEC,MAAM,EAAE;IACxB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,GAAG,GAAG,IAAI,CAACF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IACvC,IAAI,CAACC,GAAG,GAAG,IAAIP,cAAc,CAACI,MAAM,CAAC;EACzC;EACAI,IAAIA,CAACC,QAAQ,EAAE;IACX,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,IAAI,EAAE;IAChC,MAAMC,CAAC,GAAGF,QAAQ,CAACG,OAAO,IAAI,IAAI,CAACC,iBAAiB,EAAE;IACtD,MAAMR,GAAG,GAAG,IAAI,CAACA,GAAG;IACpB,MAAMS,SAAS,GAAGL,QAAQ,CAACG,OAAO,CAACG,uBAAuB;IAC1D,KAAK,MAAMC,OAAO,IAAIN,IAAI,EAAE;MACxB,QAAQM,OAAO,CAACC,IAAI;QAChB,KAAK,MAAM;UACPZ,GAAG,CAACa,IAAI,EAAE;UACVb,GAAG,CAACc,WAAW,GAAGR,CAAC,CAACS,MAAM,KAAK,MAAM,GAAG,aAAa,GAAGT,CAAC,CAACS,MAAM;UAChEf,GAAG,CAACgB,SAAS,GAAGV,CAAC,CAACW,WAAW;UAC7B,IAAIX,CAAC,CAACY,cAAc,EAAE;YAClBlB,GAAG,CAACmB,WAAW,CAACb,CAAC,CAACY,cAAc,CAAC;UACrC;UACA,IAAIZ,CAAC,CAACc,oBAAoB,EAAE;YACxBpB,GAAG,CAACqB,cAAc,GAAGf,CAAC,CAACc,oBAAoB;UAC/C;UACA,IAAI,CAACE,cAAc,CAACtB,GAAG,EAAEW,OAAO,EAAEF,SAAS,CAAC;UAC5CT,GAAG,CAACuB,OAAO,EAAE;UACb;QACJ,KAAK,UAAU;UAAE;YACbvB,GAAG,CAACa,IAAI,EAAE;YACVb,GAAG,CAACwB,SAAS,GAAGlB,CAAC,CAACmB,IAAI,IAAI,EAAE;YAC5B,MAAMC,QAAQ,GAAItB,QAAQ,CAACuB,KAAK,KAAK,OAAO,IAAIvB,QAAQ,CAACuB,KAAK,KAAK,SAAS,IAAIvB,QAAQ,CAACuB,KAAK,KAAK,MAAM,GAAI,SAAS,GAAG,SAAS;YAClI,IAAI,CAACL,cAAc,CAACtB,GAAG,EAAEW,OAAO,EAAEF,SAAS,EAAEiB,QAAQ,CAAC;YACtD1B,GAAG,CAACuB,OAAO,EAAE;YACb;UACJ;QACA,KAAK,YAAY;UACb,IAAI,CAACK,UAAU,CAAC5B,GAAG,EAAEW,OAAO,EAAEL,CAAC,CAAC;UAChC;MAAM;IAElB;EACJ;EACAsB,UAAUA,CAAC5B,GAAG,EAAEW,OAAO,EAAEL,CAAC,EAAE;IACxB,IAAIuB,OAAO,GAAGvB,CAAC,CAACwB,UAAU;IAC1B,IAAID,OAAO,GAAG,CAAC,EAAE;MACbA,OAAO,GAAGvB,CAAC,CAACW,WAAW,GAAG,CAAC;IAC/B;IACAjB,GAAG,CAACa,IAAI,EAAE;IACV,IAAIP,CAAC,CAACyB,YAAY,EAAE;MAChB/B,GAAG,CAACmB,WAAW,CAACb,CAAC,CAACyB,YAAY,CAAC;IACnC;IACA,IAAIzB,CAAC,CAAC0B,kBAAkB,EAAE;MACtBhC,GAAG,CAACqB,cAAc,GAAGf,CAAC,CAAC0B,kBAAkB;IAC7C;IACAhC,GAAG,CAACc,WAAW,GAAGR,CAAC,CAACmB,IAAI,IAAI,EAAE;IAC9BzB,GAAG,CAACgB,SAAS,GAAGa,OAAO;IACvB,IAAI,CAACP,cAAc,CAACtB,GAAG,EAAEW,OAAO,EAAEL,CAAC,CAACI,uBAAuB,CAAC;IAC5DV,GAAG,CAACuB,OAAO,EAAE;EACjB;EACAD,cAAcA,CAACtB,GAAG,EAAEW,OAAO,EAAEsB,aAAa,EAAoB;IAAA,IAAlBC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,SAAS;IACxDnC,GAAG,CAACsC,SAAS,EAAE;IACf,KAAK,MAAMC,IAAI,IAAI5B,OAAO,CAAC6B,GAAG,EAAE;MAC5B,MAAMC,IAAI,GAAK,OAAOR,aAAa,KAAK,QAAQ,IAAKA,aAAa,IAAI,CAAC,GAAKM,IAAI,CAACE,IAAI,CAACC,GAAG,CAAEC,CAAC,IAAK,CAACA,CAAC,CAACC,OAAO,CAACX,aAAa,CAAC,CAAC,GAAIM,IAAI,CAACE,IAAI;MACxI,QAAQF,IAAI,CAACM,EAAE;QACX,KAAK,MAAM;UACP7C,GAAG,CAAC8C,MAAM,CAACL,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5B;QACJ,KAAK,UAAU;UACXzC,GAAG,CAAC+C,aAAa,CAACN,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;UACvE;QACJ,KAAK,QAAQ;UACTzC,GAAG,CAACgD,MAAM,CAACP,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5B;MAAM;IAElB;IACA,IAAI9B,OAAO,CAACC,IAAI,KAAK,UAAU,EAAE;MAC7BZ,GAAG,CAACyB,IAAI,CAACS,IAAI,CAAC;IAClB,CAAC,MACI;MACDlC,GAAG,CAACe,MAAM,EAAE;IAChB;EACJ;EACA,IAAIkC,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC/C,GAAG;EACnB;EACAM,iBAAiBA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACN,GAAG,CAACgD,cAAc;EAClC;EACAC,IAAIA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEhD,OAAO,EAAE;IAC1B,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAACiD,IAAI,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEhD,OAAO,CAAC;IAChD,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAa,SAASA,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAErD,OAAO,EAAE;IACpC,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAACsD,SAAS,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAErD,OAAO,CAAC;IAC1D,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAkB,OAAOA,CAACJ,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAErD,OAAO,EAAE;IAClC,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAAC2D,OAAO,CAACJ,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAErD,OAAO,CAAC;IACxD,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAmB,MAAMA,CAACL,CAAC,EAAEC,CAAC,EAAEK,QAAQ,EAAExD,OAAO,EAAE;IAC5B,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAAC4D,MAAM,CAACL,CAAC,EAAEC,CAAC,EAAEK,QAAQ,EAAExD,OAAO,CAAC;IAClD,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAqB,UAAUA,CAACC,MAAM,EAAE1D,OAAO,EAAE;IACxB,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAAC8D,UAAU,CAACC,MAAM,EAAE1D,OAAO,CAAC;IAC9C,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAuB,OAAOA,CAACD,MAAM,EAAE1D,OAAO,EAAE;IACrB,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAACgE,OAAO,CAACD,MAAM,EAAE1D,OAAO,CAAC;IAC3C,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACAwB,GAAGA,CAACV,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEQ,KAAK,EAAEC,IAAI,EAA2B;IAAA,IAAzBC,MAAM,GAAAnC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IAAA,IAAE5B,OAAO,GAAA4B,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IACzD,MAAMM,CAAC,GAAG,IAAI,CAACzC,GAAG,CAACiE,GAAG,CAACV,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,MAAM,EAAEQ,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAE/D,OAAO,CAAC;IACzE,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACA4B,KAAKA,CAACN,MAAM,EAAE1D,OAAO,EAAE;IACnB,MAAMoC,CAAC,GAAG,IAAI,CAACzC,GAAG,CAACqE,KAAK,CAACN,MAAM,EAAE1D,OAAO,CAAC;IACzC,IAAI,CAACJ,IAAI,CAACwC,CAAC,CAAC;IACZ,OAAOA,CAAC;EACZ;EACA6B,IAAIA,CAAC7B,CAAC,EAAEpC,OAAO,EAAE;IACb,MAAMI,OAAO,GAAG,IAAI,CAACT,GAAG,CAACsE,IAAI,CAAC7B,CAAC,EAAEpC,OAAO,CAAC;IACzC,IAAI,CAACJ,IAAI,CAACQ,OAAO,CAAC;IAClB,OAAOA,OAAO;EAClB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}