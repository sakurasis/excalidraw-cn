{"ast":null,"code":"import _slicedToArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n  var cx = 0,\n    cy = 0;\n  var subx = 0,\n    suby = 0;\n  var out = [];\n  var _iterator = _createForOfIteratorHelper(segments),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n        key = _step$value.key,\n        data = _step$value.data;\n      switch (key) {\n        case 'M':\n          out.push({\n            key: 'M',\n            data: _toConsumableArray(data)\n          });\n          var _data = _slicedToArray(data, 2);\n          cx = _data[0];\n          cy = _data[1];\n          var _data2 = _slicedToArray(data, 2);\n          subx = _data2[0];\n          suby = _data2[1];\n          break;\n        case 'm':\n          cx += data[0];\n          cy += data[1];\n          out.push({\n            key: 'M',\n            data: [cx, cy]\n          });\n          subx = cx;\n          suby = cy;\n          break;\n        case 'L':\n          out.push({\n            key: 'L',\n            data: _toConsumableArray(data)\n          });\n          var _data3 = _slicedToArray(data, 2);\n          cx = _data3[0];\n          cy = _data3[1];\n          break;\n        case 'l':\n          cx += data[0];\n          cy += data[1];\n          out.push({\n            key: 'L',\n            data: [cx, cy]\n          });\n          break;\n        case 'C':\n          out.push({\n            key: 'C',\n            data: _toConsumableArray(data)\n          });\n          cx = data[4];\n          cy = data[5];\n          break;\n        case 'c':\n          {\n            var newdata = data.map(function (d, i) {\n              return i % 2 ? d + cy : d + cx;\n            });\n            out.push({\n              key: 'C',\n              data: newdata\n            });\n            cx = newdata[4];\n            cy = newdata[5];\n            break;\n          }\n        case 'Q':\n          out.push({\n            key: 'Q',\n            data: _toConsumableArray(data)\n          });\n          cx = data[2];\n          cy = data[3];\n          break;\n        case 'q':\n          {\n            var _newdata = data.map(function (d, i) {\n              return i % 2 ? d + cy : d + cx;\n            });\n            out.push({\n              key: 'Q',\n              data: _newdata\n            });\n            cx = _newdata[2];\n            cy = _newdata[3];\n            break;\n          }\n        case 'A':\n          out.push({\n            key: 'A',\n            data: _toConsumableArray(data)\n          });\n          cx = data[5];\n          cy = data[6];\n          break;\n        case 'a':\n          cx += data[5];\n          cy += data[6];\n          out.push({\n            key: 'A',\n            data: [data[0], data[1], data[2], data[3], data[4], cx, cy]\n          });\n          break;\n        case 'H':\n          out.push({\n            key: 'H',\n            data: _toConsumableArray(data)\n          });\n          cx = data[0];\n          break;\n        case 'h':\n          cx += data[0];\n          out.push({\n            key: 'H',\n            data: [cx]\n          });\n          break;\n        case 'V':\n          out.push({\n            key: 'V',\n            data: _toConsumableArray(data)\n          });\n          cy = data[0];\n          break;\n        case 'v':\n          cy += data[0];\n          out.push({\n            key: 'V',\n            data: [cy]\n          });\n          break;\n        case 'S':\n          out.push({\n            key: 'S',\n            data: _toConsumableArray(data)\n          });\n          cx = data[2];\n          cy = data[3];\n          break;\n        case 's':\n          {\n            var _newdata2 = data.map(function (d, i) {\n              return i % 2 ? d + cy : d + cx;\n            });\n            out.push({\n              key: 'S',\n              data: _newdata2\n            });\n            cx = _newdata2[2];\n            cy = _newdata2[3];\n            break;\n          }\n        case 'T':\n          out.push({\n            key: 'T',\n            data: _toConsumableArray(data)\n          });\n          cx = data[0];\n          cy = data[1];\n          break;\n        case 't':\n          cx += data[0];\n          cy += data[1];\n          out.push({\n            key: 'T',\n            data: [cx, cy]\n          });\n          break;\n        case 'Z':\n        case 'z':\n          out.push({\n            key: 'Z',\n            data: []\n          });\n          cx = subx;\n          cy = suby;\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return out;\n}","map":{"version":3,"names":["absolutize","segments","cx","cy","subx","suby","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","value","key","data","push","_toConsumableArray","_data","_slicedToArray","_data2","_data3","newdata","map","d","i","err","e","f"],"sources":["D:/project/excalidraw-cn/node_modules/path-data-parser/lib/absolutize.js"],"sourcesContent":["// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    const out = [];\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'm':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'M', data: [cx, cy] });\n                subx = cx;\n                suby = cy;\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'l':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                break;\n            case 'c': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'C', data: newdata });\n                cx = newdata[4];\n                cy = newdata[5];\n                break;\n            }\n            case 'Q':\n                out.push({ key: 'Q', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 'q': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'Q', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'A':\n                out.push({ key: 'A', data: [...data] });\n                cx = data[5];\n                cy = data[6];\n                break;\n            case 'a':\n                cx += data[5];\n                cy += data[6];\n                out.push({ key: 'A', data: [data[0], data[1], data[2], data[3], data[4], cx, cy] });\n                break;\n            case 'H':\n                out.push({ key: 'H', data: [...data] });\n                cx = data[0];\n                break;\n            case 'h':\n                cx += data[0];\n                out.push({ key: 'H', data: [cx] });\n                break;\n            case 'V':\n                out.push({ key: 'V', data: [...data] });\n                cy = data[0];\n                break;\n            case 'v':\n                cy += data[0];\n                out.push({ key: 'V', data: [cy] });\n                break;\n            case 'S':\n                out.push({ key: 'S', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 's': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'S', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'T':\n                out.push({ key: 'T', data: [...data] });\n                cx = data[0];\n                cy = data[1];\n                break;\n            case 't':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'T', data: [cx, cy] });\n                break;\n            case 'Z':\n            case 'z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n    }\n    return out;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}