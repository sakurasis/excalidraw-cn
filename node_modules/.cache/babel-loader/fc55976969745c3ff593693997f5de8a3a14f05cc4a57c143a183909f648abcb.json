{"ast":null,"code":"import _regeneratorRuntime from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _createForOfIteratorHelper from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _asyncToGenerator from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";import{compressData}from\"../../data/encode\";import{newElementWith}from\"../../element/mutateElement\";import{isInitializedImageElement}from\"../../element/typeChecks\";import{t}from\"../../i18n\";export var FileManager=/*#__PURE__*/function(){function FileManager(_ref){var _this=this;var getFiles=_ref.getFiles,saveFiles=_ref.saveFiles;_classCallCheck(this,FileManager);/** files being fetched */this.fetchingFiles=new Map();/** files being saved */this.savingFiles=new Map();/* files already saved to persistent storage */this.savedFiles=new Map();this.erroredFiles=new Map();this._getFiles=void 0;this._saveFiles=void 0;/**\n   * returns whether file is already saved or being processed\n   */this.isFileHandled=function(id){return _this.savedFiles.has(id)||_this.fetchingFiles.has(id)||_this.savingFiles.has(id)||_this.erroredFiles.has(id);};this.isFileSaved=function(id){return _this.savedFiles.has(id);};this.saveFiles=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref2){var elements,files,addedFiles,_iterator,_step,element,_yield$_this$_saveFil,savedFiles,erroredFiles,_iterator2,_step2,_step2$value,fileId,_iterator3,_step3,_step3$value,_fileId;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:elements=_ref2.elements,files=_ref2.files;addedFiles=new Map();_iterator=_createForOfIteratorHelper(elements);try{for(_iterator.s();!(_step=_iterator.n()).done;){element=_step.value;if(isInitializedImageElement(element)&&files[element.fileId]&&!_this.isFileHandled(element.fileId)){addedFiles.set(element.fileId,files[element.fileId]);_this.savingFiles.set(element.fileId,true);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}_context.prev=4;_context.next=7;return _this._saveFiles({addedFiles:addedFiles});case 7:_yield$_this$_saveFil=_context.sent;savedFiles=_yield$_this$_saveFil.savedFiles;erroredFiles=_yield$_this$_saveFil.erroredFiles;_iterator2=_createForOfIteratorHelper(savedFiles);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){_step2$value=_slicedToArray(_step2.value,1),fileId=_step2$value[0];_this.savedFiles.set(fileId,true);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return _context.abrupt(\"return\",{savedFiles:savedFiles,erroredFiles:erroredFiles});case 13:_context.prev=13;_iterator3=_createForOfIteratorHelper(addedFiles);try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){_step3$value=_slicedToArray(_step3.value,1),_fileId=_step3$value[0];_this.savingFiles.delete(_fileId);}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return _context.finish(13);case 17:case\"end\":return _context.stop();}},_callee,null,[[4,,13,17]]);}));return function(_x){return _ref3.apply(this,arguments);};}();this.getFiles=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ids){var _iterator4,_step4,_id,_yield$_this$_getFile,loadedFiles,erroredFiles,_iterator5,_step5,file,_iterator6,_step6,_step6$value,fileId,_iterator7,_step7,id;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:if(ids.length){_context2.next=2;break;}return _context2.abrupt(\"return\",{loadedFiles:[],erroredFiles:new Map()});case 2:_iterator4=_createForOfIteratorHelper(ids);try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){_id=_step4.value;_this.fetchingFiles.set(_id,true);}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}_context2.prev=4;_context2.next=7;return _this._getFiles(ids);case 7:_yield$_this$_getFile=_context2.sent;loadedFiles=_yield$_this$_getFile.loadedFiles;erroredFiles=_yield$_this$_getFile.erroredFiles;_iterator5=_createForOfIteratorHelper(loadedFiles);try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){file=_step5.value;_this.savedFiles.set(file.id,true);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}_iterator6=_createForOfIteratorHelper(erroredFiles);try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){_step6$value=_slicedToArray(_step6.value,1),fileId=_step6$value[0];_this.erroredFiles.set(fileId,true);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}return _context2.abrupt(\"return\",{loadedFiles:loadedFiles,erroredFiles:erroredFiles});case 15:_context2.prev=15;_iterator7=_createForOfIteratorHelper(ids);try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){id=_step7.value;_this.fetchingFiles.delete(id);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}return _context2.finish(15);case 19:case\"end\":return _context2.stop();}},_callee2,null,[[4,,15,19]]);}));return function(_x2){return _ref4.apply(this,arguments);};}();/** a file element prevents unload only if it's being saved regardless of\n   *  its `status`. This ensures that elements who for any reason haven't\n   *  beed set to `saved` status don't prevent unload in future sessions.\n   *  Technically we should prevent unload when the origin client haven't\n   *  yet saved the `status` update to storage, but that should be taken care\n   *  of during regular beforeUnload unsaved files check.\n   */this.shouldPreventUnload=function(elements){return elements.some(function(element){return isInitializedImageElement(element)&&!element.isDeleted&&_this.savingFiles.has(element.fileId);});};/**\n   * helper to determine if image element status needs updating\n   */this.shouldUpdateImageElementStatus=function(element){return isInitializedImageElement(element)&&_this.isFileSaved(element.fileId)&&element.status===\"pending\";};this._getFiles=getFiles;this._saveFiles=saveFiles;}_createClass(FileManager,[{key:\"reset\",value:function reset(){this.fetchingFiles.clear();this.savingFiles.clear();this.savedFiles.clear();this.erroredFiles.clear();}}]);return FileManager;}();export var encodeFilesForUpload=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref5){var files,maxBytes,encryptionKey,processedFiles,_iterator8,_step8,_step8$value,id,fileData,buffer,encodedFile;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:files=_ref5.files,maxBytes=_ref5.maxBytes,encryptionKey=_ref5.encryptionKey;processedFiles=[];_iterator8=_createForOfIteratorHelper(files);_context3.prev=3;_iterator8.s();case 5:if((_step8=_iterator8.n()).done){_context3.next=16;break;}_step8$value=_slicedToArray(_step8.value,2),id=_step8$value[0],fileData=_step8$value[1];buffer=new TextEncoder().encode(fileData.dataURL);_context3.next=10;return compressData(buffer,{encryptionKey:encryptionKey,metadata:{id:id,mimeType:fileData.mimeType,created:Date.now(),lastRetrieved:Date.now()}});case 10:encodedFile=_context3.sent;if(!(buffer.byteLength>maxBytes)){_context3.next=13;break;}throw new Error(t(\"errors.fileTooBig\",{maxSize:\"\".concat(Math.trunc(maxBytes/1024/1024),\"MB\")}));case 13:processedFiles.push({id:id,buffer:encodedFile});case 14:_context3.next=5;break;case 16:_context3.next=21;break;case 18:_context3.prev=18;_context3.t0=_context3[\"catch\"](3);_iterator8.e(_context3.t0);case 21:_context3.prev=21;_iterator8.f();return _context3.finish(21);case 24:return _context3.abrupt(\"return\",processedFiles);case 25:case\"end\":return _context3.stop();}},_callee3,null,[[3,18,21,24]]);}));return function encodeFilesForUpload(_x3){return _ref6.apply(this,arguments);};}();export var updateStaleImageStatuses=function updateStaleImageStatuses(params){if(!params.erroredFiles.size){return;}params.excalidrawAPI.updateScene({elements:params.excalidrawAPI.getSceneElementsIncludingDeleted().map(function(element){if(isInitializedImageElement(element)&&params.erroredFiles.has(element.fileId)){return newElementWith(element,{status:\"error\"});}return element;})});};","map":{"version":3,"names":["compressData","newElementWith","isInitializedImageElement","t","FileManager","_ref","_this","getFiles","saveFiles","_classCallCheck","fetchingFiles","Map","savingFiles","savedFiles","erroredFiles","_getFiles","_saveFiles","isFileHandled","id","has","isFileSaved","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref2","elements","files","addedFiles","_iterator","_step","element","_yield$_this$_saveFil","_iterator2","_step2","_step2$value","fileId","_iterator3","_step3","_step3$value","_fileId","wrap","_callee$","_context","prev","next","_createForOfIteratorHelper","s","n","done","value","set","err","e","f","sent","_slicedToArray","abrupt","delete","finish","stop","_x","apply","arguments","_ref4","_callee2","ids","_iterator4","_step4","_id","_yield$_this$_getFile","loadedFiles","_iterator5","_step5","file","_iterator6","_step6","_step6$value","_iterator7","_step7","_callee2$","_context2","length","_x2","shouldPreventUnload","some","isDeleted","shouldUpdateImageElementStatus","status","_createClass","key","reset","clear","encodeFilesForUpload","_ref6","_callee3","_ref5","maxBytes","encryptionKey","processedFiles","_iterator8","_step8","_step8$value","fileData","buffer","encodedFile","_callee3$","_context3","TextEncoder","encode","dataURL","metadata","mimeType","created","Date","now","lastRetrieved","byteLength","Error","maxSize","concat","Math","trunc","push","t0","_x3","updateStaleImageStatuses","params","size","excalidrawAPI","updateScene","getSceneElementsIncludingDeleted","map"],"sources":["D:/project/excalidraw-cn/src/excalidraw-app/data/FileManager.ts"],"sourcesContent":["import { compressData } from \"../../data/encode\";\nimport { newElementWith } from \"../../element/mutateElement\";\nimport { isInitializedImageElement } from \"../../element/typeChecks\";\nimport {\n  ExcalidrawElement,\n  ExcalidrawImageElement,\n  FileId,\n  InitializedExcalidrawImageElement,\n} from \"../../element/types\";\nimport { t } from \"../../i18n\";\nimport {\n  BinaryFileData,\n  BinaryFileMetadata,\n  ExcalidrawImperativeAPI,\n  BinaryFiles,\n} from \"../../types\";\n\nexport class FileManager {\n  /** files being fetched */\n  private fetchingFiles = new Map<ExcalidrawImageElement[\"fileId\"], true>();\n  /** files being saved */\n  private savingFiles = new Map<ExcalidrawImageElement[\"fileId\"], true>();\n  /* files already saved to persistent storage */\n  private savedFiles = new Map<ExcalidrawImageElement[\"fileId\"], true>();\n  private erroredFiles = new Map<ExcalidrawImageElement[\"fileId\"], true>();\n\n  private _getFiles;\n  private _saveFiles;\n\n  constructor({\n    getFiles,\n    saveFiles,\n  }: {\n    getFiles: (fileIds: FileId[]) => Promise<{\n      loadedFiles: BinaryFileData[];\n      erroredFiles: Map<FileId, true>;\n    }>;\n    saveFiles: (data: { addedFiles: Map<FileId, BinaryFileData> }) => Promise<{\n      savedFiles: Map<FileId, true>;\n      erroredFiles: Map<FileId, true>;\n    }>;\n  }) {\n    this._getFiles = getFiles;\n    this._saveFiles = saveFiles;\n  }\n\n  /**\n   * returns whether file is already saved or being processed\n   */\n  isFileHandled = (id: FileId) => {\n    return (\n      this.savedFiles.has(id) ||\n      this.fetchingFiles.has(id) ||\n      this.savingFiles.has(id) ||\n      this.erroredFiles.has(id)\n    );\n  };\n\n  isFileSaved = (id: FileId) => {\n    return this.savedFiles.has(id);\n  };\n\n  saveFiles = async ({\n    elements,\n    files,\n  }: {\n    elements: readonly ExcalidrawElement[];\n    files: BinaryFiles;\n  }) => {\n    const addedFiles: Map<FileId, BinaryFileData> = new Map();\n\n    for (const element of elements) {\n      if (\n        isInitializedImageElement(element) &&\n        files[element.fileId] &&\n        !this.isFileHandled(element.fileId)\n      ) {\n        addedFiles.set(element.fileId, files[element.fileId]);\n        this.savingFiles.set(element.fileId, true);\n      }\n    }\n\n    try {\n      const { savedFiles, erroredFiles } = await this._saveFiles({\n        addedFiles,\n      });\n\n      for (const [fileId] of savedFiles) {\n        this.savedFiles.set(fileId, true);\n      }\n\n      return {\n        savedFiles,\n        erroredFiles,\n      };\n    } finally {\n      for (const [fileId] of addedFiles) {\n        this.savingFiles.delete(fileId);\n      }\n    }\n  };\n\n  getFiles = async (\n    ids: FileId[],\n  ): Promise<{\n    loadedFiles: BinaryFileData[];\n    erroredFiles: Map<FileId, true>;\n  }> => {\n    if (!ids.length) {\n      return {\n        loadedFiles: [],\n        erroredFiles: new Map(),\n      };\n    }\n    for (const id of ids) {\n      this.fetchingFiles.set(id, true);\n    }\n\n    try {\n      const { loadedFiles, erroredFiles } = await this._getFiles(ids);\n\n      for (const file of loadedFiles) {\n        this.savedFiles.set(file.id, true);\n      }\n      for (const [fileId] of erroredFiles) {\n        this.erroredFiles.set(fileId, true);\n      }\n\n      return { loadedFiles, erroredFiles };\n    } finally {\n      for (const id of ids) {\n        this.fetchingFiles.delete(id);\n      }\n    }\n  };\n\n  /** a file element prevents unload only if it's being saved regardless of\n   *  its `status`. This ensures that elements who for any reason haven't\n   *  beed set to `saved` status don't prevent unload in future sessions.\n   *  Technically we should prevent unload when the origin client haven't\n   *  yet saved the `status` update to storage, but that should be taken care\n   *  of during regular beforeUnload unsaved files check.\n   */\n  shouldPreventUnload = (elements: readonly ExcalidrawElement[]) => {\n    return elements.some((element) => {\n      return (\n        isInitializedImageElement(element) &&\n        !element.isDeleted &&\n        this.savingFiles.has(element.fileId)\n      );\n    });\n  };\n\n  /**\n   * helper to determine if image element status needs updating\n   */\n  shouldUpdateImageElementStatus = (\n    element: ExcalidrawElement,\n  ): element is InitializedExcalidrawImageElement => {\n    return (\n      isInitializedImageElement(element) &&\n      this.isFileSaved(element.fileId) &&\n      element.status === \"pending\"\n    );\n  };\n\n  reset() {\n    this.fetchingFiles.clear();\n    this.savingFiles.clear();\n    this.savedFiles.clear();\n    this.erroredFiles.clear();\n  }\n}\n\nexport const encodeFilesForUpload = async ({\n  files,\n  maxBytes,\n  encryptionKey,\n}: {\n  files: Map<FileId, BinaryFileData>;\n  maxBytes: number;\n  encryptionKey: string;\n}) => {\n  const processedFiles: {\n    id: FileId;\n    buffer: Uint8Array;\n  }[] = [];\n\n  for (const [id, fileData] of files) {\n    const buffer = new TextEncoder().encode(fileData.dataURL);\n\n    const encodedFile = await compressData<BinaryFileMetadata>(buffer, {\n      encryptionKey,\n      metadata: {\n        id,\n        mimeType: fileData.mimeType,\n        created: Date.now(),\n        lastRetrieved: Date.now(),\n      },\n    });\n\n    if (buffer.byteLength > maxBytes) {\n      throw new Error(\n        t(\"errors.fileTooBig\", {\n          maxSize: `${Math.trunc(maxBytes / 1024 / 1024)}MB`,\n        }),\n      );\n    }\n\n    processedFiles.push({\n      id,\n      buffer: encodedFile,\n    });\n  }\n\n  return processedFiles;\n};\n\nexport const updateStaleImageStatuses = (params: {\n  excalidrawAPI: ExcalidrawImperativeAPI;\n  erroredFiles: Map<FileId, true>;\n  elements: readonly ExcalidrawElement[];\n}) => {\n  if (!params.erroredFiles.size) {\n    return;\n  }\n  params.excalidrawAPI.updateScene({\n    elements: params.excalidrawAPI\n      .getSceneElementsIncludingDeleted()\n      .map((element) => {\n        if (\n          isInitializedImageElement(element) &&\n          params.erroredFiles.has(element.fileId)\n        ) {\n          return newElementWith(element, {\n            status: \"error\",\n          });\n        }\n        return element;\n      }),\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}