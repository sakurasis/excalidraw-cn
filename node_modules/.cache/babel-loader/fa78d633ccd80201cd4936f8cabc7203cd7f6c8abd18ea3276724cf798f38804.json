{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\PasteChartDialog.tsx\";\nimport oc from \"open-color\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { renderSpreadsheet } from \"../charts\";\nimport { t } from \"../i18n\";\nimport { exportToSvg } from \"../scene/export\";\nimport { useApp } from \"./App\";\nimport { Dialog } from \"./Dialog\";\nimport \"./PasteChartDialog.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChartPreviewBtn = props => {\n  const previewRef = useRef(null);\n  const [chartElements, setChartElements] = useState(null);\n  useLayoutEffect(() => {\n    if (!props.spreadsheet) {\n      return;\n    }\n    const elements = renderSpreadsheet(props.chartType, props.spreadsheet, 0, 0);\n    setChartElements(elements);\n    let svg;\n    const previewNode = previewRef.current;\n    (async () => {\n      var _svg$querySelector;\n      svg = await exportToSvg(elements, {\n        exportBackground: false,\n        viewBackgroundColor: oc.white\n      }, null // files\n      );\n\n      (_svg$querySelector = svg.querySelector(\".style-fonts\")) === null || _svg$querySelector === void 0 ? void 0 : _svg$querySelector.remove();\n      previewNode.replaceChildren();\n      previewNode.appendChild(svg);\n      if (props.selected) {\n        previewNode.parentNode.focus();\n      }\n    })();\n    return () => {\n      previewNode.replaceChildren();\n    };\n  }, [props.spreadsheet, props.chartType, props.selected]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"ChartPreview\",\n    onClick: () => {\n      if (chartElements) {\n        props.onClick(props.chartType, chartElements);\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: previewRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\nexport const PasteChartDialog = _ref => {\n  let {\n    setAppState,\n    appState,\n    onClose\n  } = _ref;\n  const {\n    onInsertElements\n  } = useApp();\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n  const handleChartClick = (chartType, elements) => {\n    onInsertElements(elements);\n    trackEvent(\"magic\", \"chart\", chartType);\n    setAppState({\n      currentChartType: chartType,\n      pasteDialog: {\n        shown: false,\n        data: null\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    size: \"small\",\n    onCloseRequest: handleClose,\n    title: t(\"labels.pasteCharts\"),\n    className: \"PasteChartDialog\",\n    autofocus: false,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ChartPreviewBtn, {\n        chartType: \"bar\",\n        spreadsheet: appState.pasteDialog.data,\n        selected: appState.currentChartType === \"bar\",\n        onClick: handleChartClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartPreviewBtn, {\n        chartType: \"line\",\n        spreadsheet: appState.pasteDialog.data,\n        selected: appState.currentChartType === \"line\",\n        onClick: handleChartClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["oc","React","useLayoutEffect","useRef","useState","trackEvent","renderSpreadsheet","t","exportToSvg","useApp","Dialog","jsxDEV","_jsxDEV","ChartPreviewBtn","props","previewRef","chartElements","setChartElements","spreadsheet","elements","chartType","svg","previewNode","current","_svg$querySelector","exportBackground","viewBackgroundColor","white","querySelector","remove","replaceChildren","appendChild","selected","parentNode","focus","className","onClick","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","PasteChartDialog","_ref","setAppState","appState","onClose","onInsertElements","handleClose","useCallback","handleChartClick","currentChartType","pasteDialog","shown","data","size","onCloseRequest","title","autofocus"],"sources":["D:/project/excalidraw-cn/src/components/PasteChartDialog.tsx"],"sourcesContent":["import oc from \"open-color\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { ChartElements, renderSpreadsheet, Spreadsheet } from \"../charts\";\nimport { ChartType } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { exportToSvg } from \"../scene/export\";\nimport { UIAppState } from \"../types\";\nimport { useApp } from \"./App\";\nimport { Dialog } from \"./Dialog\";\n\nimport \"./PasteChartDialog.scss\";\n\ntype OnInsertChart = (chartType: ChartType, elements: ChartElements) => void;\n\nconst ChartPreviewBtn = (props: {\n  spreadsheet: Spreadsheet | null;\n  chartType: ChartType;\n  selected: boolean;\n  onClick: OnInsertChart;\n}) => {\n  const previewRef = useRef<HTMLDivElement | null>(null);\n  const [chartElements, setChartElements] = useState<ChartElements | null>(\n    null,\n  );\n\n  useLayoutEffect(() => {\n    if (!props.spreadsheet) {\n      return;\n    }\n\n    const elements = renderSpreadsheet(\n      props.chartType,\n      props.spreadsheet,\n      0,\n      0,\n    );\n    setChartElements(elements);\n    let svg: SVGSVGElement;\n    const previewNode = previewRef.current!;\n\n    (async () => {\n      svg = await exportToSvg(\n        elements,\n        {\n          exportBackground: false,\n          viewBackgroundColor: oc.white,\n        },\n        null, // files\n      );\n      svg.querySelector(\".style-fonts\")?.remove();\n      previewNode.replaceChildren();\n      previewNode.appendChild(svg);\n\n      if (props.selected) {\n        (previewNode.parentNode as HTMLDivElement).focus();\n      }\n    })();\n\n    return () => {\n      previewNode.replaceChildren();\n    };\n  }, [props.spreadsheet, props.chartType, props.selected]);\n\n  return (\n    <button\n      className=\"ChartPreview\"\n      onClick={() => {\n        if (chartElements) {\n          props.onClick(props.chartType, chartElements);\n        }\n      }}\n    >\n      <div ref={previewRef} />\n    </button>\n  );\n};\n\nexport const PasteChartDialog = ({\n  setAppState,\n  appState,\n  onClose,\n}: {\n  appState: UIAppState;\n  onClose: () => void;\n  setAppState: React.Component<any, UIAppState>[\"setState\"];\n}) => {\n  const { onInsertElements } = useApp();\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  const handleChartClick = (chartType: ChartType, elements: ChartElements) => {\n    onInsertElements(elements);\n    trackEvent(\"magic\", \"chart\", chartType);\n    setAppState({\n      currentChartType: chartType,\n      pasteDialog: {\n        shown: false,\n        data: null,\n      },\n    });\n  };\n\n  return (\n    <Dialog\n      size=\"small\"\n      onCloseRequest={handleClose}\n      title={t(\"labels.pasteCharts\")}\n      className={\"PasteChartDialog\"}\n      autofocus={false}\n    >\n      <div className={\"container\"}>\n        <ChartPreviewBtn\n          chartType=\"bar\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"bar\"}\n          onClick={handleChartClick}\n        />\n        <ChartPreviewBtn\n          chartType=\"line\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"line\"}\n          onClick={handleChartClick}\n        />\n      </div>\n    </Dialog>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}