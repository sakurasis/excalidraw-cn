{"ast":null,"code":"import { fileOpen, fileSave } from \"./filesystem\";\nimport { cleanAppStateForExport, clearAppStateForDatabase } from \"../appState\";\nimport { EXPORT_DATA_TYPES, EXPORT_SOURCE, MIME_TYPES, VERSIONS } from \"../constants\";\nimport { clearElementsForDatabase, clearElementsForExport } from \"../element\";\nimport { isImageFileHandle, loadFromBlob, normalizeFile } from \"./blob\";\n/**\n * Strips out files which are only referenced by deleted elements\n */\nconst filterOutDeletedFiles = (elements, files) => {\n  const nextFiles = {};\n  for (const element of elements) {\n    if (!element.isDeleted && \"fileId\" in element && element.fileId && files[element.fileId]) {\n      nextFiles[element.fileId] = files[element.fileId];\n    }\n  }\n  return nextFiles;\n};\nexport const serializeAsJSON = (elements, appState, files, type) => {\n  const data = {\n    type: EXPORT_DATA_TYPES.excalidraw,\n    version: VERSIONS.excalidraw,\n    source: EXPORT_SOURCE,\n    elements: type === \"local\" ? clearElementsForExport(elements) : clearElementsForDatabase(elements),\n    appState: type === \"local\" ? cleanAppStateForExport(appState) : clearAppStateForDatabase(appState),\n    files: type === \"local\" ? filterOutDeletedFiles(elements, files) :\n    // will be stripped from JSON\n    undefined\n  };\n  return JSON.stringify(data, null, 2);\n};\nexport const saveAsJSON = async (elements, appState, files) => {\n  const serialized = serializeAsJSON(elements, appState, files, \"local\");\n  const blob = new Blob([serialized], {\n    type: MIME_TYPES.excalidraw\n  });\n  const fileHandle = await fileSave(blob, {\n    name: appState.name,\n    extension: \"excalidraw\",\n    description: \"Excalidraw file\",\n    fileHandle: isImageFileHandle(appState.fileHandle) ? null : appState.fileHandle\n  });\n  return {\n    fileHandle\n  };\n};\nexport const loadFromJSON = async (localAppState, localElements) => {\n  const file = await fileOpen({\n    description: \"Excalidraw files\"\n    // ToDo: Be over-permissive until https://bugs.webkit.org/show_bug.cgi?id=34442\n    // gets resolved. Else, iOS users cannot open `.excalidraw` files.\n    // extensions: [\"json\", \"excalidraw\", \"png\", \"svg\"],\n  });\n\n  return loadFromBlob(await normalizeFile(file), localAppState, localElements, file.handle);\n};\nexport const isValidExcalidrawData = data => {\n  return (data === null || data === void 0 ? void 0 : data.type) === EXPORT_DATA_TYPES.excalidraw && (!data.elements || Array.isArray(data.elements) && (!data.appState || typeof data.appState === \"object\"));\n};\nexport const isValidLibrary = json => {\n  return typeof json === \"object\" && json && json.type === EXPORT_DATA_TYPES.excalidrawLibrary && (json.version === 1 || json.version === 2);\n};\nexport const serializeLibraryAsJSON = libraryItems => {\n  const data = {\n    type: EXPORT_DATA_TYPES.excalidrawLibrary,\n    version: VERSIONS.excalidrawLibrary,\n    source: EXPORT_SOURCE,\n    libraryItems\n  };\n  return JSON.stringify(data, null, 2);\n};\nexport const saveLibraryAsJSON = async libraryItems => {\n  const serialized = serializeLibraryAsJSON(libraryItems);\n  await fileSave(new Blob([serialized], {\n    type: MIME_TYPES.excalidrawlib\n  }), {\n    name: \"library\",\n    extension: \"excalidrawlib\",\n    description: \"Excalidraw library file\"\n  });\n};","map":{"version":3,"names":["fileOpen","fileSave","cleanAppStateForExport","clearAppStateForDatabase","EXPORT_DATA_TYPES","EXPORT_SOURCE","MIME_TYPES","VERSIONS","clearElementsForDatabase","clearElementsForExport","isImageFileHandle","loadFromBlob","normalizeFile","filterOutDeletedFiles","elements","files","nextFiles","element","isDeleted","fileId","serializeAsJSON","appState","type","data","excalidraw","version","source","undefined","JSON","stringify","saveAsJSON","serialized","blob","Blob","fileHandle","name","extension","description","loadFromJSON","localAppState","localElements","file","handle","isValidExcalidrawData","Array","isArray","isValidLibrary","json","excalidrawLibrary","serializeLibraryAsJSON","libraryItems","saveLibraryAsJSON","excalidrawlib"],"sources":["D:/project/excalidraw-cn/src/data/json.ts"],"sourcesContent":["import { fileOpen, fileSave } from \"./filesystem\";\nimport { cleanAppStateForExport, clearAppStateForDatabase } from \"../appState\";\nimport {\n  EXPORT_DATA_TYPES,\n  EXPORT_SOURCE,\n  MIME_TYPES,\n  VERSIONS,\n} from \"../constants\";\nimport { clearElementsForDatabase, clearElementsForExport } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState, BinaryFiles, LibraryItems } from \"../types\";\nimport { isImageFileHandle, loadFromBlob, normalizeFile } from \"./blob\";\n\nimport {\n  ExportedDataState,\n  ImportedDataState,\n  ExportedLibraryData,\n  ImportedLibraryData,\n} from \"./types\";\n\n/**\n * Strips out files which are only referenced by deleted elements\n */\nconst filterOutDeletedFiles = (\n  elements: readonly ExcalidrawElement[],\n  files: BinaryFiles,\n) => {\n  const nextFiles: BinaryFiles = {};\n  for (const element of elements) {\n    if (\n      !element.isDeleted &&\n      \"fileId\" in element &&\n      element.fileId &&\n      files[element.fileId]\n    ) {\n      nextFiles[element.fileId] = files[element.fileId];\n    }\n  }\n  return nextFiles;\n};\n\nexport const serializeAsJSON = (\n  elements: readonly ExcalidrawElement[],\n  appState: Partial<AppState>,\n  files: BinaryFiles,\n  type: \"local\" | \"database\",\n): string => {\n  const data: ExportedDataState = {\n    type: EXPORT_DATA_TYPES.excalidraw,\n    version: VERSIONS.excalidraw,\n    source: EXPORT_SOURCE,\n    elements:\n      type === \"local\"\n        ? clearElementsForExport(elements)\n        : clearElementsForDatabase(elements),\n    appState:\n      type === \"local\"\n        ? cleanAppStateForExport(appState)\n        : clearAppStateForDatabase(appState),\n    files:\n      type === \"local\"\n        ? filterOutDeletedFiles(elements, files)\n        : // will be stripped from JSON\n          undefined,\n  };\n\n  return JSON.stringify(data, null, 2);\n};\n\nexport const saveAsJSON = async (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  files: BinaryFiles,\n) => {\n  const serialized = serializeAsJSON(elements, appState, files, \"local\");\n  const blob = new Blob([serialized], {\n    type: MIME_TYPES.excalidraw,\n  });\n\n  const fileHandle = await fileSave(blob, {\n    name: appState.name,\n    extension: \"excalidraw\",\n    description: \"Excalidraw file\",\n    fileHandle: isImageFileHandle(appState.fileHandle)\n      ? null\n      : appState.fileHandle,\n  });\n  return { fileHandle };\n};\n\nexport const loadFromJSON = async (\n  localAppState: AppState,\n  localElements: readonly ExcalidrawElement[] | null,\n) => {\n  const file = await fileOpen({\n    description: \"Excalidraw files\",\n    // ToDo: Be over-permissive until https://bugs.webkit.org/show_bug.cgi?id=34442\n    // gets resolved. Else, iOS users cannot open `.excalidraw` files.\n    // extensions: [\"json\", \"excalidraw\", \"png\", \"svg\"],\n  });\n  return loadFromBlob(\n    await normalizeFile(file),\n    localAppState,\n    localElements,\n    file.handle,\n  );\n};\n\nexport const isValidExcalidrawData = (data?: {\n  type?: any;\n  elements?: any;\n  appState?: any;\n}): data is ImportedDataState => {\n  return (\n    data?.type === EXPORT_DATA_TYPES.excalidraw &&\n    (!data.elements ||\n      (Array.isArray(data.elements) &&\n        (!data.appState || typeof data.appState === \"object\")))\n  );\n};\n\nexport const isValidLibrary = (json: any): json is ImportedLibraryData => {\n  return (\n    typeof json === \"object\" &&\n    json &&\n    json.type === EXPORT_DATA_TYPES.excalidrawLibrary &&\n    (json.version === 1 || json.version === 2)\n  );\n};\n\nexport const serializeLibraryAsJSON = (libraryItems: LibraryItems) => {\n  const data: ExportedLibraryData = {\n    type: EXPORT_DATA_TYPES.excalidrawLibrary,\n    version: VERSIONS.excalidrawLibrary,\n    source: EXPORT_SOURCE,\n    libraryItems,\n  };\n  return JSON.stringify(data, null, 2);\n};\n\nexport const saveLibraryAsJSON = async (libraryItems: LibraryItems) => {\n  const serialized = serializeLibraryAsJSON(libraryItems);\n  await fileSave(\n    new Blob([serialized], {\n      type: MIME_TYPES.excalidrawlib,\n    }),\n    {\n      name: \"library\",\n      extension: \"excalidrawlib\",\n      description: \"Excalidraw library file\",\n    },\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}