{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n  for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? args[i] : '/';\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = path + \"/\" + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n/** JSDoc */\nfunction trim(arr) {\n  var start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  var end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/';\n  // Normalize the path\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n// posix version\n/** JSDoc */\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n// posix version\n/** JSDoc */\nexport function join() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return normalizePath(args.join('/'));\n}\n/** JSDoc */\nexport function dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n  return root + dir;\n}\n/** JSDoc */\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}","map":{"version":3,"names":["normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","splitPathRe","splitPath","filename","exec","slice","resolve","args","_i","arguments","resolvedPath","resolvedAbsolute","path","charAt","split","filter","p","join","trim","arr","start","end","relative","from","to","substr","fromParts","toParts","Math","min","samePartsLength","outputParts","push","concat","normalizePath","isPathAbsolute","isAbsolute","trailingSlash","normalizedPath","dirname","result","root","dir","basename","ext","f"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\path.ts"],"sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}