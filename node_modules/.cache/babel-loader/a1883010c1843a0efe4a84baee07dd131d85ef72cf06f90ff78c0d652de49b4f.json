{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["D:/project/excalidraw-cn/src/data/types.ts"],"sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport {\n  AppState,\n  BinaryFiles,\n  LibraryItems,\n  LibraryItems_anyVersion,\n} from \"../types\";\nimport type { cleanAppStateForExport } from \"../appState\";\nimport { VERSIONS } from \"../constants\";\n\nexport interface ExportedDataState {\n  type: string;\n  version: number;\n  source: string;\n  elements: readonly ExcalidrawElement[];\n  appState: ReturnType<typeof cleanAppStateForExport>;\n  files: BinaryFiles | undefined;\n}\n\n/**\n * Map of legacy AppState keys, with values of:\n *  [<legacy type>, <new AppState proeprty>]\n *\n * This is a helper type used in downstream abstractions.\n * Don't consume on its own.\n */\nexport type LegacyAppState = {\n  /** @deprecated #6213 TODO remove 23-06-01 */\n  isSidebarDocked: [boolean, \"defaultSidebarDockedPreference\"];\n};\n\nexport interface ImportedDataState {\n  type?: string;\n  version?: number;\n  source?: string;\n  elements?: readonly ExcalidrawElement[] | null;\n  appState?: Readonly<\n    Partial<\n      AppState & {\n        [T in keyof LegacyAppState]: LegacyAppState[T][0];\n      }\n    >\n  > | null;\n  scrollToContent?: boolean;\n  libraryItems?: LibraryItems_anyVersion;\n  files?: BinaryFiles;\n}\n\nexport interface ExportedLibraryData {\n  type: string;\n  version: typeof VERSIONS.excalidrawLibrary;\n  source: string;\n  libraryItems: LibraryItems;\n}\n\nexport interface ImportedLibraryData extends Partial<ExportedLibraryData> {\n  /** @deprecated v1 */\n  library?: LibraryItems;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}