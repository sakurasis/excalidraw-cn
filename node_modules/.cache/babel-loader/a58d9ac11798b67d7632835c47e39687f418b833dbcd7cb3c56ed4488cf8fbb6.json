{"ast":null,"code":"import _defineProperty from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{newElementWith}from\"./element/mutateElement\";import{getCommonBoundingBox}from\"./element/bounds\";import{getMaximumGroups}from\"./groups\";export var alignElements=function alignElements(selectedElements,alignment){var groups=getMaximumGroups(selectedElements);var selectionBoundingBox=getCommonBoundingBox(selectedElements);return groups.flatMap(function(group){var translation=calculateTranslation(group,selectionBoundingBox,alignment);return group.map(function(element){return newElementWith(element,{x:element.x+translation.x,y:element.y+translation.y});});});};var calculateTranslation=function calculateTranslation(group,selectionBoundingBox,_ref){var axis=_ref.axis,position=_ref.position;var groupBoundingBox=getCommonBoundingBox(group);var _ref2=axis===\"x\"?[\"minX\",\"maxX\"]:[\"minY\",\"maxY\"],_ref3=_slicedToArray(_ref2,2),min=_ref3[0],max=_ref3[1];var noTranslation={x:0,y:0};if(position===\"start\"){return _objectSpread(_objectSpread({},noTranslation),{},_defineProperty({},axis,selectionBoundingBox[min]-groupBoundingBox[min]));}else if(position===\"end\"){return _objectSpread(_objectSpread({},noTranslation),{},_defineProperty({},axis,selectionBoundingBox[max]-groupBoundingBox[max]));}// else if (position === \"center\") {\nreturn _objectSpread(_objectSpread({},noTranslation),{},_defineProperty({},axis,(selectionBoundingBox[min]+selectionBoundingBox[max])/2-(groupBoundingBox[min]+groupBoundingBox[max])/2));};","map":{"version":3,"names":["newElementWith","getCommonBoundingBox","getMaximumGroups","alignElements","selectedElements","alignment","groups","selectionBoundingBox","flatMap","group","translation","calculateTranslation","map","element","x","y","_ref","axis","position","groupBoundingBox","_ref2","_ref3","_slicedToArray","min","max","noTranslation","_objectSpread","_defineProperty"],"sources":["D:/project/excalidraw-cn/src/align.ts"],"sourcesContent":["import { ExcalidrawElement } from \"./element/types\";\nimport { newElementWith } from \"./element/mutateElement\";\nimport { BoundingBox, getCommonBoundingBox } from \"./element/bounds\";\nimport { getMaximumGroups } from \"./groups\";\n\nexport interface Alignment {\n  position: \"start\" | \"center\" | \"end\";\n  axis: \"x\" | \"y\";\n}\n\nexport const alignElements = (\n  selectedElements: ExcalidrawElement[],\n  alignment: Alignment,\n): ExcalidrawElement[] => {\n  const groups: ExcalidrawElement[][] = getMaximumGroups(selectedElements);\n\n  const selectionBoundingBox = getCommonBoundingBox(selectedElements);\n\n  return groups.flatMap((group) => {\n    const translation = calculateTranslation(\n      group,\n      selectionBoundingBox,\n      alignment,\n    );\n    return group.map((element) =>\n      newElementWith(element, {\n        x: element.x + translation.x,\n        y: element.y + translation.y,\n      }),\n    );\n  });\n};\n\nconst calculateTranslation = (\n  group: ExcalidrawElement[],\n  selectionBoundingBox: BoundingBox,\n  { axis, position }: Alignment,\n): { x: number; y: number } => {\n  const groupBoundingBox = getCommonBoundingBox(group);\n\n  const [min, max]: [\"minX\" | \"minY\", \"maxX\" | \"maxY\"] =\n    axis === \"x\" ? [\"minX\", \"maxX\"] : [\"minY\", \"maxY\"];\n\n  const noTranslation = { x: 0, y: 0 };\n  if (position === \"start\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[min] - groupBoundingBox[min],\n    };\n  } else if (position === \"end\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[max] - groupBoundingBox[max],\n    };\n  } // else if (position === \"center\") {\n  return {\n    ...noTranslation,\n    [axis]:\n      (selectionBoundingBox[min] + selectionBoundingBox[max]) / 2 -\n      (groupBoundingBox[min] + groupBoundingBox[max]) / 2,\n  };\n};\n"],"mappings":"2UACA,OAASA,cAAc,KAAQ,yBAAyB,CACxD,OAAsBC,oBAAoB,KAAQ,kBAAkB,CACpE,OAASC,gBAAgB,KAAQ,UAAU,CAO3C,MAAO,IAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CACxBC,gBAAqC,CACrCC,SAAoB,CACI,CACxB,GAAM,CAAAC,MAA6B,CAAGJ,gBAAgB,CAACE,gBAAgB,CAAC,CAExE,GAAM,CAAAG,oBAAoB,CAAGN,oBAAoB,CAACG,gBAAgB,CAAC,CAEnE,MAAO,CAAAE,MAAM,CAACE,OAAO,CAAC,SAACC,KAAK,CAAK,CAC/B,GAAM,CAAAC,WAAW,CAAGC,oBAAoB,CACtCF,KAAK,CACLF,oBAAoB,CACpBF,SAAS,CACV,CACD,MAAO,CAAAI,KAAK,CAACG,GAAG,CAAC,SAACC,OAAO,QACvB,CAAAb,cAAc,CAACa,OAAO,CAAE,CACtBC,CAAC,CAAED,OAAO,CAACC,CAAC,CAAGJ,WAAW,CAACI,CAAC,CAC5BC,CAAC,CAAEF,OAAO,CAACE,CAAC,CAAGL,WAAW,CAACK,CAC7B,CAAC,CAAC,GACH,CACH,CAAC,CAAC,CACJ,CAAC,CAED,GAAM,CAAAJ,oBAAoB,CAAG,QAAvB,CAAAA,oBAAoBA,CACxBF,KAA0B,CAC1BF,oBAAiC,CAAAS,IAAA,CAEJ,IAD3B,CAAAC,IAAI,CAAAD,IAAA,CAAJC,IAAI,CAAEC,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CAEhB,GAAM,CAAAC,gBAAgB,CAAGlB,oBAAoB,CAACQ,KAAK,CAAC,CAEpD,IAAAW,KAAA,CACEH,IAAI,GAAK,GAAG,CAAG,CAAC,MAAM,CAAE,MAAM,CAAC,CAAG,CAAC,MAAM,CAAE,MAAM,CAAC,CAAAI,KAAA,CAAAC,cAAA,CAAAF,KAAA,IAD7CG,GAAG,CAAAF,KAAA,IAAEG,GAAG,CAAAH,KAAA,IAGf,GAAM,CAAAI,aAAa,CAAG,CAAEX,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CAAC,CACpC,GAAIG,QAAQ,GAAK,OAAO,CAAE,CACxB,OAAAQ,aAAA,CAAAA,aAAA,IACKD,aAAa,KAAAE,eAAA,IACfV,IAAI,CAAGV,oBAAoB,CAACgB,GAAG,CAAC,CAAGJ,gBAAgB,CAACI,GAAG,CAAC,GAE7D,CAAC,IAAM,IAAIL,QAAQ,GAAK,KAAK,CAAE,CAC7B,OAAAQ,aAAA,CAAAA,aAAA,IACKD,aAAa,KAAAE,eAAA,IACfV,IAAI,CAAGV,oBAAoB,CAACiB,GAAG,CAAC,CAAGL,gBAAgB,CAACK,GAAG,CAAC,GAE7D,CAAE;AACF,OAAAE,aAAA,CAAAA,aAAA,IACKD,aAAa,KAAAE,eAAA,IACfV,IAAI,CACH,CAACV,oBAAoB,CAACgB,GAAG,CAAC,CAAGhB,oBAAoB,CAACiB,GAAG,CAAC,EAAI,CAAC,CAC3D,CAACL,gBAAgB,CAACI,GAAG,CAAC,CAAGJ,gBAAgB,CAACK,GAAG,CAAC,EAAI,CAAC,GAEzD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}