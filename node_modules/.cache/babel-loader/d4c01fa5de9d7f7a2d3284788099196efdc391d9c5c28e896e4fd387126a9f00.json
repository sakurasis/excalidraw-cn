{"ast":null,"code":"import { OMIT_SIDES_FOR_MULTIPLE_ELEMENTS, getTransformHandlesFromCoords, getTransformHandles } from \"./transformHandles\";\nconst isInsideTransformHandle = (transformHandle, x, y) => x >= transformHandle[0] && x <= transformHandle[0] + transformHandle[2] && y >= transformHandle[1] && y <= transformHandle[1] + transformHandle[3];\nexport const resizeTest = (element, appState, x, y, zoom, pointerType) => {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n  const {\n    rotation: rotationTransformHandle,\n    ...transformHandles\n  } = getTransformHandles(element, zoom, pointerType);\n  if (rotationTransformHandle && isInsideTransformHandle(rotationTransformHandle, x, y)) {\n    return \"rotation\";\n  }\n  const filter = Object.keys(transformHandles).filter(key => {\n    const transformHandle = transformHandles[key];\n    if (!transformHandle) {\n      return false;\n    }\n    return isInsideTransformHandle(transformHandle, x, y);\n  });\n  if (filter.length > 0) {\n    return filter[0];\n  }\n  return false;\n};\nexport const getElementWithTransformHandleType = (elements, appState, scenePointerX, scenePointerY, zoom, pointerType) => {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const transformHandleType = resizeTest(element, appState, scenePointerX, scenePointerY, zoom, pointerType);\n    return transformHandleType ? {\n      element,\n      transformHandleType\n    } : null;\n  }, null);\n};\nexport const getTransformHandleTypeFromCoords = (_ref, scenePointerX, scenePointerY, zoom, pointerType) => {\n  let [x1, y1, x2, y2] = _ref;\n  const transformHandles = getTransformHandlesFromCoords([x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2], 0, zoom, pointerType, OMIT_SIDES_FOR_MULTIPLE_ELEMENTS);\n  const found = Object.keys(transformHandles).find(key => {\n    const transformHandle = transformHandles[key];\n    return transformHandle && isInsideTransformHandle(transformHandle, scenePointerX, scenePointerY);\n  });\n  return found || false;\n};\nconst RESIZE_CURSORS = [\"ns\", \"nesw\", \"ew\", \"nwse\"];\nconst rotateResizeCursor = (cursor, angle) => {\n  const index = RESIZE_CURSORS.indexOf(cursor);\n  if (index >= 0) {\n    const a = Math.round(angle / (Math.PI / 4));\n    cursor = RESIZE_CURSORS[(index + a) % RESIZE_CURSORS.length];\n  }\n  return cursor;\n};\n\n/*\n * Returns bi-directional cursor for the element being resized\n */\nexport const getCursorForResizingElement = resizingElement => {\n  const {\n    element,\n    transformHandleType\n  } = resizingElement;\n  const shouldSwapCursors = element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n  switch (transformHandleType) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n      break;\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n      break;\n    case \"rotation\":\n      return \"grab\";\n  }\n  if (cursor && element) {\n    cursor = rotateResizeCursor(cursor, element.angle);\n  }\n  return cursor ? `${cursor}-resize` : \"\";\n};","map":{"version":3,"names":["OMIT_SIDES_FOR_MULTIPLE_ELEMENTS","getTransformHandlesFromCoords","getTransformHandles","isInsideTransformHandle","transformHandle","x","y","resizeTest","element","appState","zoom","pointerType","selectedElementIds","id","rotation","rotationTransformHandle","transformHandles","filter","Object","keys","key","length","getElementWithTransformHandleType","elements","scenePointerX","scenePointerY","reduce","result","transformHandleType","getTransformHandleTypeFromCoords","_ref","x1","y1","x2","y2","found","find","RESIZE_CURSORS","rotateResizeCursor","cursor","angle","index","indexOf","a","Math","round","PI","getCursorForResizingElement","resizingElement","shouldSwapCursors","sign","height","width"],"sources":["D:/project/excalidraw-cn/src/element/resizeTest.ts"],"sourcesContent":["import {\n  ExcalidrawElement,\n  PointerType,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\nimport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  getTransformHandlesFromCoords,\n  getTransformHandles,\n  TransformHandleType,\n  TransformHandle,\n  MaybeTransformHandleType,\n} from \"./transformHandles\";\nimport { AppState, Zoom } from \"../types\";\n\nconst isInsideTransformHandle = (\n  transformHandle: TransformHandle,\n  x: number,\n  y: number,\n) =>\n  x >= transformHandle[0] &&\n  x <= transformHandle[0] + transformHandle[2] &&\n  y >= transformHandle[1] &&\n  y <= transformHandle[1] + transformHandle[3];\n\nexport const resizeTest = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n): MaybeTransformHandleType => {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n\n  const { rotation: rotationTransformHandle, ...transformHandles } =\n    getTransformHandles(element, zoom, pointerType);\n\n  if (\n    rotationTransformHandle &&\n    isInsideTransformHandle(rotationTransformHandle, x, y)\n  ) {\n    return \"rotation\" as TransformHandleType;\n  }\n\n  const filter = Object.keys(transformHandles).filter((key) => {\n    const transformHandle =\n      transformHandles[key as Exclude<TransformHandleType, \"rotation\">]!;\n    if (!transformHandle) {\n      return false;\n    }\n    return isInsideTransformHandle(transformHandle, x, y);\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as TransformHandleType;\n  }\n\n  return false;\n};\n\nexport const getElementWithTransformHandleType = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  scenePointerX: number,\n  scenePointerY: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n) => {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const transformHandleType = resizeTest(\n      element,\n      appState,\n      scenePointerX,\n      scenePointerY,\n      zoom,\n      pointerType,\n    );\n    return transformHandleType ? { element, transformHandleType } : null;\n  }, null as { element: NonDeletedExcalidrawElement; transformHandleType: MaybeTransformHandleType } | null);\n};\n\nexport const getTransformHandleTypeFromCoords = (\n  [x1, y1, x2, y2]: readonly [number, number, number, number],\n  scenePointerX: number,\n  scenePointerY: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n): MaybeTransformHandleType => {\n  const transformHandles = getTransformHandlesFromCoords(\n    [x1, y1, x2, y2, (x1 + x2) / 2, (y1 + y2) / 2],\n    0,\n    zoom,\n    pointerType,\n    OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  );\n\n  const found = Object.keys(transformHandles).find((key) => {\n    const transformHandle =\n      transformHandles[key as Exclude<TransformHandleType, \"rotation\">]!;\n    return (\n      transformHandle &&\n      isInsideTransformHandle(transformHandle, scenePointerX, scenePointerY)\n    );\n  });\n  return (found || false) as MaybeTransformHandleType;\n};\n\nconst RESIZE_CURSORS = [\"ns\", \"nesw\", \"ew\", \"nwse\"];\nconst rotateResizeCursor = (cursor: string, angle: number) => {\n  const index = RESIZE_CURSORS.indexOf(cursor);\n  if (index >= 0) {\n    const a = Math.round(angle / (Math.PI / 4));\n    cursor = RESIZE_CURSORS[(index + a) % RESIZE_CURSORS.length];\n  }\n  return cursor;\n};\n\n/*\n * Returns bi-directional cursor for the element being resized\n */\nexport const getCursorForResizingElement = (resizingElement: {\n  element?: ExcalidrawElement;\n  transformHandleType: MaybeTransformHandleType;\n}): string => {\n  const { element, transformHandleType } = resizingElement;\n  const shouldSwapCursors =\n    element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (transformHandleType) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n      break;\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n      break;\n    case \"rotation\":\n      return \"grab\";\n  }\n\n  if (cursor && element) {\n    cursor = rotateResizeCursor(cursor, element.angle);\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n};\n"],"mappings":"AAMA,SACEA,gCAAgC,EAChCC,6BAA6B,EAC7BC,mBAAmB,QAId,oBAAoB;AAG3B,MAAMC,uBAAuB,GAAGA,CAC9BC,eAAgC,EAChCC,CAAS,EACTC,CAAS,KAETD,CAAC,IAAID,eAAe,CAAC,CAAC,CAAC,IACvBC,CAAC,IAAID,eAAe,CAAC,CAAC,CAAC,GAAGA,eAAe,CAAC,CAAC,CAAC,IAC5CE,CAAC,IAAIF,eAAe,CAAC,CAAC,CAAC,IACvBE,CAAC,IAAIF,eAAe,CAAC,CAAC,CAAC,GAAGA,eAAe,CAAC,CAAC,CAAC;AAE9C,OAAO,MAAMG,UAAU,GAAGA,CACxBC,OAAoC,EACpCC,QAAkB,EAClBJ,CAAS,EACTC,CAAS,EACTI,IAAU,EACVC,WAAwB,KACK;EAC7B,IAAI,CAACF,QAAQ,CAACG,kBAAkB,CAACJ,OAAO,CAACK,EAAE,CAAC,EAAE;IAC5C,OAAO,KAAK;EACd;EAEA,MAAM;IAAEC,QAAQ,EAAEC,uBAAuB;IAAE,GAAGC;EAAiB,CAAC,GAC9Dd,mBAAmB,CAACM,OAAO,EAAEE,IAAI,EAAEC,WAAW,CAAC;EAEjD,IACEI,uBAAuB,IACvBZ,uBAAuB,CAACY,uBAAuB,EAAEV,CAAC,EAAEC,CAAC,CAAC,EACtD;IACA,OAAO,UAAU;EACnB;EAEA,MAAMW,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACC,MAAM,CAAEG,GAAG,IAAK;IAC3D,MAAMhB,eAAe,GACnBY,gBAAgB,CAACI,GAAG,CAA8C;IACpE,IAAI,CAAChB,eAAe,EAAE;MACpB,OAAO,KAAK;IACd;IACA,OAAOD,uBAAuB,CAACC,eAAe,EAAEC,CAAC,EAAEC,CAAC,CAAC;EACvD,CAAC,CAAC;EAEF,IAAIW,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;IACrB,OAAOJ,MAAM,CAAC,CAAC,CAAC;EAClB;EAEA,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMK,iCAAiC,GAAGA,CAC/CC,QAAgD,EAChDd,QAAkB,EAClBe,aAAqB,EACrBC,aAAqB,EACrBf,IAAU,EACVC,WAAwB,KACrB;EACH,OAAOY,QAAQ,CAACG,MAAM,CAAC,CAACC,MAAM,EAAEnB,OAAO,KAAK;IAC1C,IAAImB,MAAM,EAAE;MACV,OAAOA,MAAM;IACf;IACA,MAAMC,mBAAmB,GAAGrB,UAAU,CACpCC,OAAO,EACPC,QAAQ,EACRe,aAAa,EACbC,aAAa,EACbf,IAAI,EACJC,WAAW,CACZ;IACD,OAAOiB,mBAAmB,GAAG;MAAEpB,OAAO;MAAEoB;IAAoB,CAAC,GAAG,IAAI;EACtE,CAAC,EAAE,IAAI,CAAmG;AAC5G,CAAC;AAED,OAAO,MAAMC,gCAAgC,GAAGA,CAAAC,IAAA,EAE9CN,aAAqB,EACrBC,aAAqB,EACrBf,IAAU,EACVC,WAAwB,KACK;EAAA,IAL7B,CAACoB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAA4C,GAAAJ,IAAA;EAM3D,MAAMd,gBAAgB,GAAGf,6BAA6B,CACpD,CAAC8B,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE,CAACH,EAAE,GAAGE,EAAE,IAAI,CAAC,EAAE,CAACD,EAAE,GAAGE,EAAE,IAAI,CAAC,CAAC,EAC9C,CAAC,EACDxB,IAAI,EACJC,WAAW,EACXX,gCAAgC,CACjC;EAED,MAAMmC,KAAK,GAAGjB,MAAM,CAACC,IAAI,CAACH,gBAAgB,CAAC,CAACoB,IAAI,CAAEhB,GAAG,IAAK;IACxD,MAAMhB,eAAe,GACnBY,gBAAgB,CAACI,GAAG,CAA8C;IACpE,OACEhB,eAAe,IACfD,uBAAuB,CAACC,eAAe,EAAEoB,aAAa,EAAEC,aAAa,CAAC;EAE1E,CAAC,CAAC;EACF,OAAQU,KAAK,IAAI,KAAK;AACxB,CAAC;AAED,MAAME,cAAc,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,CAAC;AACnD,MAAMC,kBAAkB,GAAGA,CAACC,MAAc,EAAEC,KAAa,KAAK;EAC5D,MAAMC,KAAK,GAAGJ,cAAc,CAACK,OAAO,CAACH,MAAM,CAAC;EAC5C,IAAIE,KAAK,IAAI,CAAC,EAAE;IACd,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,IAAII,IAAI,CAACE,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3CP,MAAM,GAAGF,cAAc,CAAC,CAACI,KAAK,GAAGE,CAAC,IAAIN,cAAc,CAAChB,MAAM,CAAC;EAC9D;EACA,OAAOkB,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMQ,2BAA2B,GAAIC,eAG3C,IAAa;EACZ,MAAM;IAAExC,OAAO;IAAEoB;EAAoB,CAAC,GAAGoB,eAAe;EACxD,MAAMC,iBAAiB,GACrBzC,OAAO,IAAIoC,IAAI,CAACM,IAAI,CAAC1C,OAAO,CAAC2C,MAAM,CAAC,GAAGP,IAAI,CAACM,IAAI,CAAC1C,OAAO,CAAC4C,KAAK,CAAC,KAAK,CAAC,CAAC;EACxE,IAAIb,MAAM,GAAG,IAAI;EAEjB,QAAQX,mBAAmB;IACzB,KAAK,GAAG;IACR,KAAK,GAAG;MACNW,MAAM,GAAG,IAAI;MACb;IACF,KAAK,GAAG;IACR,KAAK,GAAG;MACNA,MAAM,GAAG,IAAI;MACb;IACF,KAAK,IAAI;IACT,KAAK,IAAI;MACP,IAAIU,iBAAiB,EAAE;QACrBV,MAAM,GAAG,MAAM;MACjB,CAAC,MAAM;QACLA,MAAM,GAAG,MAAM;MACjB;MACA;IACF,KAAK,IAAI;IACT,KAAK,IAAI;MACP,IAAIU,iBAAiB,EAAE;QACrBV,MAAM,GAAG,MAAM;MACjB,CAAC,MAAM;QACLA,MAAM,GAAG,MAAM;MACjB;MACA;IACF,KAAK,UAAU;MACb,OAAO,MAAM;EAAC;EAGlB,IAAIA,MAAM,IAAI/B,OAAO,EAAE;IACrB+B,MAAM,GAAGD,kBAAkB,CAACC,MAAM,EAAE/B,OAAO,CAACgC,KAAK,CAAC;EACpD;EAEA,OAAOD,MAAM,GAAI,GAAEA,MAAO,SAAQ,GAAG,EAAE;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}