{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\ContextMenu.tsx\";\nimport clsx from \"clsx\";\nimport { Popover } from \"./Popover\";\nimport { t } from \"../i18n\";\nimport \"./ContextMenu.scss\";\nimport { getShortcutFromShortcutName } from \"../actions/shortcuts\";\nimport { useExcalidrawAppState, useExcalidrawElements, useExcalidrawSetAppState } from \"./App\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CONTEXT_MENU_SEPARATOR = \"separator\";\nexport const ContextMenu = /*#__PURE__*/React.memo(_ref => {\n  let {\n    actionManager,\n    items,\n    top,\n    left\n  } = _ref;\n  const appState = useExcalidrawAppState();\n  const setAppState = useExcalidrawSetAppState();\n  const elements = useExcalidrawElements();\n  const filteredItems = items.reduce((acc, item) => {\n    if (item && (item === CONTEXT_MENU_SEPARATOR || !item.predicate || item.predicate(elements, appState, actionManager.app.props, actionManager.app))) {\n      acc.push(item);\n    }\n    return acc;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Popover, {\n    onCloseRequest: () => setAppState({\n      contextMenu: null\n    }),\n    top: top,\n    left: left,\n    fitInViewport: true,\n    offsetLeft: appState.offsetLeft,\n    offsetTop: appState.offsetTop,\n    viewportWidth: appState.width,\n    viewportHeight: appState.height,\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"context-menu\",\n      onContextMenu: event => event.preventDefault(),\n      children: filteredItems.map((item, idx) => {\n        var _item$checked;\n        if (item === CONTEXT_MENU_SEPARATOR) {\n          if (!filteredItems[idx - 1] || filteredItems[idx - 1] === CONTEXT_MENU_SEPARATOR) {\n            return null;\n          }\n          return /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"context-menu-item-separator\"\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 22\n          }, this);\n        }\n        const actionName = item.name;\n        let label = \"\";\n        if (item.contextItemLabel) {\n          if (typeof item.contextItemLabel === \"function\") {\n            label = t(item.contextItemLabel(elements, appState, actionManager.app));\n          } else {\n            label = t(item.contextItemLabel);\n          }\n        }\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          \"data-testid\": actionName,\n          onClick: () => {\n            // we need update state before executing the action in case\n            // the action uses the appState it's being passed (that still\n            // contains a defined contextMenu) to return the next state.\n            setAppState({\n              contextMenu: null\n            }, () => {\n              actionManager.executeAction(item, \"contextMenu\");\n            });\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: clsx(\"context-menu-item\", {\n              dangerous: actionName === \"deleteSelectedElements\",\n              checkmark: (_item$checked = item.checked) === null || _item$checked === void 0 ? void 0 : _item$checked.call(item, appState)\n            }),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"context-menu-item__label\",\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"kbd\", {\n              className: \"context-menu-item__shortcut\",\n              children: actionName ? getShortcutFromShortcutName(actionName) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n});","map":{"version":3,"names":["clsx","Popover","t","getShortcutFromShortcutName","useExcalidrawAppState","useExcalidrawElements","useExcalidrawSetAppState","React","jsxDEV","_jsxDEV","CONTEXT_MENU_SEPARATOR","ContextMenu","memo","_ref","actionManager","items","top","left","appState","setAppState","elements","filteredItems","reduce","acc","item","predicate","app","props","push","onCloseRequest","contextMenu","fitInViewport","offsetLeft","offsetTop","viewportWidth","width","viewportHeight","height","children","className","onContextMenu","event","preventDefault","map","idx","_item$checked","fileName","_jsxFileName","lineNumber","columnNumber","actionName","name","label","contextItemLabel","onClick","executeAction","dangerous","checkmark","checked","call"],"sources":["D:/project/excalidraw-cn/src/components/ContextMenu.tsx"],"sourcesContent":["import clsx from \"clsx\";\nimport { Popover } from \"./Popover\";\nimport { t } from \"../i18n\";\n\nimport \"./ContextMenu.scss\";\nimport {\n  getShortcutFromShortcutName,\n  ShortcutName,\n} from \"../actions/shortcuts\";\nimport { Action } from \"../actions/types\";\nimport { ActionManager } from \"../actions/manager\";\nimport {\n  useExcalidrawAppState,\n  useExcalidrawElements,\n  useExcalidrawSetAppState,\n} from \"./App\";\nimport React from \"react\";\n\nexport type ContextMenuItem = typeof CONTEXT_MENU_SEPARATOR | Action;\n\nexport type ContextMenuItems = (ContextMenuItem | false | null | undefined)[];\n\ntype ContextMenuProps = {\n  actionManager: ActionManager;\n  items: ContextMenuItems;\n  top: number;\n  left: number;\n};\n\nexport const CONTEXT_MENU_SEPARATOR = \"separator\";\n\nexport const ContextMenu = React.memo(\n  ({ actionManager, items, top, left }: ContextMenuProps) => {\n    const appState = useExcalidrawAppState();\n    const setAppState = useExcalidrawSetAppState();\n    const elements = useExcalidrawElements();\n\n    const filteredItems = items.reduce((acc: ContextMenuItem[], item) => {\n      if (\n        item &&\n        (item === CONTEXT_MENU_SEPARATOR ||\n          !item.predicate ||\n          item.predicate(\n            elements,\n            appState,\n            actionManager.app.props,\n            actionManager.app,\n          ))\n      ) {\n        acc.push(item);\n      }\n      return acc;\n    }, []);\n\n    return (\n      <Popover\n        onCloseRequest={() => setAppState({ contextMenu: null })}\n        top={top}\n        left={left}\n        fitInViewport={true}\n        offsetLeft={appState.offsetLeft}\n        offsetTop={appState.offsetTop}\n        viewportWidth={appState.width}\n        viewportHeight={appState.height}\n      >\n        <ul\n          className=\"context-menu\"\n          onContextMenu={(event) => event.preventDefault()}\n        >\n          {filteredItems.map((item, idx) => {\n            if (item === CONTEXT_MENU_SEPARATOR) {\n              if (\n                !filteredItems[idx - 1] ||\n                filteredItems[idx - 1] === CONTEXT_MENU_SEPARATOR\n              ) {\n                return null;\n              }\n              return <hr key={idx} className=\"context-menu-item-separator\" />;\n            }\n\n            const actionName = item.name;\n            let label = \"\";\n            if (item.contextItemLabel) {\n              if (typeof item.contextItemLabel === \"function\") {\n                label = t(\n                  item.contextItemLabel(elements, appState, actionManager.app),\n                );\n              } else {\n                label = t(item.contextItemLabel);\n              }\n            }\n\n            return (\n              <li\n                key={idx}\n                data-testid={actionName}\n                onClick={() => {\n                  // we need update state before executing the action in case\n                  // the action uses the appState it's being passed (that still\n                  // contains a defined contextMenu) to return the next state.\n                  setAppState({ contextMenu: null }, () => {\n                    actionManager.executeAction(item, \"contextMenu\");\n                  });\n                }}\n              >\n                <button\n                  className={clsx(\"context-menu-item\", {\n                    dangerous: actionName === \"deleteSelectedElements\",\n                    checkmark: item.checked?.(appState),\n                  })}\n                >\n                  <div className=\"context-menu-item__label\">{label}</div>\n                  <kbd className=\"context-menu-item__shortcut\">\n                    {actionName\n                      ? getShortcutFromShortcutName(actionName as ShortcutName)\n                      : \"\"}\n                  </kbd>\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </Popover>\n    );\n  },\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}