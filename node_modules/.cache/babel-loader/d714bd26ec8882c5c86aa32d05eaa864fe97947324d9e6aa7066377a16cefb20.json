{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\actions\\\\actionExport.tsx\";\nimport { questionCircle, saveAs } from \"../components/icons\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { DarkModeToggle } from \"../components/DarkModeToggle\";\nimport { loadFromJSON, saveAsJSON } from \"../data\";\nimport { resaveAsImageWithScene } from \"../data/resave\";\nimport { t } from \"../i18n\";\nimport { useDevice } from \"../components/App\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { CheckboxItem } from \"../components/CheckboxItem\";\nimport { getExportSize } from \"../scene/export\";\nimport { DEFAULT_EXPORT_PADDING, EXPORT_SCALES, THEME } from \"../constants\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isImageFileHandle } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport \"../components/ToolIcon.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  trackEvent: false,\n  perform: (_elements, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        name: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref => {\n    var _data$ignoreFocus;\n    let {\n      appState,\n      updateData,\n      appProps,\n      data\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(ProjectName, {\n      label: t(\"labels.fileTitle\"),\n      value: appState.name || \"Unnamed\",\n      onChange: name => updateData(name),\n      isNameEditable: typeof appProps.name === \"undefined\" && !appState.viewModeEnabled,\n      ignoreFocus: (_data$ignoreFocus = data === null || data === void 0 ? void 0 : data.ignoreFocus) !== null && _data$ignoreFocus !== void 0 ? _data$ignoreFocus : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeExportScale = register({\n  name: \"changeExportScale\",\n  trackEvent: {\n    category: \"export\",\n    action: \"scale\"\n  },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        exportScale: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref2 => {\n    let {\n      elements: allElements,\n      appState,\n      updateData\n    } = _ref2;\n    const elements = getNonDeletedElements(allElements);\n    const exportSelected = isSomeElementSelected(elements, appState);\n    const exportedElements = exportSelected ? getSelectedElements(elements, appState) : elements;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: EXPORT_SCALES.map(s => {\n        const [width, height] = getExportSize(exportedElements, DEFAULT_EXPORT_PADDING, s);\n        const scaleButtonTitle = `${t(\"buttons.scale\")} ${s}x (${width}x${height})`;\n        return /*#__PURE__*/_jsxDEV(ToolButton, {\n          size: \"small\",\n          type: \"radio\",\n          icon: `${s}x`,\n          name: \"export-canvas-scale\",\n          title: scaleButtonTitle,\n          \"aria-label\": scaleButtonTitle,\n          id: \"export-canvas-scale\",\n          checked: s === appState.exportScale,\n          onChange: () => updateData(s)\n        }, s, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false);\n  }\n});\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  trackEvent: {\n    category: \"export\",\n    action: \"toggleBackground\"\n  },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        exportBackground: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref3 => {\n    let {\n      appState,\n      updateData\n    } = _ref3;\n    return /*#__PURE__*/_jsxDEV(CheckboxItem, {\n      checked: appState.exportBackground,\n      onChange: checked => updateData(checked),\n      children: t(\"labels.withBackground\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeExportEmbedScene = register({\n  name: \"changeExportEmbedScene\",\n  trackEvent: {\n    category: \"export\",\n    action: \"embedScene\"\n  },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        exportEmbedScene: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref4 => {\n    let {\n      appState,\n      updateData\n    } = _ref4;\n    return /*#__PURE__*/_jsxDEV(CheckboxItem, {\n      checked: appState.exportEmbedScene,\n      onChange: checked => updateData(checked),\n      children: [t(\"labels.exportEmbedScene\"), /*#__PURE__*/_jsxDEV(Tooltip, {\n        label: t(\"labels.exportEmbedScene_details\"),\n        long: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"excalidraw-tooltip-icon\",\n          children: questionCircle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionSaveToActiveFile = register({\n  name: \"saveToActiveFile\",\n  trackEvent: {\n    category: \"export\"\n  },\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.saveToActiveFile && !!appState.fileHandle && !appState.viewModeEnabled;\n  },\n  perform: async (elements, appState, value, app) => {\n    const fileHandleExists = !!appState.fileHandle;\n    try {\n      const {\n        fileHandle\n      } = isImageFileHandle(appState.fileHandle) ? await resaveAsImageWithScene(elements, appState, app.files) : await saveAsJSON(elements, appState, app.files);\n      return {\n        commitToHistory: false,\n        appState: {\n          ...appState,\n          fileHandle,\n          toast: fileHandleExists ? {\n            message: fileHandle !== null && fileHandle !== void 0 && fileHandle.name ? t(\"toast.fileSavedToFilename\").replace(\"{filename}\", `\"${fileHandle.name}\"`) : t(\"toast.fileSaved\")\n          } : null\n        }\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return {\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey\n});\nexport const actionSaveFileToDisk = register({\n  name: \"saveFileToDisk\",\n  viewMode: true,\n  trackEvent: {\n    category: \"export\"\n  },\n  perform: async (elements, appState, value, app) => {\n    try {\n      const {\n        fileHandle\n      } = await saveAsJSON(elements, {\n        ...appState,\n        fileHandle: null\n      }, app.files);\n      return {\n        commitToHistory: false,\n        appState: {\n          ...appState,\n          fileHandle\n        }\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return {\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],\n  PanelComponent: _ref5 => {\n    let {\n      updateData\n    } = _ref5;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      icon: saveAs,\n      title: t(\"buttons.saveAs\"),\n      \"aria-label\": t(\"buttons.saveAs\"),\n      showAriaLabel: useDevice().isMobile,\n      hidden: !nativeFileSystemSupported,\n      onClick: () => updateData(null),\n      \"data-testid\": \"save-as-button\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  trackEvent: {\n    category: \"export\"\n  },\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.loadScene && !appState.viewModeEnabled;\n  },\n  perform: async (elements, appState, _, app) => {\n    try {\n      const {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files\n      } = await loadFromJSON(appState, elements);\n      return {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files,\n        commitToHistory: true\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\") {\n        console.warn(error);\n        return false;\n      }\n      return {\n        elements,\n        appState: {\n          ...appState,\n          errorMessage: error.message\n        },\n        files: app.files,\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O\n});\nexport const actionExportWithDarkMode = register({\n  name: \"exportWithDarkMode\",\n  trackEvent: {\n    category: \"export\",\n    action: \"toggleTheme\"\n  },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        exportWithDarkMode: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref6 => {\n    let {\n      appState,\n      updateData\n    } = _ref6;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginTop: \"-45px\",\n        marginBottom: \"10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(DarkModeToggle, {\n        value: appState.exportWithDarkMode ? THEME.DARK : THEME.LIGHT,\n        onChange: theme => {\n          updateData(theme === THEME.DARK);\n        },\n        title: t(\"labels.toggleExportColorScheme\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 5\n    }, this);\n  }\n});","map":{"version":3,"names":["questionCircle","saveAs","ProjectName","ToolButton","Tooltip","DarkModeToggle","loadFromJSON","saveAsJSON","resaveAsImageWithScene","t","useDevice","KEYS","register","CheckboxItem","getExportSize","DEFAULT_EXPORT_PADDING","EXPORT_SCALES","THEME","getSelectedElements","isSomeElementSelected","getNonDeletedElements","isImageFileHandle","nativeFileSystemSupported","jsxDEV","_jsxDEV","Fragment","_Fragment","actionChangeProjectName","name","trackEvent","perform","_elements","appState","value","commitToHistory","PanelComponent","_ref","_data$ignoreFocus","updateData","appProps","data","label","onChange","isNameEditable","viewModeEnabled","ignoreFocus","fileName","_jsxFileName","lineNumber","columnNumber","actionChangeExportScale","category","action","exportScale","_ref2","elements","allElements","exportSelected","exportedElements","children","map","s","width","height","scaleButtonTitle","size","type","icon","title","id","checked","actionChangeExportBackground","exportBackground","_ref3","actionChangeExportEmbedScene","exportEmbedScene","_ref4","long","className","actionSaveToActiveFile","predicate","props","app","UIOptions","canvasActions","saveToActiveFile","fileHandle","fileHandleExists","files","toast","message","replace","error","console","warn","keyTest","event","key","S","CTRL_OR_CMD","shiftKey","actionSaveFileToDisk","viewMode","_ref5","showAriaLabel","isMobile","hidden","onClick","actionLoadScene","loadScene","_","loadedElements","loadedAppState","errorMessage","O","actionExportWithDarkMode","exportWithDarkMode","_ref6","style","display","justifyContent","marginTop","marginBottom","DARK","LIGHT","theme"],"sources":["D:/project/excalidraw-cn/src/actions/actionExport.tsx"],"sourcesContent":["import { questionCircle, saveAs } from \"../components/icons\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { DarkModeToggle } from \"../components/DarkModeToggle\";\nimport { loadFromJSON, saveAsJSON } from \"../data\";\nimport { resaveAsImageWithScene } from \"../data/resave\";\nimport { t } from \"../i18n\";\nimport { useDevice } from \"../components/App\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { CheckboxItem } from \"../components/CheckboxItem\";\nimport { getExportSize } from \"../scene/export\";\nimport { DEFAULT_EXPORT_PADDING, EXPORT_SCALES, THEME } from \"../constants\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport { isImageFileHandle } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport { Theme } from \"../element/types\";\n\nimport \"../components/ToolIcon.scss\";\n\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  trackEvent: false,\n  perform: (_elements, appState, value) => {\n    return { appState: { ...appState, name: value }, commitToHistory: false };\n  },\n  PanelComponent: ({ appState, updateData, appProps, data }) => (\n    <ProjectName\n      label={t(\"labels.fileTitle\")}\n      value={appState.name || \"Unnamed\"}\n      onChange={(name: string) => updateData(name)}\n      isNameEditable={\n        typeof appProps.name === \"undefined\" && !appState.viewModeEnabled\n      }\n      ignoreFocus={data?.ignoreFocus ?? false}\n    />\n  ),\n});\n\nexport const actionChangeExportScale = register({\n  name: \"changeExportScale\",\n  trackEvent: { category: \"export\", action: \"scale\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportScale: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ elements: allElements, appState, updateData }) => {\n    const elements = getNonDeletedElements(allElements);\n    const exportSelected = isSomeElementSelected(elements, appState);\n    const exportedElements = exportSelected\n      ? getSelectedElements(elements, appState)\n      : elements;\n\n    return (\n      <>\n        {EXPORT_SCALES.map((s) => {\n          const [width, height] = getExportSize(\n            exportedElements,\n            DEFAULT_EXPORT_PADDING,\n            s,\n          );\n\n          const scaleButtonTitle = `${t(\n            \"buttons.scale\",\n          )} ${s}x (${width}x${height})`;\n\n          return (\n            <ToolButton\n              key={s}\n              size=\"small\"\n              type=\"radio\"\n              icon={`${s}x`}\n              name=\"export-canvas-scale\"\n              title={scaleButtonTitle}\n              aria-label={scaleButtonTitle}\n              id=\"export-canvas-scale\"\n              checked={s === appState.exportScale}\n              onChange={() => updateData(s)}\n            />\n          );\n        })}\n      </>\n    );\n  },\n});\n\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  trackEvent: { category: \"export\", action: \"toggleBackground\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportBackground: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <CheckboxItem\n      checked={appState.exportBackground}\n      onChange={(checked) => updateData(checked)}\n    >\n      {t(\"labels.withBackground\")}\n    </CheckboxItem>\n  ),\n});\n\nexport const actionChangeExportEmbedScene = register({\n  name: \"changeExportEmbedScene\",\n  trackEvent: { category: \"export\", action: \"embedScene\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportEmbedScene: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <CheckboxItem\n      checked={appState.exportEmbedScene}\n      onChange={(checked) => updateData(checked)}\n    >\n      {t(\"labels.exportEmbedScene\")}\n      <Tooltip label={t(\"labels.exportEmbedScene_details\")} long={true}>\n        <div className=\"excalidraw-tooltip-icon\">{questionCircle}</div>\n      </Tooltip>\n    </CheckboxItem>\n  ),\n});\n\nexport const actionSaveToActiveFile = register({\n  name: \"saveToActiveFile\",\n  trackEvent: { category: \"export\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.saveToActiveFile &&\n      !!appState.fileHandle &&\n      !appState.viewModeEnabled\n    );\n  },\n  perform: async (elements, appState, value, app) => {\n    const fileHandleExists = !!appState.fileHandle;\n\n    try {\n      const { fileHandle } = isImageFileHandle(appState.fileHandle)\n        ? await resaveAsImageWithScene(elements, appState, app.files)\n        : await saveAsJSON(elements, appState, app.files);\n\n      return {\n        commitToHistory: false,\n        appState: {\n          ...appState,\n          fileHandle,\n          toast: fileHandleExists\n            ? {\n                message: fileHandle?.name\n                  ? t(\"toast.fileSavedToFilename\").replace(\n                      \"{filename}\",\n                      `\"${fileHandle.name}\"`,\n                    )\n                  : t(\"toast.fileSaved\"),\n              }\n            : null,\n        },\n      };\n    } catch (error: any) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return { commitToHistory: false };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey,\n});\n\nexport const actionSaveFileToDisk = register({\n  name: \"saveFileToDisk\",\n  viewMode: true,\n  trackEvent: { category: \"export\" },\n  perform: async (elements, appState, value, app) => {\n    try {\n      const { fileHandle } = await saveAsJSON(\n        elements,\n        {\n          ...appState,\n          fileHandle: null,\n        },\n        app.files,\n      );\n      return { commitToHistory: false, appState: { ...appState, fileHandle } };\n    } catch (error: any) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      } else {\n        console.warn(error);\n      }\n      return { commitToHistory: false };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={saveAs}\n      title={t(\"buttons.saveAs\")}\n      aria-label={t(\"buttons.saveAs\")}\n      showAriaLabel={useDevice().isMobile}\n      hidden={!nativeFileSystemSupported}\n      onClick={() => updateData(null)}\n      data-testid=\"save-as-button\"\n    />\n  ),\n});\n\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  trackEvent: { category: \"export\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.loadScene && !appState.viewModeEnabled\n    );\n  },\n  perform: async (elements, appState, _, app) => {\n    try {\n      const {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files,\n      } = await loadFromJSON(appState, elements);\n      return {\n        elements: loadedElements,\n        appState: loadedAppState,\n        files,\n        commitToHistory: true,\n      };\n    } catch (error: any) {\n      if (error?.name === \"AbortError\") {\n        console.warn(error);\n        return false;\n      }\n      return {\n        elements,\n        appState: { ...appState, errorMessage: error.message },\n        files: app.files,\n        commitToHistory: false,\n      };\n    }\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O,\n});\n\nexport const actionExportWithDarkMode = register({\n  name: \"exportWithDarkMode\",\n  trackEvent: { category: \"export\", action: \"toggleTheme\" },\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportWithDarkMode: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        marginTop: \"-45px\",\n        marginBottom: \"10px\",\n      }}\n    >\n      <DarkModeToggle\n        value={appState.exportWithDarkMode ? THEME.DARK : THEME.LIGHT}\n        onChange={(theme: Theme) => {\n          updateData(theme === THEME.DARK);\n        }}\n        title={t(\"labels.toggleExportColorScheme\")}\n      />\n    </div>\n  ),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}