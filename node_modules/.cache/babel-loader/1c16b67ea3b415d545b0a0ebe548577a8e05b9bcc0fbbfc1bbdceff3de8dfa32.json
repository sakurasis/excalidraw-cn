{"ast":null,"code":"import _toConsumableArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _createForOfIteratorHelper from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _defineProperty from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{getSelectedElements}from\"./scene\";import{getBoundTextElement}from\"./element/textElement\";import{makeNextSelectedElementIds}from\"./scene/selection\";export var selectGroup=function selectGroup(groupId,appState,elements){var elementsInGroup=elements.filter(function(element){return element.groupIds.includes(groupId);});if(elementsInGroup.length<2){if(appState.selectedGroupIds[groupId]||appState.editingGroupId===groupId){return _objectSpread(_objectSpread({},appState),{},{selectedGroupIds:_objectSpread(_objectSpread({},appState.selectedGroupIds),{},_defineProperty({},groupId,false)),editingGroupId:null});}return appState;}return _objectSpread(_objectSpread({},appState),{},{selectedGroupIds:_objectSpread(_objectSpread({},appState.selectedGroupIds),{},_defineProperty({},groupId,true)),selectedElementIds:_objectSpread(_objectSpread({},appState.selectedElementIds),Object.fromEntries(elementsInGroup.map(function(element){return[element.id,true];})))});};/**\n * If the element's group is selected, don't render an individual\n * selection border around it.\n */export var isSelectedViaGroup=function isSelectedViaGroup(appState,element){return getSelectedGroupForElement(appState,element)!=null;};export var getSelectedGroupForElement=function getSelectedGroupForElement(appState,element){return element.groupIds.filter(function(groupId){return groupId!==appState.editingGroupId;}).find(function(groupId){return appState.selectedGroupIds[groupId];});};export var getSelectedGroupIds=function getSelectedGroupIds(appState){return Object.entries(appState.selectedGroupIds).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),groupId=_ref2[0],isSelected=_ref2[1];return isSelected;}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),groupId=_ref4[0],isSelected=_ref4[1];return groupId;});};/**\n * When you select an element, you often want to actually select the whole group it's in, unless\n * you're currently editing that group.\n */export var selectGroupsForSelectedElements=function selectGroupsForSelectedElements(appState,elements,prevAppState,app){var nextAppState=_objectSpread(_objectSpread({},appState),{},{selectedGroupIds:{}});var selectedElements=app?app.scene.getSelectedElements({selectedElementIds:appState.selectedElementIds,// supplying elements explicitly in case we're passed non-state elements\nelements:elements}):getSelectedElements(elements,appState);if(!selectedElements.length){return _objectSpread(_objectSpread({},nextAppState),{},{editingGroupId:null,selectedElementIds:makeNextSelectedElementIds(nextAppState.selectedElementIds,prevAppState)});}var _iterator=_createForOfIteratorHelper(selectedElements),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var selectedElement=_step.value;var groupIds=selectedElement.groupIds;if(appState.editingGroupId){// handle the case where a group is nested within a group\nvar indexOfEditingGroup=groupIds.indexOf(appState.editingGroupId);if(indexOfEditingGroup>-1){groupIds=groupIds.slice(0,indexOfEditingGroup);}}if(groupIds.length>0){var _groupId=groupIds[groupIds.length-1];nextAppState=selectGroup(_groupId,nextAppState,elements);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}nextAppState.selectedElementIds=makeNextSelectedElementIds(nextAppState.selectedElementIds,prevAppState);return nextAppState;};// given a list of elements, return the the actual group ids that should be selected\n// or used to update the elements\nexport var selectGroupsFromGivenElements=function selectGroupsFromGivenElements(elements,appState){var nextAppState=_objectSpread(_objectSpread({},appState),{},{selectedGroupIds:{}});var _iterator2=_createForOfIteratorHelper(elements),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var element=_step2.value;var groupIds=element.groupIds;if(appState.editingGroupId){var indexOfEditingGroup=groupIds.indexOf(appState.editingGroupId);if(indexOfEditingGroup>-1){groupIds=groupIds.slice(0,indexOfEditingGroup);}}if(groupIds.length>0){var _groupId2=groupIds[groupIds.length-1];nextAppState=selectGroup(_groupId2,nextAppState,elements);}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return nextAppState.selectedGroupIds;};export var editGroupForSelectedElement=function editGroupForSelectedElement(appState,element){return _objectSpread(_objectSpread({},appState),{},{editingGroupId:element.groupIds.length?element.groupIds[0]:null,selectedGroupIds:{},selectedElementIds:_defineProperty({},element.id,true)});};export var isElementInGroup=function isElementInGroup(element,groupId){return element.groupIds.includes(groupId);};export var getElementsInGroup=function getElementsInGroup(elements,groupId){return elements.filter(function(element){return isElementInGroup(element,groupId);});};export var getSelectedGroupIdForElement=function getSelectedGroupIdForElement(element,selectedGroupIds){return element.groupIds.find(function(groupId){return selectedGroupIds[groupId];});};export var getNewGroupIdsForDuplication=function getNewGroupIdsForDuplication(groupIds,editingGroupId,mapper){var copy=_toConsumableArray(groupIds);var positionOfEditingGroupId=editingGroupId?groupIds.indexOf(editingGroupId):-1;var endIndex=positionOfEditingGroupId>-1?positionOfEditingGroupId:groupIds.length;for(var index=0;index<endIndex;index++){copy[index]=mapper(copy[index]);}return copy;};export var addToGroup=function addToGroup(prevGroupIds,newGroupId,editingGroupId){// insert before the editingGroupId, or push to the end.\nvar groupIds=_toConsumableArray(prevGroupIds);var positionOfEditingGroupId=editingGroupId?groupIds.indexOf(editingGroupId):-1;var positionToInsert=positionOfEditingGroupId>-1?positionOfEditingGroupId:groupIds.length;groupIds.splice(positionToInsert,0,newGroupId);return groupIds;};export var removeFromSelectedGroups=function removeFromSelectedGroups(groupIds,selectedGroupIds){return groupIds.filter(function(groupId){return!selectedGroupIds[groupId];});};export var getMaximumGroups=function getMaximumGroups(elements){var groups=new Map();elements.forEach(function(element){var groupId=element.groupIds.length===0?element.id:element.groupIds[element.groupIds.length-1];var currentGroupMembers=groups.get(groupId)||[];// Include bound text if present when grouping\nvar boundTextElement=getBoundTextElement(element);if(boundTextElement){currentGroupMembers.push(boundTextElement);}groups.set(groupId,[].concat(_toConsumableArray(currentGroupMembers),[element]));});return Array.from(groups.values());};export var elementsAreInSameGroup=function elementsAreInSameGroup(elements){var allGroups=elements.flatMap(function(element){return element.groupIds;});var groupCount=new Map();var maxGroup=0;var _iterator3=_createForOfIteratorHelper(allGroups),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _groupCount$get;var group=_step3.value;groupCount.set(group,((_groupCount$get=groupCount.get(group))!==null&&_groupCount$get!==void 0?_groupCount$get:0)+1);if(groupCount.get(group)>maxGroup){maxGroup=groupCount.get(group);}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}return maxGroup===elements.length;};","map":{"version":3,"names":["getSelectedElements","getBoundTextElement","makeNextSelectedElementIds","selectGroup","groupId","appState","elements","elementsInGroup","filter","element","groupIds","includes","length","selectedGroupIds","editingGroupId","_objectSpread","_defineProperty","selectedElementIds","Object","fromEntries","map","id","isSelectedViaGroup","getSelectedGroupForElement","find","getSelectedGroupIds","entries","_ref","_ref2","_slicedToArray","isSelected","_ref3","_ref4","selectGroupsForSelectedElements","prevAppState","app","nextAppState","selectedElements","scene","_iterator","_createForOfIteratorHelper","_step","s","n","done","selectedElement","value","indexOfEditingGroup","indexOf","slice","err","e","f","selectGroupsFromGivenElements","_iterator2","_step2","editGroupForSelectedElement","isElementInGroup","getElementsInGroup","getSelectedGroupIdForElement","getNewGroupIdsForDuplication","mapper","copy","_toConsumableArray","positionOfEditingGroupId","endIndex","index","addToGroup","prevGroupIds","newGroupId","positionToInsert","splice","removeFromSelectedGroups","getMaximumGroups","groups","Map","forEach","currentGroupMembers","get","boundTextElement","push","set","concat","Array","from","values","elementsAreInSameGroup","allGroups","flatMap","groupCount","maxGroup","_iterator3","_step3","_groupCount$get","group"],"sources":["D:/project/excalidraw-cn/src/groups.ts"],"sourcesContent":["import {\n  GroupId,\n  ExcalidrawElement,\n  NonDeleted,\n  NonDeletedExcalidrawElement,\n} from \"./element/types\";\nimport { AppClassProperties, AppState } from \"./types\";\nimport { getSelectedElements } from \"./scene\";\nimport { getBoundTextElement } from \"./element/textElement\";\nimport { makeNextSelectedElementIds } from \"./scene/selection\";\n\nexport const selectGroup = (\n  groupId: GroupId,\n  appState: AppState,\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n): AppState => {\n  const elementsInGroup = elements.filter((element) =>\n    element.groupIds.includes(groupId),\n  );\n\n  if (elementsInGroup.length < 2) {\n    if (\n      appState.selectedGroupIds[groupId] ||\n      appState.editingGroupId === groupId\n    ) {\n      return {\n        ...appState,\n        selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: false },\n        editingGroupId: null,\n      };\n    }\n    return appState;\n  }\n\n  return {\n    ...appState,\n    selectedGroupIds: { ...appState.selectedGroupIds, [groupId]: true },\n    selectedElementIds: {\n      ...appState.selectedElementIds,\n      ...Object.fromEntries(\n        elementsInGroup.map((element) => [element.id, true]),\n      ),\n    },\n  };\n};\n\n/**\n * If the element's group is selected, don't render an individual\n * selection border around it.\n */\nexport const isSelectedViaGroup = (\n  appState: AppState,\n  element: ExcalidrawElement,\n) => getSelectedGroupForElement(appState, element) != null;\n\nexport const getSelectedGroupForElement = (\n  appState: AppState,\n  element: ExcalidrawElement,\n) =>\n  element.groupIds\n    .filter((groupId) => groupId !== appState.editingGroupId)\n    .find((groupId) => appState.selectedGroupIds[groupId]);\n\nexport const getSelectedGroupIds = (appState: AppState): GroupId[] =>\n  Object.entries(appState.selectedGroupIds)\n    .filter(([groupId, isSelected]) => isSelected)\n    .map(([groupId, isSelected]) => groupId);\n\n/**\n * When you select an element, you often want to actually select the whole group it's in, unless\n * you're currently editing that group.\n */\nexport const selectGroupsForSelectedElements = (\n  appState: AppState,\n  elements: readonly NonDeletedExcalidrawElement[],\n  prevAppState: AppState,\n  /**\n   * supply null in cases where you don't have access to App instance and\n   * you don't care about optimizing selectElements retrieval\n   */\n  app: AppClassProperties | null,\n): AppState => {\n  let nextAppState: AppState = { ...appState, selectedGroupIds: {} };\n\n  const selectedElements = app\n    ? app.scene.getSelectedElements({\n        selectedElementIds: appState.selectedElementIds,\n        // supplying elements explicitly in case we're passed non-state elements\n        elements,\n      })\n    : getSelectedElements(elements, appState);\n\n  if (!selectedElements.length) {\n    return {\n      ...nextAppState,\n      editingGroupId: null,\n      selectedElementIds: makeNextSelectedElementIds(\n        nextAppState.selectedElementIds,\n        prevAppState,\n      ),\n    };\n  }\n\n  for (const selectedElement of selectedElements) {\n    let groupIds = selectedElement.groupIds;\n    if (appState.editingGroupId) {\n      // handle the case where a group is nested within a group\n      const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);\n      if (indexOfEditingGroup > -1) {\n        groupIds = groupIds.slice(0, indexOfEditingGroup);\n      }\n    }\n    if (groupIds.length > 0) {\n      const groupId = groupIds[groupIds.length - 1];\n      nextAppState = selectGroup(groupId, nextAppState, elements);\n    }\n  }\n\n  nextAppState.selectedElementIds = makeNextSelectedElementIds(\n    nextAppState.selectedElementIds,\n    prevAppState,\n  );\n\n  return nextAppState;\n};\n\n// given a list of elements, return the the actual group ids that should be selected\n// or used to update the elements\nexport const selectGroupsFromGivenElements = (\n  elements: readonly NonDeleted<ExcalidrawElement>[],\n  appState: AppState,\n) => {\n  let nextAppState: AppState = { ...appState, selectedGroupIds: {} };\n\n  for (const element of elements) {\n    let groupIds = element.groupIds;\n    if (appState.editingGroupId) {\n      const indexOfEditingGroup = groupIds.indexOf(appState.editingGroupId);\n      if (indexOfEditingGroup > -1) {\n        groupIds = groupIds.slice(0, indexOfEditingGroup);\n      }\n    }\n    if (groupIds.length > 0) {\n      const groupId = groupIds[groupIds.length - 1];\n      nextAppState = selectGroup(groupId, nextAppState, elements);\n    }\n  }\n\n  return nextAppState.selectedGroupIds;\n};\n\nexport const editGroupForSelectedElement = (\n  appState: AppState,\n  element: NonDeleted<ExcalidrawElement>,\n): AppState => {\n  return {\n    ...appState,\n    editingGroupId: element.groupIds.length ? element.groupIds[0] : null,\n    selectedGroupIds: {},\n    selectedElementIds: {\n      [element.id]: true,\n    },\n  };\n};\n\nexport const isElementInGroup = (element: ExcalidrawElement, groupId: string) =>\n  element.groupIds.includes(groupId);\n\nexport const getElementsInGroup = (\n  elements: readonly ExcalidrawElement[],\n  groupId: string,\n) => elements.filter((element) => isElementInGroup(element, groupId));\n\nexport const getSelectedGroupIdForElement = (\n  element: ExcalidrawElement,\n  selectedGroupIds: { [groupId: string]: boolean },\n) => element.groupIds.find((groupId) => selectedGroupIds[groupId]);\n\nexport const getNewGroupIdsForDuplication = (\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  editingGroupId: AppState[\"editingGroupId\"],\n  mapper: (groupId: GroupId) => GroupId,\n) => {\n  const copy = [...groupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const endIndex =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  for (let index = 0; index < endIndex; index++) {\n    copy[index] = mapper(copy[index]);\n  }\n\n  return copy;\n};\n\nexport const addToGroup = (\n  prevGroupIds: ExcalidrawElement[\"groupIds\"],\n  newGroupId: GroupId,\n  editingGroupId: AppState[\"editingGroupId\"],\n) => {\n  // insert before the editingGroupId, or push to the end.\n  const groupIds = [...prevGroupIds];\n  const positionOfEditingGroupId = editingGroupId\n    ? groupIds.indexOf(editingGroupId)\n    : -1;\n  const positionToInsert =\n    positionOfEditingGroupId > -1 ? positionOfEditingGroupId : groupIds.length;\n  groupIds.splice(positionToInsert, 0, newGroupId);\n  return groupIds;\n};\n\nexport const removeFromSelectedGroups = (\n  groupIds: ExcalidrawElement[\"groupIds\"],\n  selectedGroupIds: { [groupId: string]: boolean },\n) => groupIds.filter((groupId) => !selectedGroupIds[groupId]);\n\nexport const getMaximumGroups = (\n  elements: ExcalidrawElement[],\n): ExcalidrawElement[][] => {\n  const groups: Map<String, ExcalidrawElement[]> = new Map<\n    String,\n    ExcalidrawElement[]\n  >();\n\n  elements.forEach((element: ExcalidrawElement) => {\n    const groupId =\n      element.groupIds.length === 0\n        ? element.id\n        : element.groupIds[element.groupIds.length - 1];\n\n    const currentGroupMembers = groups.get(groupId) || [];\n\n    // Include bound text if present when grouping\n    const boundTextElement = getBoundTextElement(element);\n    if (boundTextElement) {\n      currentGroupMembers.push(boundTextElement);\n    }\n    groups.set(groupId, [...currentGroupMembers, element]);\n  });\n\n  return Array.from(groups.values());\n};\n\nexport const elementsAreInSameGroup = (elements: ExcalidrawElement[]) => {\n  const allGroups = elements.flatMap((element) => element.groupIds);\n  const groupCount = new Map<string, number>();\n  let maxGroup = 0;\n\n  for (const group of allGroups) {\n    groupCount.set(group, (groupCount.get(group) ?? 0) + 1);\n    if (groupCount.get(group)! > maxGroup) {\n      maxGroup = groupCount.get(group)!;\n    }\n  }\n\n  return maxGroup === elements.length;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}