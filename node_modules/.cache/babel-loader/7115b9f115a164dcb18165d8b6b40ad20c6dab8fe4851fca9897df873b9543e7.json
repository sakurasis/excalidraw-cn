{"ast":null,"code":"import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class ZigZagLineFiller {\n  constructor(helper) {\n    this.helper = helper;\n  }\n  fillPolygons(polygonList, o) {\n    const gap = o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap;\n    const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n    o = Object.assign({}, o, {\n      hachureGap: gap + zo\n    });\n    const lines = polygonHachureLines(polygonList, o);\n    return {\n      type: 'fillSketch',\n      ops: this.zigzagLines(lines, zo, o)\n    };\n  }\n  zigzagLines(lines, zo, o) {\n    const ops = [];\n    lines.forEach(line => {\n      const length = lineLength(line);\n      const count = Math.round(length / (2 * zo));\n      let p1 = line[0];\n      let p2 = line[1];\n      if (p1[0] > p2[0]) {\n        p1 = line[1];\n        p2 = line[0];\n      }\n      const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n      for (let i = 0; i < count; i++) {\n        const lstart = i * 2 * zo;\n        const lend = (i + 1) * 2 * zo;\n        const dz = Math.sqrt(2 * Math.pow(zo, 2));\n        const start = [p1[0] + lstart * Math.cos(alpha), p1[1] + lstart * Math.sin(alpha)];\n        const end = [p1[0] + lend * Math.cos(alpha), p1[1] + lend * Math.sin(alpha)];\n        const middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n        ops.push(...this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o), ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o));\n      }\n    });\n    return ops;\n  }\n}","map":{"version":3,"names":["lineLength","polygonHachureLines","ZigZagLineFiller","constructor","helper","fillPolygons","polygonList","o","gap","hachureGap","strokeWidth","zo","zigzagOffset","Object","assign","lines","type","ops","zigzagLines","forEach","line","length","count","Math","round","p1","p2","alpha","atan","i","lstart","lend","dz","sqrt","pow","start","cos","sin","end","middle","PI","push","doubleLineOps"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/zigzag-line-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class ZigZagLineFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const gap = o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap;\n        const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n        o = Object.assign({}, o, { hachureGap: gap + zo });\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.zigzagLines(lines, zo, o) };\n    }\n    zigzagLines(lines, zo, o) {\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.round(length / (2 * zo));\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * 2 * zo;\n                const lend = (i + 1) * 2 * zo;\n                const dz = Math.sqrt(2 * Math.pow(zo, 2));\n                const start = [p1[0] + (lstart * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha)];\n                const end = [p1[0] + (lend * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha))];\n                const middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o), ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}