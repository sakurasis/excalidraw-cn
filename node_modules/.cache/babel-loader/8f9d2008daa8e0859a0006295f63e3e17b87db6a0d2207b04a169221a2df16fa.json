{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname===\"localhost\"||// [::1] is the IPv6 localhost address.\nwindow.location.hostname===\"[::1]\"||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export var register=function register(config){var _process$env$REACT_AP;if((process.env.NODE_ENV===\"production\"||((_process$env$REACT_AP=process.env.REACT_APP_DEV_ENABLE_SW)===null||_process$env$REACT_AP===void 0?void 0:_process$env$REACT_AP.toLowerCase())===\"true\")&&\"serviceWorker\"in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener(\"load\",function(){var isWebexLP=window.location.pathname.startsWith(\"/webex\");if(isWebexLP){unregister(function(){window.location.reload();});return false;}var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.info(\"This web app is being served cache-first by a service \"+\"worker. To learn more, visit https://bit.ly/CRA-PWA\");});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}};var registerValidSW=function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state===\"installed\"){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.info(\"New content is available and will be used when all tabs for this page are closed.\");// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.info(\"Content is cached for offline use.\");// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error(\"Error during service worker registration:\",error);});};var checkValidServiceWorker=function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{\"Service-Worker\":\"script\"}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get(\"content-type\");if(response.status===404||contentType!=null&&contentType.indexOf(\"javascript\")===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(error){console.info(\"No internet connection found. App is running in offline mode.\",error.message);});};export var unregister=function unregister(callback){if(\"serviceWorker\"in navigator){navigator.serviceWorker.ready.then(function(registration){return registration.unregister();}).then(function(){callback===null||callback===void 0?void 0:callback();}).catch(function(error){console.error(error.message);});}};","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","_process$env$REACT_AP","process","env","NODE_ENV","REACT_APP_DEV_ENABLE_SW","toLowerCase","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","isWebexLP","pathname","startsWith","unregister","reload","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","info","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","message","callback"],"sources":["D:/project/excalidraw-cn/src/serviceWorkerRegistration.ts"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = (config?: Config) => {\n  if (\n    (process.env.NODE_ENV === \"production\" ||\n      process.env.REACT_APP_DEV_ENABLE_SW?.toLowerCase() === \"true\") &&\n    \"serviceWorker\" in navigator\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const isWebexLP = window.location.pathname.startsWith(\"/webex\");\n      if (isWebexLP) {\n        unregister(() => {\n          window.location.reload();\n        });\n        return false;\n      }\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n\n              console.info(\n                \"New content is available and will be used when all tabs for this page are closed.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              console.info(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch((error) => {\n      console.info(\n        \"No internet connection found. App is running in offline mode.\",\n        error.message,\n      );\n    });\n};\n\nexport const unregister = (callback?: () => void) => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        return registration.unregister();\n      })\n      .then(() => {\n        callback?.();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}