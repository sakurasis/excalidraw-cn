{"ast":null,"code":"import _objectWithoutProperties from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";import _toConsumableArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";var _excluded=[\"i18nKey\",\"children\"];import React from\"react\";import{useI18n}from\"../i18n\";// Used for splitting i18nKey into tokens in Trans component\n// Example:\n// \"Please <link>click {{location}}</link> to continue.\".split(SPLIT_REGEX).filter(Boolean)\n// produces\n// [\"Please \", \"<link>\", \"click \", \"{{location}}\", \"</link>\", \" to continue.\"]\nvar SPLIT_REGEX=/({{[\\w-]+}})|(<[\\w-]+>)|(<\\/[\\w-]+>)/g;// Used for extracting \"location\" from \"{{location}}\"\nvar KEY_REGEXP=/{{([\\w-]+)}}/;// Used for extracting \"link\" from \"<link>\"\nvar TAG_START_REGEXP=/<([\\w-]+)>/;// Used for extracting \"link\" from \"</link>\"\nvar TAG_END_REGEXP=/<\\/([\\w-]+)>/;var getTransChildren=function getTransChildren(format,props){var stack=[{name:\"\",children:[]}];format.split(SPLIT_REGEX).filter(Boolean).forEach(function(match){var tagStartMatch=match.match(TAG_START_REGEXP);var tagEndMatch=match.match(TAG_END_REGEXP);var keyMatch=match.match(KEY_REGEXP);if(tagStartMatch!==null){// The match is <tag>. Set the tag name as the name if it's one of the\n// props, e.g. for \"Please <link>click the button</link> to continue\"\n// tagStartMatch[1] = \"link\" and props contain \"link\" then it will be\n// pushed to stack.\nvar name=tagStartMatch[1];if(props.hasOwnProperty(name)){stack.push({name:name,children:[]});}else{console.warn(\"Trans: missed to pass in prop \".concat(name,\" for interpolating \").concat(format));}}else if(tagEndMatch!==null){// If tag end match is found, this means we need to replace the content with\n// its actual value in prop e.g. format = \"Please <link>click the\n// button</link> to continue\", tagEndMatch is for \"</link>\", stack last item name =\n// \"link\" and props.link = (el) => <a\n// href=\"https://example.com\">{el}</a> then its prop value will be\n// pushed to \"link\"'s children so on DOM when rendering it's rendered as\n// <a href=\"https://example.com\">click the button</a>\nvar _name=tagEndMatch[1];if(_name===stack[stack.length-1].name){var item=stack.pop();var itemChildren=/*#__PURE__*/React.createElement.apply(React,[React.Fragment,{}].concat(_toConsumableArray(item.children)));var fn=props[item.name];if(typeof fn===\"function\"){stack[stack.length-1].children.push(fn(itemChildren));}}else{console.warn(\"Trans: unexpected end tag \".concat(match,\" for interpolating \").concat(format));}}else if(keyMatch!==null){// The match is for {{key}}. Check if the key is present in props and set\n// the prop value as children of last stack item e.g. format = \"Hello\n// {{name}}\", key = \"name\" and props.name = \"Excalidraw\" then its prop\n// value will be pushed to \"name\"'s children so it's rendered on DOM as\n// \"Hello Excalidraw\"\nvar _name2=keyMatch[1];if(props.hasOwnProperty(_name2)){stack[stack.length-1].children.push(props[_name2]);}else{console.warn(\"Trans: key \".concat(_name2,\" not in props for interpolating \").concat(format));}}else{// If none of cases match means we just need to push the string\n// to stack eg - \"Hello {{name}} Whats up?\" \"Hello\", \"Whats up\" will be pushed\nstack[stack.length-1].children.push(match);}});if(stack.length!==1){console.warn(\"Trans: stack not empty for interpolating \".concat(format));}return stack[0].children;};/*\nTrans component is used for translating JSX.\n\n```json\n{\n  \"example1\": \"Hello {{audience}}\",\n  \"example2\": \"Please <link>click the button</link> to continue.\",\n  \"example3\": \"Please <link>click {{location}}</link> to continue.\",\n  \"example4\": \"Please <link>click <bold>{{location}}</bold></link> to continue.\",\n}\n```\n\n```jsx\n<Trans i18nKey=\"example1\" audience=\"world\" />\n\n<Trans\n  i18nKey=\"example2\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n/>\n\n<Trans\n  i18nKey=\"example3\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n/>\n\n<Trans\n  i18nKey=\"example4\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n  bold={(el) => <strong>{el}</strong>}\n/>\n```\n\nOutput:\n\n```html\nHello world\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click <strong>the button</strong></a> to continue.\n```\n*/var Trans=function Trans(_ref){var i18nKey=_ref.i18nKey,children=_ref.children,props=_objectWithoutProperties(_ref,_excluded);var _useI18n=useI18n(),t=_useI18n.t;// This is needed to avoid unique key error in list which gets rendered from getTransChildren\nreturn/*#__PURE__*/React.createElement.apply(React,[React.Fragment,{}].concat(_toConsumableArray(getTransChildren(t(i18nKey),props))));};export default Trans;","map":{"version":3,"names":["React","useI18n","SPLIT_REGEX","KEY_REGEXP","TAG_START_REGEXP","TAG_END_REGEXP","getTransChildren","format","props","stack","name","children","split","filter","Boolean","forEach","match","tagStartMatch","tagEndMatch","keyMatch","hasOwnProperty","push","console","warn","concat","length","item","pop","itemChildren","createElement","apply","Fragment","_toConsumableArray","fn","Trans","_ref","i18nKey","_objectWithoutProperties","_excluded","_useI18n","t"],"sources":["D:/project/excalidraw-cn/src/components/Trans.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { useI18n } from \"../i18n\";\n\n// Used for splitting i18nKey into tokens in Trans component\n// Example:\n// \"Please <link>click {{location}}</link> to continue.\".split(SPLIT_REGEX).filter(Boolean)\n// produces\n// [\"Please \", \"<link>\", \"click \", \"{{location}}\", \"</link>\", \" to continue.\"]\nconst SPLIT_REGEX = /({{[\\w-]+}})|(<[\\w-]+>)|(<\\/[\\w-]+>)/g;\n// Used for extracting \"location\" from \"{{location}}\"\nconst KEY_REGEXP = /{{([\\w-]+)}}/;\n// Used for extracting \"link\" from \"<link>\"\nconst TAG_START_REGEXP = /<([\\w-]+)>/;\n// Used for extracting \"link\" from \"</link>\"\nconst TAG_END_REGEXP = /<\\/([\\w-]+)>/;\n\nconst getTransChildren = (\n  format: string,\n  props: {\n    [key: string]: React.ReactNode | ((el: React.ReactNode) => React.ReactNode);\n  },\n): React.ReactNode[] => {\n  const stack: { name: string; children: React.ReactNode[] }[] = [\n    {\n      name: \"\",\n      children: [],\n    },\n  ];\n\n  format\n    .split(SPLIT_REGEX)\n    .filter(Boolean)\n    .forEach((match) => {\n      const tagStartMatch = match.match(TAG_START_REGEXP);\n      const tagEndMatch = match.match(TAG_END_REGEXP);\n      const keyMatch = match.match(KEY_REGEXP);\n\n      if (tagStartMatch !== null) {\n        // The match is <tag>. Set the tag name as the name if it's one of the\n        // props, e.g. for \"Please <link>click the button</link> to continue\"\n        // tagStartMatch[1] = \"link\" and props contain \"link\" then it will be\n        // pushed to stack.\n        const name = tagStartMatch[1];\n        if (props.hasOwnProperty(name)) {\n          stack.push({\n            name,\n            children: [],\n          });\n        } else {\n          console.warn(\n            `Trans: missed to pass in prop ${name} for interpolating ${format}`,\n          );\n        }\n      } else if (tagEndMatch !== null) {\n        // If tag end match is found, this means we need to replace the content with\n        // its actual value in prop e.g. format = \"Please <link>click the\n        // button</link> to continue\", tagEndMatch is for \"</link>\", stack last item name =\n        // \"link\" and props.link = (el) => <a\n        // href=\"https://example.com\">{el}</a> then its prop value will be\n        // pushed to \"link\"'s children so on DOM when rendering it's rendered as\n        // <a href=\"https://example.com\">click the button</a>\n        const name = tagEndMatch[1];\n        if (name === stack[stack.length - 1].name) {\n          const item = stack.pop()!;\n          const itemChildren = React.createElement(\n            React.Fragment,\n            {},\n            ...item.children,\n          );\n          const fn = props[item.name];\n          if (typeof fn === \"function\") {\n            stack[stack.length - 1].children.push(fn(itemChildren));\n          }\n        } else {\n          console.warn(\n            `Trans: unexpected end tag ${match} for interpolating ${format}`,\n          );\n        }\n      } else if (keyMatch !== null) {\n        // The match is for {{key}}. Check if the key is present in props and set\n        // the prop value as children of last stack item e.g. format = \"Hello\n        // {{name}}\", key = \"name\" and props.name = \"Excalidraw\" then its prop\n        // value will be pushed to \"name\"'s children so it's rendered on DOM as\n        // \"Hello Excalidraw\"\n        const name = keyMatch[1];\n        if (props.hasOwnProperty(name)) {\n          stack[stack.length - 1].children.push(props[name] as React.ReactNode);\n        } else {\n          console.warn(\n            `Trans: key ${name} not in props for interpolating ${format}`,\n          );\n        }\n      } else {\n        // If none of cases match means we just need to push the string\n        // to stack eg - \"Hello {{name}} Whats up?\" \"Hello\", \"Whats up\" will be pushed\n        stack[stack.length - 1].children.push(match);\n      }\n    });\n\n  if (stack.length !== 1) {\n    console.warn(`Trans: stack not empty for interpolating ${format}`);\n  }\n\n  return stack[0].children;\n};\n\n/*\nTrans component is used for translating JSX.\n\n```json\n{\n  \"example1\": \"Hello {{audience}}\",\n  \"example2\": \"Please <link>click the button</link> to continue.\",\n  \"example3\": \"Please <link>click {{location}}</link> to continue.\",\n  \"example4\": \"Please <link>click <bold>{{location}}</bold></link> to continue.\",\n}\n```\n\n```jsx\n<Trans i18nKey=\"example1\" audience=\"world\" />\n\n<Trans\n  i18nKey=\"example2\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n/>\n\n<Trans\n  i18nKey=\"example3\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n/>\n\n<Trans\n  i18nKey=\"example4\"\n  connectLink={(el) => <a href=\"https://example.com\">{el}</a>}\n  location=\"the button\"\n  bold={(el) => <strong>{el}</strong>}\n/>\n```\n\nOutput:\n\n```html\nHello world\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click the button</a> to continue.\nPlease <a href=\"https://example.com\">click <strong>the button</strong></a> to continue.\n```\n*/\nconst Trans = ({\n  i18nKey,\n  children,\n  ...props\n}: {\n  i18nKey: string;\n  [key: string]: React.ReactNode | ((el: React.ReactNode) => React.ReactNode);\n}) => {\n  const { t } = useI18n();\n\n  // This is needed to avoid unique key error in list which gets rendered from getTransChildren\n  return React.createElement(\n    React.Fragment,\n    {},\n    ...getTransChildren(t(i18nKey), props),\n  );\n};\n\nexport default Trans;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}