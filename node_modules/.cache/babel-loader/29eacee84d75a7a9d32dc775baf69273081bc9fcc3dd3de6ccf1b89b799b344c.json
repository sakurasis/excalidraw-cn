{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { getGlobalObject, isNativeFetch, logger, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\nimport { BaseTransport } from './base';\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction getNativeFetchImplementation() {\n  /* eslint-disable @typescript-eslint/unbound-method */\n  var _a, _b;\n  // Fast path to avoid DOM I/O\n  var global = getGlobalObject();\n  if (isNativeFetch(global.fetch)) {\n    return global.fetch.bind(global);\n  }\n  var document = global.document;\n  var fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof ((_a = document) === null || _a === void 0 ? void 0 : _a.createElement) === \"function\") {\n    try {\n      var sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      if ((_b = sandbox.contentWindow) === null || _b === void 0 ? void 0 : _b.fetch) {\n        fetchImpl = sandbox.contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n  return fetchImpl.bind(global);\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n/** `fetch` based transport */\nvar FetchTransport = /** @class */function (_super) {\n  __extends(FetchTransport, _super);\n  function FetchTransport(options, fetchImpl) {\n    if (fetchImpl === void 0) {\n      fetchImpl = getNativeFetchImplementation();\n    }\n    var _this = _super.call(this, options) || this;\n    _this._fetch = fetchImpl;\n    return _this;\n  }\n  /**\n   * @inheritDoc\n   */\n  FetchTransport.prototype.sendEvent = function (event) {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  };\n  /**\n   * @inheritDoc\n   */\n  FetchTransport.prototype.sendSession = function (session) {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  };\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {\n    var _this = this;\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: \"Transport locked till \" + this._disabledUntil(sentryRequest.type) + \" due to too many requests.\",\n        status: 429\n      });\n    }\n    var options = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: supportsReferrerPolicy() ? 'origin' : ''\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n    return this._buffer.add(new SyncPromise(function (resolve, reject) {\n      _this._fetch(sentryRequest.url, options).then(function (response) {\n        var headers = {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After')\n        };\n        _this._handleResponse({\n          requestType: sentryRequest.type,\n          response: response,\n          headers: headers,\n          resolve: resolve,\n          reject: reject\n        });\n      }).catch(reject);\n    }));\n  };\n  return FetchTransport;\n}(BaseTransport);\nexport { FetchTransport };","map":{"version":3,"names":["eventToSentryRequest","sessionToSentryRequest","getGlobalObject","isNativeFetch","logger","supportsReferrerPolicy","SyncPromise","BaseTransport","getNativeFetchImplementation","global","fetch","bind","document","fetchImpl","_a","createElement","sandbox","hidden","head","appendChild","_b","contentWindow","removeChild","e","warn","FetchTransport","_super","__extends","options","_this","call","_fetch","prototype","sendEvent","event","_sendRequest","_api","sendSession","session","sentryRequest","originalPayload","_isRateLimited","type","Promise","reject","reason","_disabledUntil","status","body","method","referrerPolicy","fetchParameters","undefined","Object","assign","headers","_buffer","add","resolve","url","then","response","get","_handleResponse","requestType","catch"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\browser\\src\\transports\\fetch.ts"],"sourcesContent":["import { eventToSentryRequest, sessionToSentryRequest } from '@sentry/core';\nimport { Event, Response, SentryRequest, Session, TransportOptions } from '@sentry/types';\nimport { getGlobalObject, isNativeFetch, logger, supportsReferrerPolicy, SyncPromise } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\ntype FetchImpl = typeof fetch;\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction getNativeFetchImplementation(): FetchImpl {\n  /* eslint-disable @typescript-eslint/unbound-method */\n\n  // Fast path to avoid DOM I/O\n  const global = getGlobalObject<Window>();\n  if (isNativeFetch(global.fetch)) {\n    return global.fetch.bind(global);\n  }\n\n  const document = global.document;\n  let fetchImpl = global.fetch;\n  // eslint-disable-next-line deprecation/deprecation\n  if (typeof document?.createElement === `function`) {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      if (sandbox.contentWindow?.fetch) {\n        fetchImpl = sandbox.contentWindow.fetch;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);\n    }\n  }\n\n  return fetchImpl.bind(global);\n  /* eslint-enable @typescript-eslint/unbound-method */\n}\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * Fetch API reference which always points to native browser implementation.\n   */\n  private _fetch: typeof fetch;\n\n  constructor(options: TransportOptions, fetchImpl: FetchImpl = getNativeFetchImplementation()) {\n    super(options);\n    this._fetch = fetchImpl;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): PromiseLike<Response> {\n    return this._sendRequest(eventToSentryRequest(event, this._api), event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendSession(session: Session): PromiseLike<Response> {\n    return this._sendRequest(sessionToSentryRequest(session, this._api), session);\n  }\n\n  /**\n   * @param sentryRequest Prepared SentryRequest to be delivered\n   * @param originalPayload Original payload used to create SentryRequest\n   */\n  private _sendRequest(sentryRequest: SentryRequest, originalPayload: Event | Session): PromiseLike<Response> {\n    if (this._isRateLimited(sentryRequest.type)) {\n      return Promise.reject({\n        event: originalPayload,\n        type: sentryRequest.type,\n        reason: `Transport locked till ${this._disabledUntil(sentryRequest.type)} due to too many requests.`,\n        status: 429,\n      });\n    }\n\n    const options: RequestInit = {\n      body: sentryRequest.body,\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n    if (this.options.fetchParameters !== undefined) {\n      Object.assign(options, this.options.fetchParameters);\n    }\n    if (this.options.headers !== undefined) {\n      options.headers = this.options.headers;\n    }\n\n    return this._buffer.add(\n      new SyncPromise<Response>((resolve, reject) => {\n        this._fetch(sentryRequest.url, options)\n          .then(response => {\n            const headers = {\n              'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n              'retry-after': response.headers.get('Retry-After'),\n            };\n            this._handleResponse({\n              requestType: sentryRequest.type,\n              response,\n              headers,\n              resolve,\n              reject,\n            });\n          })\n          .catch(reject);\n      }),\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}