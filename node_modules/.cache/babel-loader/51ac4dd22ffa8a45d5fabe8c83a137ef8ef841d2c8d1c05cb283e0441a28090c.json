{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nvar global = getGlobalObject();\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\nvar handlers = {};\nvar instrumented = {};\n/** Instruments given API */\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n  instrumented[type] = true;\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler) {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  handlers[handler.type].push(handler.callback);\n  instrument(handler.type);\n}\n/** JSDoc */\nfunction triggerHandlers(type, data) {\n  var e_1, _a;\n  if (!type || !handlers[type]) {\n    return;\n  }\n  try {\n    for (var _b = __values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var handler = _c.value;\n      try {\n        handler(data);\n      } catch (e) {\n        logger.error(\"Error while triggering instrumentation handler.\\nType: \" + type + \"\\nName: \" + getFunctionName(handler) + \"\\nError: \" + e);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n/** JSDoc */\nfunction instrumentConsole() {\n  if (!('console' in global)) {\n    return;\n  }\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {\n    if (!(level in global.console)) {\n      return;\n    }\n    fill(global.console, level, function (originalConsoleLevel) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        triggerHandlers('console', {\n          args: args,\n          level: level\n        });\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n/** JSDoc */\nfunction instrumentFetch() {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n  fill(global, 'fetch', function (originalFetch) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var handlerData = {\n        args: args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args)\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', __assign({}, handlerData));\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(function (response) {\n        triggerHandlers('fetch', __assign(__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          response: response\n        }));\n        return response;\n      }, function (error) {\n        triggerHandlers('fetch', __assign(__assign({}, handlerData), {\n          endTimestamp: Date.now(),\n          error: error\n        }));\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs) {\n  if (fetchArgs === void 0) {\n    fetchArgs = [];\n  }\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n/** JSDoc */\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  var requestKeys = [];\n  var requestValues = [];\n  var xhrproto = XMLHttpRequest.prototype;\n  fill(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var xhr = this;\n      var url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1]\n      };\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n      var onreadystatechangeHandler = function onreadystatechangeHandler() {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n          try {\n            var requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              var args_1 = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args_1[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args_1[0];\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n          triggerHandlers('xhr', {\n            args: args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr: xhr\n          });\n        }\n      };\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original) {\n          return function () {\n            var readyStateArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n              readyStateArgs[_i] = arguments[_i];\n            }\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n      return originalOpen.apply(xhr, args);\n    };\n  });\n  fill(xhrproto, 'send', function (originalSend) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      requestKeys.push(this);\n      requestValues.push(args);\n      triggerHandlers('xhr', {\n        args: args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\nvar lastHref;\n/** JSDoc */\nfunction instrumentHistory() {\n  if (!supportsHistory()) {\n    return;\n  }\n  var oldOnPopState = global.onpopstate;\n  global.onpopstate = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    var from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from: from,\n      to: to\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        var from = lastHref;\n        var to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from: from,\n          to: to\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\nvar debounceDuration = 1000;\nvar debounceTimerID;\nvar lastCapturedEvent;\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous, current) {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event) {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n  try {\n    var target = event.target;\n    if (!target || !target.tagName) {\n      return true;\n    }\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n  return true;\n}\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler, globalListener) {\n  if (globalListener === void 0) {\n    globalListener = false;\n  }\n  return function (event) {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n    var name = event.type === 'keypress' ? 'input' : event.type;\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name: name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(function () {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n/** JSDoc */\nfunction instrumentDOM() {\n  if (!('document' in global)) {\n    return;\n  }\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  var triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach(function (target) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var proto = global[target] && global[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    fill(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var handlers_1 = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = handlers_1[type] = handlers_1[type] || {\n              refCount: 0\n            };\n            if (!handlerForType.handler) {\n              var handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n    fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            var el = this;\n            var handlers_2 = el.__sentry_instrumentation_handlers__ || {};\n            var handlerForType = handlers_2[type];\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers_2[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers_2).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\nvar _oldOnErrorHandler = null;\n/** JSDoc */\nfunction instrumentError() {\n  _oldOnErrorHandler = global.onerror;\n  global.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column: column,\n      error: error,\n      line: line,\n      msg: msg,\n      url: url\n    });\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n}\nvar _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n  global.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n    return true;\n  };\n}","map":{"version":3,"names":["isInstanceOf","isString","logger","getGlobalObject","fill","getFunctionName","supportsHistory","supportsNativeFetch","global","handlers","instrumented","instrument","type","instrumentConsole","instrumentDOM","instrumentXHR","instrumentFetch","instrumentHistory","instrumentError","instrumentUnhandledRejection","warn","addInstrumentationHandler","handler","callback","push","triggerHandlers","data","_b","__values","_c","next","done","value","e","error","forEach","level","console","originalConsoleLevel","args","_i","arguments","length","Function","prototype","apply","call","originalFetch","handlerData","fetchData","method","getFetchMethod","url","getFetchUrl","startTimestamp","Date","now","__assign","then","response","endTimestamp","fetchArgs","Request","String","toUpperCase","requestKeys","requestValues","xhrproto","XMLHttpRequest","originalOpen","xhr","__sentry_xhr__","match","__sentry_own_request__","onreadystatechangeHandler","readyState","status_code","status","requestPos","indexOf","splice","args_1","undefined","body","onreadystatechange","original","readyStateArgs","addEventListener","originalSend","lastHref","oldOnPopState","onpopstate","to","location","href","from","historyReplacementFunction","originalHistoryFunction","history","debounceDuration","debounceTimerID","lastCapturedEvent","shouldShortcircuitPreviousDebounce","previous","current","target","shouldSkipDOMEvent","event","tagName","isContentEditable","makeDOMEventHandler","globalListener","name","clearTimeout","setTimeout","triggerDOMHandler","bind","globalDOMEventHandler","document","proto","hasOwnProperty","originalAddEventListener","listener","options","el","handlers_1","__sentry_instrumentation_handlers__","handlerForType","refCount","originalRemoveEventListener","handlers_2","Object","keys","_oldOnErrorHandler","onerror","msg","line","column","_oldOnUnhandledRejectionHandler","onunhandledrejection"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\instrument.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { logger } from './logger';\nimport { getGlobalObject } from './misc';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\n\nconst global = getGlobalObject<Window>();\n\n/** Object describing handler that will be triggered for a given `type` of instrumentation */\ninterface InstrumentHandler {\n  type: InstrumentHandlerType;\n  callback: InstrumentHandlerCallback;\n}\ntype InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\ntype InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      logger.warn('unknown instrumentation type:', type);\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(handler: InstrumentHandler): void {\n  if (!handler || typeof handler.type !== 'string' || typeof handler.callback !== 'function') {\n    return;\n  }\n  handlers[handler.type] = handlers[handler.type] || [];\n  (handlers[handler.type] as InstrumentHandlerCallback[]).push(handler.callback);\n  instrument(handler.type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      logger.error(\n        `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(\n          handler,\n        )}\\nError: ${e}`,\n      );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in global)) {\n    return;\n  }\n\n  ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n    if (!(level in global.console)) {\n      return;\n    }\n\n    fill(global.console, level, function(originalConsoleLevel: () => any): Function {\n      return function(...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(global, 'fetch', function(originalFetch: () => void): () => void {\n    return function(...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(global, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in global && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in global)) {\n    return;\n  }\n\n  // Poor man's implementation of ES6 `Map`, tracking and keeping in sync key and value separately.\n  const requestKeys: XMLHttpRequest[] = [];\n  const requestValues: Array<any>[] = [];\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function(originalOpen: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhr.__sentry_xhr__.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function(): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            if (xhr.__sentry_xhr__) {\n              xhr.__sentry_xhr__.status_code = xhr.status;\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          try {\n            const requestPos = requestKeys.indexOf(xhr);\n            if (requestPos !== -1) {\n              // Make sure to pop both key and value to keep it in sync.\n              requestKeys.splice(requestPos);\n              const args = requestValues.splice(requestPos)[0];\n              if (xhr.__sentry_xhr__ && args[0] !== undefined) {\n                xhr.__sentry_xhr__.body = args[0] as XHRSendInput;\n              }\n            }\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function(original: WrappedFunction): Function {\n          return function(...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function(originalSend: () => void): () => void {\n    return function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      requestKeys.push(this);\n      requestValues.push(args);\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = global.onpopstate;\n  global.onpopstate = function(this: WindowEventHandlers, ...args: any[]): any {\n    const to = global.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      return oldOnPopState.apply(this, args);\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function(this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(global.history, 'pushState', historyReplacementFunction);\n  fill(global.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = global.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in global)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  global.document.addEventListener('click', globalDOMEventHandler, false);\n  global.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (global as any)[target] && (global as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(originalAddEventListener: AddEventListener): AddEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n      return function(\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = global.onerror;\n\n  global.onerror = function(msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = global.onunhandledrejection;\n\n  global.onunhandledrejection = function(e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n"],"mappings":";AAIA,SAASA,YAAY,EAAEC,QAAQ,QAAQ,MAAM;AAC7C,SAASC,MAAM,QAAQ,UAAU;AACjC,SAASC,eAAe,QAAQ,QAAQ;AACxC,SAASC,IAAI,QAAQ,UAAU;AAC/B,SAASC,eAAe,QAAQ,cAAc;AAC9C,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,YAAY;AAEjE,IAAMC,MAAM,GAAGL,eAAe,EAAU;AAkBxC;;;;;;;;;;AAWA,IAAMM,QAAQ,GAAqE,EAAE;AACrF,IAAMC,YAAY,GAAiD,EAAE;AAErE;AACA,SAASC,UAAUA,CAACC,IAA2B;EAC7C,IAAIF,YAAY,CAACE,IAAI,CAAC,EAAE;IACtB;;EAGFF,YAAY,CAACE,IAAI,CAAC,GAAG,IAAI;EAEzB,QAAQA,IAAI;IACV,KAAK,SAAS;MACZC,iBAAiB,EAAE;MACnB;IACF,KAAK,KAAK;MACRC,aAAa,EAAE;MACf;IACF,KAAK,KAAK;MACRC,aAAa,EAAE;MACf;IACF,KAAK,OAAO;MACVC,eAAe,EAAE;MACjB;IACF,KAAK,SAAS;MACZC,iBAAiB,EAAE;MACnB;IACF,KAAK,OAAO;MACVC,eAAe,EAAE;MACjB;IACF,KAAK,oBAAoB;MACvBC,4BAA4B,EAAE;MAC9B;IACF;MACEjB,MAAM,CAACkB,IAAI,CAAC,+BAA+B,EAAER,IAAI,CAAC;EAAC;AAEzD;AAEA;;;;;AAKA,OAAM,SAAUS,yBAAyBA,CAACC,OAA0B;EAClE,IAAI,CAACA,OAAO,IAAI,OAAOA,OAAO,CAACV,IAAI,KAAK,QAAQ,IAAI,OAAOU,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAE;IAC1F;;EAEFd,QAAQ,CAACa,OAAO,CAACV,IAAI,CAAC,GAAGH,QAAQ,CAACa,OAAO,CAACV,IAAI,CAAC,IAAI,EAAE;EACpDH,QAAQ,CAACa,OAAO,CAACV,IAAI,CAAiC,CAACY,IAAI,CAACF,OAAO,CAACC,QAAQ,CAAC;EAC9EZ,UAAU,CAACW,OAAO,CAACV,IAAI,CAAC;AAC1B;AAEA;AACA,SAASa,eAAeA,CAACb,IAA2B,EAAEc,IAAS;;EAC7D,IAAI,CAACd,IAAI,IAAI,CAACH,QAAQ,CAACG,IAAI,CAAC,EAAE;IAC5B;;;IAGF,KAAsB,IAAAe,EAAA,GAAAC,QAAA,CAAAnB,QAAQ,CAACG,IAAI,CAAC,IAAI,EAAE,GAAAiB,EAAA,GAAAF,EAAA,CAAAG,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAF,EAAA,CAAAG,IAAA,IAAE;MAAvC,IAAMR,OAAO,GAAAO,EAAA,CAAAG,KAAA;MAChB,IAAI;QACFV,OAAO,CAACI,IAAI,CAAC;OACd,CAAC,OAAOO,CAAC,EAAE;QACV/B,MAAM,CAACgC,KAAK,CACV,4DAA0DtB,IAAI,gBAAWP,eAAe,CACtFiB,OAAO,CACR,iBAAYW,CAAG,CACjB;;;;;;;;;;;;;;AAGP;AAEA;AACA,SAASpB,iBAAiBA,CAAA;EACxB,IAAI,EAAE,SAAS,IAAIL,MAAM,CAAC,EAAE;IAC1B;;EAGF,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC2B,OAAO,CAAC,UAASC,KAAa;IAChF,IAAI,EAAEA,KAAK,IAAI5B,MAAM,CAAC6B,OAAO,CAAC,EAAE;MAC9B;;IAGFjC,IAAI,CAACI,MAAM,CAAC6B,OAAO,EAAED,KAAK,EAAE,UAASE,oBAA+B;MAClE,OAAO;QAAS,IAAAC,IAAA;aAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;UAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;QACdf,eAAe,CAAC,SAAS,EAAE;UAAEc,IAAI,EAAAA,IAAA;UAAEH,KAAK,EAAAA;QAAA,CAAE,CAAC;QAE3C;QACA,IAAIE,oBAAoB,EAAE;UACxBK,QAAQ,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACR,oBAAoB,EAAE9B,MAAM,CAAC6B,OAAO,EAAEE,IAAI,CAAC;;MAE7E,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA;AACA,SAASvB,eAAeA,CAAA;EACtB,IAAI,CAACT,mBAAmB,EAAE,EAAE;IAC1B;;EAGFH,IAAI,CAACI,MAAM,EAAE,OAAO,EAAE,UAASuC,aAAyB;IACtD,OAAO;MAAS,IAAAR,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MACd,IAAMQ,WAAW,GAAG;QAClBT,IAAI,EAAAA,IAAA;QACJU,SAAS,EAAE;UACTC,MAAM,EAAEC,cAAc,CAACZ,IAAI,CAAC;UAC5Ba,GAAG,EAAEC,WAAW,CAACd,IAAI;SACtB;QACDe,cAAc,EAAEC,IAAI,CAACC,GAAG;OACzB;MAED/B,eAAe,CAAC,OAAO,EAAAgC,QAAA,KAClBT,WAAW,EACd;MAEF;MACA,OAAOD,aAAa,CAACF,KAAK,CAACrC,MAAM,EAAE+B,IAAI,CAAC,CAACmB,IAAI,CAC3C,UAACC,QAAkB;QACjBlC,eAAe,CAAC,OAAO,EAAAgC,QAAA,CAAAA,QAAA,KAClBT,WAAW;UACdY,YAAY,EAAEL,IAAI,CAACC,GAAG,EAAE;UACxBG,QAAQ,EAAAA;QAAA,GACR;QACF,OAAOA,QAAQ;MACjB,CAAC,EACD,UAACzB,KAAY;QACXT,eAAe,CAAC,OAAO,EAAAgC,QAAA,CAAAA,QAAA,KAClBT,WAAW;UACdY,YAAY,EAAEL,IAAI,CAACC,GAAG,EAAE;UACxBtB,KAAK,EAAAA;QAAA,GACL;QACF;QACA;QACA;QACA,MAAMA,KAAK;MACb,CAAC,CACF;IACH,CAAC;EACH,CAAC,CAAC;AACJ;AAeA;AACA;AACA,SAASiB,cAAcA,CAACU,SAAqB;EAArB,IAAAA,SAAA;IAAAA,SAAA,KAAqB;EAAA;EAC3C,IAAI,SAAS,IAAIrD,MAAM,IAAIR,YAAY,CAAC6D,SAAS,CAAC,CAAC,CAAC,EAAEC,OAAO,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,CAACX,MAAM,EAAE;IACrF,OAAOa,MAAM,CAACF,SAAS,CAAC,CAAC,CAAC,CAACX,MAAM,CAAC,CAACc,WAAW,EAAE;;EAElD,IAAIH,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,CAACX,MAAM,EAAE;IACvC,OAAOa,MAAM,CAACF,SAAS,CAAC,CAAC,CAAC,CAACX,MAAM,CAAC,CAACc,WAAW,EAAE;;EAElD,OAAO,KAAK;AACd;AAEA;AACA,SAASX,WAAWA,CAACQ,SAAqB;EAArB,IAAAA,SAAA;IAAAA,SAAA,KAAqB;EAAA;EACxC,IAAI,OAAOA,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IACpC,OAAOA,SAAS,CAAC,CAAC,CAAC;;EAErB,IAAI,SAAS,IAAIrD,MAAM,IAAIR,YAAY,CAAC6D,SAAS,CAAC,CAAC,CAAC,EAAEC,OAAO,CAAC,EAAE;IAC9D,OAAOD,SAAS,CAAC,CAAC,CAAC,CAACT,GAAG;;EAEzB,OAAOW,MAAM,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;AAC7B;AACA;AAEA;AACA,SAAS9C,aAAaA,CAAA;EACpB,IAAI,EAAE,gBAAgB,IAAIP,MAAM,CAAC,EAAE;IACjC;;EAGF;EACA,IAAMyD,WAAW,GAAqB,EAAE;EACxC,IAAMC,aAAa,GAAiB,EAAE;EACtC,IAAMC,QAAQ,GAAGC,cAAc,CAACxB,SAAS;EAEzCxC,IAAI,CAAC+D,QAAQ,EAAE,MAAM,EAAE,UAASE,YAAwB;IACtD,OAAO;MAA4C,IAAA9B,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MACjD;MACA,IAAM8B,GAAG,GAAG,IAAI;MAChB,IAAMlB,GAAG,GAAGb,IAAI,CAAC,CAAC,CAAC;MACnB+B,GAAG,CAACC,cAAc,GAAG;QACnB;QACArB,MAAM,EAAEjD,QAAQ,CAACsC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAACyB,WAAW,EAAE,GAAGzB,IAAI,CAAC,CAAC,CAAC;QAC3Da,GAAG,EAAEb,IAAI,CAAC,CAAC;OACZ;MAED;MACA;MACA,IAAItC,QAAQ,CAACmD,GAAG,CAAC,IAAIkB,GAAG,CAACC,cAAc,CAACrB,MAAM,KAAK,MAAM,IAAIE,GAAG,CAACoB,KAAK,CAAC,YAAY,CAAC,EAAE;QACpFF,GAAG,CAACG,sBAAsB,GAAG,IAAI;;MAGnC,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAA,EAAG;QAChC,IAAIJ,GAAG,CAACK,UAAU,KAAK,CAAC,EAAE;UACxB,IAAI;YACF;YACA;YACA,IAAIL,GAAG,CAACC,cAAc,EAAE;cACtBD,GAAG,CAACC,cAAc,CAACK,WAAW,GAAGN,GAAG,CAACO,MAAM;;WAE9C,CAAC,OAAO5C,CAAC,EAAE;YACV;UAAA;UAGF,IAAI;YACF,IAAM6C,UAAU,GAAGb,WAAW,CAACc,OAAO,CAACT,GAAG,CAAC;YAC3C,IAAIQ,UAAU,KAAK,CAAC,CAAC,EAAE;cACrB;cACAb,WAAW,CAACe,MAAM,CAACF,UAAU,CAAC;cAC9B,IAAMG,MAAI,GAAGf,aAAa,CAACc,MAAM,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC;cAChD,IAAIR,GAAG,CAACC,cAAc,IAAIU,MAAI,CAAC,CAAC,CAAC,KAAKC,SAAS,EAAE;gBAC/CZ,GAAG,CAACC,cAAc,CAACY,IAAI,GAAGF,MAAI,CAAC,CAAC,CAAiB;;;WAGtD,CAAC,OAAOhD,CAAC,EAAE;YACV;UAAA;UAGFR,eAAe,CAAC,KAAK,EAAE;YACrBc,IAAI,EAAAA,IAAA;YACJqB,YAAY,EAAEL,IAAI,CAACC,GAAG,EAAE;YACxBF,cAAc,EAAEC,IAAI,CAACC,GAAG,EAAE;YAC1Bc,GAAG,EAAAA;WACJ,CAAC;;MAEN,CAAC;MAED,IAAI,oBAAoB,IAAIA,GAAG,IAAI,OAAOA,GAAG,CAACc,kBAAkB,KAAK,UAAU,EAAE;QAC/EhF,IAAI,CAACkE,GAAG,EAAE,oBAAoB,EAAE,UAASe,QAAyB;UAChE,OAAO;YAAS,IAAAC,cAAA;iBAAA,IAAA9C,EAAA,IAAwB,EAAxBA,EAAA,GAAAC,SAAA,CAAAC,MAAwB,EAAxBF,EAAA,EAAwB;cAAxB8C,cAAA,CAAA9C,EAAA,IAAAC,SAAA,CAAAD,EAAA;;YACdkC,yBAAyB,EAAE;YAC3B,OAAOW,QAAQ,CAACxC,KAAK,CAACyB,GAAG,EAAEgB,cAAc,CAAC;UAC5C,CAAC;QACH,CAAC,CAAC;OACH,MAAM;QACLhB,GAAG,CAACiB,gBAAgB,CAAC,kBAAkB,EAAEb,yBAAyB,CAAC;;MAGrE,OAAOL,YAAY,CAACxB,KAAK,CAACyB,GAAG,EAAE/B,IAAI,CAAC;IACtC,CAAC;EACH,CAAC,CAAC;EAEFnC,IAAI,CAAC+D,QAAQ,EAAE,MAAM,EAAE,UAASqB,YAAwB;IACtD,OAAO;MAA4C,IAAAjD,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MACjDyB,WAAW,CAACzC,IAAI,CAAC,IAAI,CAAC;MACtB0C,aAAa,CAAC1C,IAAI,CAACe,IAAI,CAAC;MAExBd,eAAe,CAAC,KAAK,EAAE;QACrBc,IAAI,EAAAA,IAAA;QACJe,cAAc,EAAEC,IAAI,CAACC,GAAG,EAAE;QAC1Bc,GAAG,EAAE;OACN,CAAC;MAEF,OAAOkB,YAAY,CAAC3C,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;IACvC,CAAC;EACH,CAAC,CAAC;AACJ;AAEA,IAAIkD,QAAgB;AAEpB;AACA,SAASxE,iBAAiBA,CAAA;EACxB,IAAI,CAACX,eAAe,EAAE,EAAE;IACtB;;EAGF,IAAMoF,aAAa,GAAGlF,MAAM,CAACmF,UAAU;EACvCnF,MAAM,CAACmF,UAAU,GAAG;IAAoC,IAAApD,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACtD,IAAMoD,EAAE,GAAGpF,MAAM,CAACqF,QAAQ,CAACC,IAAI;IAC/B;IACA,IAAMC,IAAI,GAAGN,QAAQ;IACrBA,QAAQ,GAAGG,EAAE;IACbnE,eAAe,CAAC,SAAS,EAAE;MACzBsE,IAAI,EAAAA,IAAA;MACJH,EAAE,EAAAA;KACH,CAAC;IACF,IAAIF,aAAa,EAAE;MACjB,OAAOA,aAAa,CAAC7C,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;;EAE1C,CAAC;EAED;EACA,SAASyD,0BAA0BA,CAACC,uBAAmC;IACrE,OAAO;MAAwB,IAAA1D,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MAC7B,IAAMY,GAAG,GAAGb,IAAI,CAACG,MAAM,GAAG,CAAC,GAAGH,IAAI,CAAC,CAAC,CAAC,GAAG2C,SAAS;MACjD,IAAI9B,GAAG,EAAE;QACP;QACA,IAAM2C,IAAI,GAAGN,QAAQ;QACrB,IAAMG,EAAE,GAAG7B,MAAM,CAACX,GAAG,CAAC;QACtB;QACAqC,QAAQ,GAAGG,EAAE;QACbnE,eAAe,CAAC,SAAS,EAAE;UACzBsE,IAAI,EAAAA,IAAA;UACJH,EAAE,EAAAA;SACH,CAAC;;MAEJ,OAAOK,uBAAuB,CAACpD,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAC;IAClD,CAAC;EACH;EAEAnC,IAAI,CAACI,MAAM,CAAC0F,OAAO,EAAE,WAAW,EAAEF,0BAA0B,CAAC;EAC7D5F,IAAI,CAACI,MAAM,CAAC0F,OAAO,EAAE,cAAc,EAAEF,0BAA0B,CAAC;AAClE;AAEA,IAAMG,gBAAgB,GAAG,IAAI;AAC7B,IAAIC,eAAmC;AACvC,IAAIC,iBAAoC;AAExC;;;;;AAKA,SAASC,kCAAkCA,CAACC,QAA2B,EAAEC,OAAc;EACrF;EACA,IAAI,CAACD,QAAQ,EAAE;IACb,OAAO,IAAI;;EAGb;EACA,IAAIA,QAAQ,CAAC3F,IAAI,KAAK4F,OAAO,CAAC5F,IAAI,EAAE;IAClC,OAAO,IAAI;;EAGb,IAAI;IACF;IACA;IACA,IAAI2F,QAAQ,CAACE,MAAM,KAAKD,OAAO,CAACC,MAAM,EAAE;MACtC,OAAO,IAAI;;GAEd,CAAC,OAAOxE,CAAC,EAAE;IACV;IACA;EAAA;EAGF;EACA;EACA;EACA,OAAO,KAAK;AACd;AAEA;;;;AAIA,SAASyE,kBAAkBA,CAACC,KAAY;EACtC;EACA,IAAIA,KAAK,CAAC/F,IAAI,KAAK,UAAU,EAAE;IAC7B,OAAO,KAAK;;EAGd,IAAI;IACF,IAAM6F,MAAM,GAAGE,KAAK,CAACF,MAAqB;IAE1C,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACG,OAAO,EAAE;MAC9B,OAAO,IAAI;;IAGb;IACA;IACA,IAAIH,MAAM,CAACG,OAAO,KAAK,OAAO,IAAIH,MAAM,CAACG,OAAO,KAAK,UAAU,IAAIH,MAAM,CAACI,iBAAiB,EAAE;MAC3F,OAAO,KAAK;;GAEf,CAAC,OAAO5E,CAAC,EAAE;IACV;IACA;EAAA;EAGF,OAAO,IAAI;AACb;AAEA;;;;;;;AAOA,SAAS6E,mBAAmBA,CAACxF,OAAiB,EAAEyF,cAA+B;EAA/B,IAAAA,cAAA;IAAAA,cAAA,QAA+B;EAAA;EAC7E,OAAO,UAACJ,KAAY;IAClB;IACA;IACA;IACA,IAAI,CAACA,KAAK,IAAIN,iBAAiB,KAAKM,KAAK,EAAE;MACzC;;IAGF;IACA,IAAID,kBAAkB,CAACC,KAAK,CAAC,EAAE;MAC7B;;IAGF,IAAMK,IAAI,GAAGL,KAAK,CAAC/F,IAAI,KAAK,UAAU,GAAG,OAAO,GAAG+F,KAAK,CAAC/F,IAAI;IAE7D;IACA,IAAIwF,eAAe,KAAKlB,SAAS,EAAE;MACjC5D,OAAO,CAAC;QACNqF,KAAK,EAAEA,KAAK;QACZK,IAAI,EAAAA,IAAA;QACJxG,MAAM,EAAEuG;OACT,CAAC;MACFV,iBAAiB,GAAGM,KAAK;;IAE3B;IACA;IAAA,KACK,IAAIL,kCAAkC,CAACD,iBAAiB,EAAEM,KAAK,CAAC,EAAE;MACrErF,OAAO,CAAC;QACNqF,KAAK,EAAEA,KAAK;QACZK,IAAI,EAAAA,IAAA;QACJxG,MAAM,EAAEuG;OACT,CAAC;MACFV,iBAAiB,GAAGM,KAAK;;IAG3B;IACAM,YAAY,CAACb,eAAe,CAAC;IAC7BA,eAAe,GAAG5F,MAAM,CAAC0G,UAAU,CAAC;MAClCd,eAAe,GAAGlB,SAAS;IAC7B,CAAC,EAAEiB,gBAAgB,CAAC;EACtB,CAAC;AACH;AAuBA;AACA,SAASrF,aAAaA,CAAA;EACpB,IAAI,EAAE,UAAU,IAAIN,MAAM,CAAC,EAAE;IAC3B;;EAGF;EACA;EACA;EACA,IAAM2G,iBAAiB,GAAG1F,eAAe,CAAC2F,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC;EAC3D,IAAMC,qBAAqB,GAAGP,mBAAmB,CAACK,iBAAiB,EAAE,IAAI,CAAC;EAC1E3G,MAAM,CAAC8G,QAAQ,CAAC/B,gBAAgB,CAAC,OAAO,EAAE8B,qBAAqB,EAAE,KAAK,CAAC;EACvE7G,MAAM,CAAC8G,QAAQ,CAAC/B,gBAAgB,CAAC,UAAU,EAAE8B,qBAAqB,EAAE,KAAK,CAAC;EAE1E;EACA;EACA;EACA;EACA;EACA,CAAC,aAAa,EAAE,MAAM,CAAC,CAAClF,OAAO,CAAC,UAACsE,MAAc;IAC7C;IACA,IAAMc,KAAK,GAAI/G,MAAc,CAACiG,MAAM,CAAC,IAAKjG,MAAc,CAACiG,MAAM,CAAC,CAAC7D,SAAS;IAC1E;IACA,IAAI,CAAC2E,KAAK,IAAI,CAACA,KAAK,CAACC,cAAc,IAAI,CAACD,KAAK,CAACC,cAAc,CAAC,kBAAkB,CAAC,EAAE;MAChF;;IAGFpH,IAAI,CAACmH,KAAK,EAAE,kBAAkB,EAAE,UAASE,wBAA0C;MACjF,OAAO,UAEL7G,IAAY,EACZ8G,QAA4C,EAC5CC,OAA2C;QAE3C,IAAI/G,IAAI,KAAK,OAAO,IAAIA,IAAI,IAAI,UAAU,EAAE;UAC1C,IAAI;YACF,IAAMgH,EAAE,GAAG,IAA2B;YACtC,IAAMC,UAAQ,GAAID,EAAE,CAACE,mCAAmC,GAAGF,EAAE,CAACE,mCAAmC,IAAI,EAAG;YACxG,IAAMC,cAAc,GAAIF,UAAQ,CAACjH,IAAI,CAAC,GAAGiH,UAAQ,CAACjH,IAAI,CAAC,IAAI;cAAEoH,QAAQ,EAAE;YAAC,CAAG;YAE3E,IAAI,CAACD,cAAc,CAACzG,OAAO,EAAE;cAC3B,IAAMA,OAAO,GAAGwF,mBAAmB,CAACK,iBAAiB,CAAC;cACtDY,cAAc,CAACzG,OAAO,GAAGA,OAAO;cAChCmG,wBAAwB,CAAC3E,IAAI,CAAC,IAAI,EAAElC,IAAI,EAAEU,OAAO,EAAEqG,OAAO,CAAC;;YAG7DI,cAAc,CAACC,QAAQ,IAAI,CAAC;WAC7B,CAAC,OAAO/F,CAAC,EAAE;YACV;YACA;UAAA;;QAIJ,OAAOwF,wBAAwB,CAAC3E,IAAI,CAAC,IAAI,EAAElC,IAAI,EAAE8G,QAAQ,EAAEC,OAAO,CAAC;MACrE,CAAC;IACH,CAAC,CAAC;IAEFvH,IAAI,CAACmH,KAAK,EAAE,qBAAqB,EAAE,UAASU,2BAAgD;MAC1F,OAAO,UAELrH,IAAY,EACZ8G,QAA4C,EAC5CC,OAAwC;QAExC,IAAI/G,IAAI,KAAK,OAAO,IAAIA,IAAI,IAAI,UAAU,EAAE;UAC1C,IAAI;YACF,IAAMgH,EAAE,GAAG,IAA2B;YACtC,IAAMM,UAAQ,GAAGN,EAAE,CAACE,mCAAmC,IAAI,EAAE;YAC7D,IAAMC,cAAc,GAAGG,UAAQ,CAACtH,IAAI,CAAC;YAErC,IAAImH,cAAc,EAAE;cAClBA,cAAc,CAACC,QAAQ,IAAI,CAAC;cAC5B;cACA,IAAID,cAAc,CAACC,QAAQ,IAAI,CAAC,EAAE;gBAChCC,2BAA2B,CAACnF,IAAI,CAAC,IAAI,EAAElC,IAAI,EAAEmH,cAAc,CAACzG,OAAO,EAAEqG,OAAO,CAAC;gBAC7EI,cAAc,CAACzG,OAAO,GAAG4D,SAAS;gBAClC,OAAOgD,UAAQ,CAACtH,IAAI,CAAC,CAAC,CAAC;;cAGzB;cACA,IAAIuH,MAAM,CAACC,IAAI,CAACF,UAAQ,CAAC,CAACxF,MAAM,KAAK,CAAC,EAAE;gBACtC,OAAOkF,EAAE,CAACE,mCAAmC;;;WAGlD,CAAC,OAAO7F,CAAC,EAAE;YACV;YACA;UAAA;;QAIJ,OAAOgG,2BAA2B,CAACnF,IAAI,CAAC,IAAI,EAAElC,IAAI,EAAE8G,QAAQ,EAAEC,OAAO,CAAC;MACxE,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEA,IAAIU,kBAAkB,GAAwB,IAAI;AAClD;AACA,SAASnH,eAAeA,CAAA;EACtBmH,kBAAkB,GAAG7H,MAAM,CAAC8H,OAAO;EAEnC9H,MAAM,CAAC8H,OAAO,GAAG,UAASC,GAAQ,EAAEnF,GAAQ,EAAEoF,IAAS,EAAEC,MAAW,EAAEvG,KAAU;IAC9ET,eAAe,CAAC,OAAO,EAAE;MACvBgH,MAAM,EAAAA,MAAA;MACNvG,KAAK,EAAAA,KAAA;MACLsG,IAAI,EAAAA,IAAA;MACJD,GAAG,EAAAA,GAAA;MACHnF,GAAG,EAAAA;KACJ,CAAC;IAEF,IAAIiF,kBAAkB,EAAE;MACtB;MACA,OAAOA,kBAAkB,CAACxF,KAAK,CAAC,IAAI,EAAEJ,SAAS,CAAC;;IAGlD,OAAO,KAAK;EACd,CAAC;AACH;AAEA,IAAIiG,+BAA+B,GAA8B,IAAI;AACrE;AACA,SAASvH,4BAA4BA,CAAA;EACnCuH,+BAA+B,GAAGlI,MAAM,CAACmI,oBAAoB;EAE7DnI,MAAM,CAACmI,oBAAoB,GAAG,UAAS1G,CAAM;IAC3CR,eAAe,CAAC,oBAAoB,EAAEQ,CAAC,CAAC;IAExC,IAAIyG,+BAA+B,EAAE;MACnC;MACA,OAAOA,+BAA+B,CAAC7F,KAAK,CAAC,IAAI,EAAEJ,SAAS,CAAC;;IAG/D,OAAO,IAAI;EACb,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}