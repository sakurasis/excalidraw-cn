{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { basename, getGlobalObject, logger, timestampWithMs } from '@sentry/utils';\n/**\n * Used to extract Tracing integration from the current client,\n * without the need to import `Tracing` itself from the @sentry/apm package.\n * @deprecated as @sentry/tracing should be used over @sentry/apm.\n */\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\n/**\n * Used to extract BrowserTracing integration from @sentry/tracing\n */\nvar BROWSER_TRACING_GETTER = {\n  id: 'BrowserTracing'\n};\n// Mappings from operation to corresponding lifecycle hook.\nvar HOOKS = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated']\n};\nvar COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\\w)/g;\nvar ROOT_COMPONENT_NAME = 'root';\nvar ANONYMOUS_COMPONENT_NAME = 'anonymous component';\n/** JSDoc */\nvar Vue = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Vue(options) {\n    var _this = this;\n    /**\n     * @inheritDoc\n     */\n    this.name = Vue.id;\n    /**\n     * Cache holding already processed component names\n     */\n    this._componentsCache = {};\n    /** Keep it as attribute function, to keep correct `this` binding inside the hooks callbacks  */\n    // eslint-disable-next-line @typescript-eslint/typedef\n    this._applyTracingHooks = function (vm, getCurrentHub) {\n      // Don't attach twice, just in case\n      if (vm.$options.$_sentryPerfHook) {\n        return;\n      }\n      vm.$options.$_sentryPerfHook = true;\n      var name = _this._getComponentName(vm);\n      var rootMount = name === ROOT_COMPONENT_NAME;\n      var spans = {};\n      // Render hook starts after once event is emitted,\n      // but it ends before the second event of the same type.\n      //\n      // Because of this, we start measuring inside the first event,\n      // but finish it before it triggers, to skip the event emitter timing itself.\n      var rootHandler = function (hook) {\n        var now = timestampWithMs();\n        // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n        if (_this._rootSpan) {\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            // Create an activity on the first event call. There'll be no second call, as rootSpan will be in place,\n            // thus new event handler won't be attached.\n            // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n            // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n            /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n            // eslint-disable-next-line deprecation/deprecation\n            var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n            if (tracingIntegration) {\n              _this._tracingActivity = tracingIntegration.constructor.pushActivity('Vue Application Render');\n              var transaction = tracingIntegration.constructor.getTransaction();\n              if (transaction) {\n                _this._rootSpan = transaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              }\n              // Use functionality from @sentry/tracing\n            } else {\n              var activeTransaction = getActiveTransaction(getCurrentHub());\n              if (activeTransaction) {\n                _this._rootSpan = activeTransaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              }\n            }\n            /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n          });\n        }\n      };\n\n      var childHandler = function (hook, operation) {\n        // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n        var shouldTrack = Array.isArray(_this._options.tracingOptions.trackComponents) ? _this._options.tracingOptions.trackComponents.indexOf(name) > -1 : _this._options.tracingOptions.trackComponents;\n        if (!_this._rootSpan || !shouldTrack) {\n          return;\n        }\n        var now = timestampWithMs();\n        var span = spans[operation];\n        // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n        if (span) {\n          span.finish();\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            if (_this._rootSpan) {\n              spans[operation] = _this._rootSpan.startChild({\n                description: \"Vue <\" + name + \">\",\n                op: operation\n              });\n            }\n          });\n        }\n      };\n      // Each component has it's own scope, so all activities are only related to one of them\n      _this._options.tracingOptions.hooks.forEach(function (operation) {\n        // Retrieve corresponding hooks from Vue lifecycle.\n        // eg. mount => ['beforeMount', 'mounted']\n        var internalHooks = HOOKS[operation];\n        if (!internalHooks) {\n          logger.warn(\"Unknown hook: \" + operation);\n          return;\n        }\n        internalHooks.forEach(function (internalHook) {\n          var handler = rootMount ? rootHandler.bind(_this, internalHook) : childHandler.bind(_this, internalHook, operation);\n          var currentValue = vm.$options[internalHook];\n          if (Array.isArray(currentValue)) {\n            vm.$options[internalHook] = __spread([handler], currentValue);\n          } else if (typeof currentValue === 'function') {\n            vm.$options[internalHook] = [handler, currentValue];\n          } else {\n            vm.$options[internalHook] = [handler];\n          }\n        });\n      });\n    };\n    logger.log('You are still using the Vue.js integration, consider moving to @sentry/vue');\n    this._options = __assign(__assign({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Vue: getGlobalObject().Vue,\n      attachProps: true,\n      logErrors: false,\n      tracing: false\n    }, options), {\n      tracingOptions: __assign({\n        hooks: ['mount', 'update'],\n        timeout: 2000,\n        trackComponents: false\n      }, options.tracingOptions)\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n  Vue.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!this._options.Vue) {\n      logger.error('Vue integration is missing a Vue instance');\n      return;\n    }\n    this._attachErrorHandler(getCurrentHub);\n    if (this._options.tracing) {\n      this._startTracing(getCurrentHub);\n    }\n  };\n  /**\n   * Extract component name from the ViewModel\n   */\n  Vue.prototype._getComponentName = function (vm) {\n    // Such level of granularity is most likely not necessary, but better safe than sorry. â€” Kamil\n    if (!vm) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n    if (vm.$root === vm) {\n      return ROOT_COMPONENT_NAME;\n    }\n    if (!vm.$options) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n    if (vm.$options.name) {\n      return vm.$options.name;\n    }\n    if (vm.$options._componentTag) {\n      return vm.$options._componentTag;\n    }\n    // injected by vue-loader\n    if (vm.$options.__file) {\n      var unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/');\n      var filename = basename(unifiedFile, '.vue');\n      return this._componentsCache[filename] || (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, function (_, c) {\n        return c ? c.toUpperCase() : '';\n      }));\n    }\n    return ANONYMOUS_COMPONENT_NAME;\n  };\n  /** Finish top-level span and activity with a debounce configured using `timeout` option */\n  Vue.prototype._finishRootSpan = function (timestamp, getCurrentHub) {\n    var _this = this;\n    if (this._rootSpanTimer) {\n      clearTimeout(this._rootSpanTimer);\n    }\n    this._rootSpanTimer = setTimeout(function () {\n      if (_this._tracingActivity) {\n        // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n        // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n        // eslint-disable-next-line deprecation/deprecation\n        var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n        if (tracingIntegration) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          tracingIntegration.constructor.popActivity(_this._tracingActivity);\n        }\n      }\n      // We should always finish the span, only should pop activity if using @sentry/apm\n      if (_this._rootSpan) {\n        _this._rootSpan.finish(timestamp);\n      }\n    }, this._options.tracingOptions.timeout);\n  };\n  /** Inject configured tracing hooks into Vue's component lifecycles */\n  Vue.prototype._startTracing = function (getCurrentHub) {\n    var applyTracingHooks = this._applyTracingHooks;\n    this._options.Vue.mixin({\n      beforeCreate: function () {\n        // eslint-disable-next-line deprecation/deprecation\n        if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {\n          // `this` points to currently rendered component\n          applyTracingHooks(this, getCurrentHub);\n        } else {\n          logger.error('Vue integration has tracing enabled, but Tracing integration is not configured');\n        }\n      }\n    });\n  };\n  /** Inject Sentry's handler into owns Vue's error handler  */\n  Vue.prototype._attachErrorHandler = function (getCurrentHub) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var currentErrorHandler = this._options.Vue.config.errorHandler;\n    this._options.Vue.config.errorHandler = function (error, vm, info) {\n      var metadata = {};\n      if (vm) {\n        try {\n          metadata.componentName = _this._getComponentName(vm);\n          if (_this._options.attachProps) {\n            metadata.propsData = vm.$options.propsData;\n          }\n        } catch (_oO) {\n          logger.warn('Unable to extract metadata from Vue component.');\n        }\n      }\n      if (info) {\n        metadata.lifecycleHook = info;\n      }\n      if (getCurrentHub().getIntegration(Vue)) {\n        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n        setTimeout(function () {\n          getCurrentHub().withScope(function (scope) {\n            scope.setContext('vue', metadata);\n            getCurrentHub().captureException(error);\n          });\n        });\n      }\n      if (typeof currentErrorHandler === 'function') {\n        currentErrorHandler.call(_this._options.Vue, error, vm, info);\n      }\n      if (_this._options.logErrors) {\n        if (_this._options.Vue.util) {\n          _this._options.Vue.util.warn(\"Error in \" + info + \": \\\"\" + (error && error.toString()) + \"\\\"\", vm);\n        }\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n  Vue.id = 'Vue';\n  return Vue;\n}();\nexport { Vue };\n/** Grabs active transaction off scope */\nexport function getActiveTransaction(hub) {\n  if (hub && hub.getScope) {\n    var scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n  return undefined;\n}","map":{"version":3,"names":["basename","getGlobalObject","logger","timestampWithMs","TRACING_GETTER","id","BROWSER_TRACING_GETTER","HOOKS","activate","create","destroy","mount","update","COMPONENT_NAME_REGEXP","ROOT_COMPONENT_NAME","ANONYMOUS_COMPONENT_NAME","Vue","options","_this","name","_componentsCache","_applyTracingHooks","vm","getCurrentHub","$options","$_sentryPerfHook","_getComponentName","rootMount","spans","rootHandler","hook","now","_rootSpan","_finishRootSpan","$once","tracingIntegration","getIntegration","_tracingActivity","constructor","pushActivity","transaction","getTransaction","startChild","description","op","activeTransaction","getActiveTransaction","childHandler","operation","shouldTrack","Array","isArray","_options","tracingOptions","trackComponents","indexOf","span","finish","hooks","forEach","internalHooks","warn","internalHook","handler","bind","currentValue","__spread","log","__assign","attachProps","logErrors","tracing","timeout","prototype","setupOnce","_","error","_attachErrorHandler","_startTracing","$root","_componentTag","__file","unifiedFile","replace","filename","c","toUpperCase","timestamp","_rootSpanTimer","clearTimeout","setTimeout","popActivity","applyTracingHooks","mixin","beforeCreate","currentErrorHandler","config","errorHandler","info","metadata","componentName","propsData","_oO","lifecycleHook","withScope","scope","setContext","captureException","call","util","toString","console","hub","getScope","undefined"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\vue.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventProcessor, Hub, Integration, IntegrationClass, Scope, Span, Transaction } from '@sentry/types';\nimport { basename, getGlobalObject, logger, timestampWithMs } from '@sentry/utils';\n\n/**\n * Used to extract Tracing integration from the current client,\n * without the need to import `Tracing` itself from the @sentry/apm package.\n * @deprecated as @sentry/tracing should be used over @sentry/apm.\n */\nconst TRACING_GETTER = ({\n  id: 'Tracing',\n} as any) as IntegrationClass<Integration>;\n\n/**\n * Used to extract BrowserTracing integration from @sentry/tracing\n */\nconst BROWSER_TRACING_GETTER = ({\n  id: 'BrowserTracing',\n} as any) as IntegrationClass<Integration>;\n\n/** Global Vue object limited to the methods/attributes we require */\ninterface VueInstance {\n  config: {\n    errorHandler?(error: Error, vm?: ViewModel, info?: string): void;\n  };\n  util?: {\n    warn(...input: any): void;\n  };\n  mixin(hooks: { [key: string]: () => void }): void;\n}\n\n/** Representation of Vue component internals */\ninterface ViewModel {\n  [key: string]: any;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  $root: object;\n  $options: {\n    [key: string]: any;\n    name?: string;\n    propsData?: { [key: string]: any };\n    _componentTag?: string;\n    __file?: string;\n    $_sentryPerfHook?: boolean;\n  };\n  $once(hook: string, cb: () => void): void;\n}\n\n/** Vue Integration configuration */\ninterface IntegrationOptions {\n  /** Vue instance to be used inside the integration */\n  Vue: VueInstance;\n\n  /**\n   * When set to `false`, Sentry will suppress reporting of all props data\n   * from your Vue components for privacy concerns.\n   */\n  attachProps: boolean;\n  /**\n   * When set to `true`, original Vue's `logError` will be called as well.\n   * https://github.com/vuejs/vue/blob/c2b1cfe9ccd08835f2d99f6ce60f67b4de55187f/src/core/util/error.js#L38-L48\n   */\n  logErrors: boolean;\n\n  /**\n   * When set to `true`, enables tracking of components lifecycle performance.\n   * It requires `Tracing` integration to be also enabled.\n   */\n  tracing: boolean;\n\n  /** {@link TracingOptions} */\n  tracingOptions: TracingOptions;\n}\n\n/** Vue specific configuration for Tracing Integration  */\ninterface TracingOptions {\n  /**\n   * Decides whether to track components by hooking into its lifecycle methods.\n   * Can be either set to `boolean` to enable/disable tracking for all of them.\n   * Or to an array of specific component names (case-sensitive).\n   */\n  trackComponents: boolean | string[];\n  /** How long to wait until the tracked root activity is marked as finished and sent of to Sentry */\n  timeout: number;\n  /**\n   * List of hooks to keep track of during component lifecycle.\n   * Available hooks: 'activate' | 'create' | 'destroy' | 'mount' | 'update'\n   * Based on https://vuejs.org/v2/api/#Options-Lifecycle-Hooks\n   */\n  hooks: Operation[];\n}\n\n/** Optional metadata attached to Sentry Event */\ninterface Metadata {\n  [key: string]: any;\n  componentName?: string;\n  propsData?: { [key: string]: any };\n  lifecycleHook?: string;\n}\n\n// https://vuejs.org/v2/api/#Options-Lifecycle-Hooks\ntype Hook =\n  | 'activated'\n  | 'beforeCreate'\n  | 'beforeDestroy'\n  | 'beforeMount'\n  | 'beforeUpdate'\n  | 'created'\n  | 'deactivated'\n  | 'destroyed'\n  | 'mounted'\n  | 'updated';\n\ntype Operation = 'activate' | 'create' | 'destroy' | 'mount' | 'update';\n\n// Mappings from operation to corresponding lifecycle hook.\nconst HOOKS: { [key in Operation]: Hook[] } = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated'],\n};\n\nconst COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\\w)/g;\nconst ROOT_COMPONENT_NAME = 'root';\nconst ANONYMOUS_COMPONENT_NAME = 'anonymous component';\n\n/** JSDoc */\nexport class Vue implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Vue';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Vue.id;\n\n  private readonly _options: IntegrationOptions;\n\n  /**\n   * Cache holding already processed component names\n   */\n  private readonly _componentsCache: { [key: string]: string } = {};\n  private _rootSpan?: Span;\n  private _rootSpanTimer?: ReturnType<typeof setTimeout>;\n  private _tracingActivity?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: Partial<Omit<IntegrationOptions, 'tracingOptions'> & { tracingOptions: Partial<TracingOptions> }>,\n  ) {\n    logger.log('You are still using the Vue.js integration, consider moving to @sentry/vue');\n    this._options = {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Vue: getGlobalObject<any>().Vue,\n      attachProps: true,\n      logErrors: false,\n      tracing: false,\n      ...options,\n      tracingOptions: {\n        hooks: ['mount', 'update'],\n        timeout: 2000,\n        trackComponents: false,\n        ...options.tracingOptions,\n      },\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._options.Vue) {\n      logger.error('Vue integration is missing a Vue instance');\n      return;\n    }\n\n    this._attachErrorHandler(getCurrentHub);\n\n    if (this._options.tracing) {\n      this._startTracing(getCurrentHub);\n    }\n  }\n\n  /**\n   * Extract component name from the ViewModel\n   */\n  private _getComponentName(vm: ViewModel): string {\n    // Such level of granularity is most likely not necessary, but better safe than sorry. â€” Kamil\n    if (!vm) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$root === vm) {\n      return ROOT_COMPONENT_NAME;\n    }\n\n    if (!vm.$options) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$options.name) {\n      return vm.$options.name;\n    }\n\n    if (vm.$options._componentTag) {\n      return vm.$options._componentTag;\n    }\n\n    // injected by vue-loader\n    if (vm.$options.__file) {\n      const unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/');\n      const filename = basename(unifiedFile, '.vue');\n      return (\n        this._componentsCache[filename] ||\n        (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, (_, c: string) =>\n          c ? c.toUpperCase() : '',\n        ))\n      );\n    }\n\n    return ANONYMOUS_COMPONENT_NAME;\n  }\n\n  /** Keep it as attribute function, to keep correct `this` binding inside the hooks callbacks  */\n  // eslint-disable-next-line @typescript-eslint/typedef\n  private readonly _applyTracingHooks = (vm: ViewModel, getCurrentHub: () => Hub): void => {\n    // Don't attach twice, just in case\n    if (vm.$options.$_sentryPerfHook) {\n      return;\n    }\n    vm.$options.$_sentryPerfHook = true;\n\n    const name = this._getComponentName(vm);\n    const rootMount = name === ROOT_COMPONENT_NAME;\n    const spans: { [key: string]: Span } = {};\n\n    // Render hook starts after once event is emitted,\n    // but it ends before the second event of the same type.\n    //\n    // Because of this, we start measuring inside the first event,\n    // but finish it before it triggers, to skip the event emitter timing itself.\n    const rootHandler = (hook: Hook): void => {\n      const now = timestampWithMs();\n\n      // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n      // However, on the second call (after), it'll be already in place.\n      if (this._rootSpan) {\n        this._finishRootSpan(now, getCurrentHub);\n      } else {\n        vm.$once(`hook:${hook}`, () => {\n          // Create an activity on the first event call. There'll be no second call, as rootSpan will be in place,\n          // thus new event handler won't be attached.\n\n          // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n          // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n          /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n          // eslint-disable-next-line deprecation/deprecation\n          const tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n          if (tracingIntegration) {\n            this._tracingActivity = (tracingIntegration as any).constructor.pushActivity('Vue Application Render');\n            const transaction = (tracingIntegration as any).constructor.getTransaction();\n            if (transaction) {\n              this._rootSpan = transaction.startChild({\n                description: 'Application Render',\n                op: 'Vue',\n              });\n            }\n            // Use functionality from @sentry/tracing\n          } else {\n            const activeTransaction = getActiveTransaction(getCurrentHub());\n            if (activeTransaction) {\n              this._rootSpan = activeTransaction.startChild({\n                description: 'Application Render',\n                op: 'Vue',\n              });\n            }\n          }\n          /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n        });\n      }\n    };\n\n    const childHandler = (hook: Hook, operation: Operation): void => {\n      // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n      const shouldTrack = Array.isArray(this._options.tracingOptions.trackComponents)\n        ? this._options.tracingOptions.trackComponents.indexOf(name) > -1\n        : this._options.tracingOptions.trackComponents;\n\n      if (!this._rootSpan || !shouldTrack) {\n        return;\n      }\n\n      const now = timestampWithMs();\n      const span = spans[operation];\n\n      // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n      // However, on the second call (after), it'll be already in place.\n      if (span) {\n        span.finish();\n        this._finishRootSpan(now, getCurrentHub);\n      } else {\n        vm.$once(`hook:${hook}`, () => {\n          if (this._rootSpan) {\n            spans[operation] = this._rootSpan.startChild({\n              description: `Vue <${name}>`,\n              op: operation,\n            });\n          }\n        });\n      }\n    };\n\n    // Each component has it's own scope, so all activities are only related to one of them\n    this._options.tracingOptions.hooks.forEach(operation => {\n      // Retrieve corresponding hooks from Vue lifecycle.\n      // eg. mount => ['beforeMount', 'mounted']\n      const internalHooks = HOOKS[operation];\n\n      if (!internalHooks) {\n        logger.warn(`Unknown hook: ${operation}`);\n        return;\n      }\n\n      internalHooks.forEach(internalHook => {\n        const handler = rootMount\n          ? rootHandler.bind(this, internalHook)\n          : childHandler.bind(this, internalHook, operation);\n        const currentValue = vm.$options[internalHook];\n\n        if (Array.isArray(currentValue)) {\n          vm.$options[internalHook] = [handler, ...currentValue];\n        } else if (typeof currentValue === 'function') {\n          vm.$options[internalHook] = [handler, currentValue];\n        } else {\n          vm.$options[internalHook] = [handler];\n        }\n      });\n    });\n  };\n\n  /** Finish top-level span and activity with a debounce configured using `timeout` option */\n  private _finishRootSpan(timestamp: number, getCurrentHub: () => Hub): void {\n    if (this._rootSpanTimer) {\n      clearTimeout(this._rootSpanTimer);\n    }\n\n    this._rootSpanTimer = setTimeout(() => {\n      if (this._tracingActivity) {\n        // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n        // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n        // eslint-disable-next-line deprecation/deprecation\n        const tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n        if (tracingIntegration) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          (tracingIntegration as any).constructor.popActivity(this._tracingActivity);\n        }\n      }\n\n      // We should always finish the span, only should pop activity if using @sentry/apm\n      if (this._rootSpan) {\n        this._rootSpan.finish(timestamp);\n      }\n    }, this._options.tracingOptions.timeout);\n  }\n\n  /** Inject configured tracing hooks into Vue's component lifecycles */\n  private _startTracing(getCurrentHub: () => Hub): void {\n    const applyTracingHooks = this._applyTracingHooks;\n\n    this._options.Vue.mixin({\n      beforeCreate(this: ViewModel): void {\n        // eslint-disable-next-line deprecation/deprecation\n        if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {\n          // `this` points to currently rendered component\n          applyTracingHooks(this, getCurrentHub);\n        } else {\n          logger.error('Vue integration has tracing enabled, but Tracing integration is not configured');\n        }\n      },\n    });\n  }\n\n  /** Inject Sentry's handler into owns Vue's error handler  */\n  private _attachErrorHandler(getCurrentHub: () => Hub): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const currentErrorHandler = this._options.Vue.config.errorHandler;\n\n    this._options.Vue.config.errorHandler = (error: Error, vm?: ViewModel, info?: string): void => {\n      const metadata: Metadata = {};\n\n      if (vm) {\n        try {\n          metadata.componentName = this._getComponentName(vm);\n\n          if (this._options.attachProps) {\n            metadata.propsData = vm.$options.propsData;\n          }\n        } catch (_oO) {\n          logger.warn('Unable to extract metadata from Vue component.');\n        }\n      }\n\n      if (info) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n        setTimeout(() => {\n          getCurrentHub().withScope(scope => {\n            scope.setContext('vue', metadata);\n            getCurrentHub().captureException(error);\n          });\n        });\n      }\n\n      if (typeof currentErrorHandler === 'function') {\n        currentErrorHandler.call(this._options.Vue, error, vm, info);\n      }\n\n      if (this._options.logErrors) {\n        if (this._options.Vue.util) {\n          this._options.Vue.util.warn(`Error in ${info}: \"${error && error.toString()}\"`, vm);\n        }\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    };\n  }\n}\n\ninterface HubType extends Hub {\n  getScope?(): Scope | undefined;\n}\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: HubType): T | undefined {\n  if (hub && hub.getScope) {\n    const scope = hub.getScope() as Scope;\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}