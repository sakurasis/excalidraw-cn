{"ast":null,"code":"import _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { HachureFiller } from './hachure-filler';\nimport { polygonHachureLines } from './scan-line-hachure';\nimport { lineLength } from '../geometry';\nexport var ZigZagFiller = /*#__PURE__*/function (_HachureFiller) {\n  _inherits(ZigZagFiller, _HachureFiller);\n  var _super = _createSuper(ZigZagFiller);\n  function ZigZagFiller() {\n    _classCallCheck(this, ZigZagFiller);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ZigZagFiller, [{\n    key: \"fillPolygons\",\n    value: function fillPolygons(polygonList, o) {\n      var gap = o.hachureGap;\n      if (gap < 0) {\n        gap = o.strokeWidth * 4;\n      }\n      gap = Math.max(gap, 0.1);\n      var o2 = Object.assign({}, o, {\n        hachureGap: gap\n      });\n      var lines = polygonHachureLines(polygonList, o2);\n      var zigZagAngle = Math.PI / 180 * o.hachureAngle;\n      var zigzagLines = [];\n      var dgx = gap * 0.5 * Math.cos(zigZagAngle);\n      var dgy = gap * 0.5 * Math.sin(zigZagAngle);\n      var _iterator = _createForOfIteratorHelper(lines),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            p1 = _step$value[0],\n            p2 = _step$value[1];\n          if (lineLength([p1, p2])) {\n            zigzagLines.push([[p1[0] - dgx, p1[1] + dgy], _toConsumableArray(p2)], [[p1[0] + dgx, p1[1] - dgy], _toConsumableArray(p2)]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var ops = this.renderLines(zigzagLines, o);\n      return {\n        type: 'fillSketch',\n        ops: ops\n      };\n    }\n  }]);\n  return ZigZagFiller;\n}(HachureFiller);","map":{"version":3,"names":["HachureFiller","polygonHachureLines","lineLength","ZigZagFiller","_HachureFiller","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","fillPolygons","polygonList","o","gap","hachureGap","strokeWidth","Math","max","o2","Object","assign","lines","zigZagAngle","PI","hachureAngle","zigzagLines","dgx","cos","dgy","sin","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","p1","p2","push","_toConsumableArray","err","e","f","ops","renderLines","type"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/zigzag-filler.js"],"sourcesContent":["import { HachureFiller } from './hachure-filler';\nimport { polygonHachureLines } from './scan-line-hachure';\nimport { lineLength } from '../geometry';\nexport class ZigZagFiller extends HachureFiller {\n    fillPolygons(polygonList, o) {\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        const o2 = Object.assign({}, o, { hachureGap: gap });\n        const lines = polygonHachureLines(polygonList, o2);\n        const zigZagAngle = (Math.PI / 180) * o.hachureAngle;\n        const zigzagLines = [];\n        const dgx = gap * 0.5 * Math.cos(zigZagAngle);\n        const dgy = gap * 0.5 * Math.sin(zigZagAngle);\n        for (const [p1, p2] of lines) {\n            if (lineLength([p1, p2])) {\n                zigzagLines.push([\n                    [p1[0] - dgx, p1[1] + dgy],\n                    [...p2],\n                ], [\n                    [p1[0] + dgx, p1[1] - dgy],\n                    [...p2],\n                ]);\n            }\n        }\n        const ops = this.renderLines(zigzagLines, o);\n        return { type: 'fillSketch', ops };\n    }\n}\n"],"mappings":";;;;;;;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,UAAU,QAAQ,aAAa;AACxC,WAAaC,YAAY,0BAAAC,cAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,cAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAAA,SAAAA,aAAA;IAAAK,eAAA,OAAAL,YAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,YAAA;IAAAS,GAAA;IAAAC,KAAA,EACrB,SAAAC,aAAaC,WAAW,EAAEC,CAAC,EAAE;MACzB,IAAIC,GAAG,GAAGD,CAAC,CAACE,UAAU;MACtB,IAAID,GAAG,GAAG,CAAC,EAAE;QACTA,GAAG,GAAGD,CAAC,CAACG,WAAW,GAAG,CAAC;MAC3B;MACAF,GAAG,GAAGG,IAAI,CAACC,GAAG,CAACJ,GAAG,EAAE,GAAG,CAAC;MACxB,IAAMK,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,CAAC,EAAE;QAAEE,UAAU,EAAED;MAAI,CAAC,CAAC;MACpD,IAAMQ,KAAK,GAAGxB,mBAAmB,CAACc,WAAW,EAAEO,EAAE,CAAC;MAClD,IAAMI,WAAW,GAAIN,IAAI,CAACO,EAAE,GAAG,GAAG,GAAIX,CAAC,CAACY,YAAY;MACpD,IAAMC,WAAW,GAAG,EAAE;MACtB,IAAMC,GAAG,GAAGb,GAAG,GAAG,GAAG,GAAGG,IAAI,CAACW,GAAG,CAACL,WAAW,CAAC;MAC7C,IAAMM,GAAG,GAAGf,GAAG,GAAG,GAAG,GAAGG,IAAI,CAACa,GAAG,CAACP,WAAW,CAAC;MAAC,IAAAQ,SAAA,GAAAC,0BAAA,CACvBV,KAAK;QAAAW,KAAA;MAAA;QAA5B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA8B;UAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAvB,KAAA;YAAlB6B,EAAE,GAAAF,WAAA;YAAEG,EAAE,GAAAH,WAAA;UACd,IAAItC,UAAU,CAAC,CAACwC,EAAE,EAAEC,EAAE,CAAC,CAAC,EAAE;YACtBd,WAAW,CAACe,IAAI,CAAC,CACb,CAACF,EAAE,CAAC,CAAC,CAAC,GAAGZ,GAAG,EAAEY,EAAE,CAAC,CAAC,CAAC,GAAGV,GAAG,CAAC,EAAAa,kBAAA,CACtBF,EAAE,EACT,EAAE,CACC,CAACD,EAAE,CAAC,CAAC,CAAC,GAAGZ,GAAG,EAAEY,EAAE,CAAC,CAAC,CAAC,GAAGV,GAAG,CAAC,EAAAa,kBAAA,CACtBF,EAAE,EACT,CAAC;UACN;QACJ;MAAC,SAAAG,GAAA;QAAAZ,SAAA,CAAAa,CAAA,CAAAD,GAAA;MAAA;QAAAZ,SAAA,CAAAc,CAAA;MAAA;MACD,IAAMC,GAAG,GAAG,IAAI,CAACC,WAAW,CAACrB,WAAW,EAAEb,CAAC,CAAC;MAC5C,OAAO;QAAEmC,IAAI,EAAE,YAAY;QAAEF,GAAG,EAAHA;MAAI,CAAC;IACtC;EAAC;EAAA,OAAA9C,YAAA;AAAA,EA1B6BH,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}