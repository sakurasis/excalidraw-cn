{"ast":null,"code":"import _toConsumableArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _createClass from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createForOfIteratorHelper from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{getCommonBounds,getElementAbsoluteCoords,isTextElement}from\"./element\";import{isPointWithinBounds}from\"./math\";import{getBoundTextElement,getContainerElement}from\"./element/textElement\";import{arrayToMap,findIndex}from\"./utils\";import{mutateElement}from\"./element/mutateElement\";import{getElementsWithinSelection,getSelectedElements}from\"./scene\";import{isFrameElement}from\"./element\";import{moveOneRight}from\"./zindex\";import{getElementsInGroup,selectGroupsFromGivenElements}from\"./groups\";import Scene from\"./scene/Scene\";import{getElementLineSegments}from\"./element/bounds\";// --------------------------- Frame State ------------------------------------\nexport var bindElementsToFramesAfterDuplication=function bindElementsToFramesAfterDuplication(nextElements,oldElements,oldIdToDuplicatedId){var nextElementMap=arrayToMap(nextElements);var _iterator=_createForOfIteratorHelper(oldElements),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var element=_step.value;if(element.frameId){// use its frameId to get the new frameId\nvar nextElementId=oldIdToDuplicatedId.get(element.id);var nextFrameId=oldIdToDuplicatedId.get(element.frameId);if(nextElementId){var nextElement=nextElementMap.get(nextElementId);if(nextElement){mutateElement(nextElement,{frameId:nextFrameId!==null&&nextFrameId!==void 0?nextFrameId:element.frameId},false);}}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}};// --------------------------- Frame Geometry ---------------------------------\nvar Point=/*#__PURE__*/_createClass(function Point(x,y){_classCallCheck(this,Point);this.x=void 0;this.y=void 0;this.x=x;this.y=y;});var LineSegment=/*#__PURE__*/function(){function LineSegment(pointA,pointB){_classCallCheck(this,LineSegment);this.first=void 0;this.second=void 0;this.first=pointA;this.second=pointB;}_createClass(LineSegment,[{key:\"getBoundingBox\",value:function getBoundingBox(){return[new Point(Math.min(this.first.x,this.second.x),Math.min(this.first.y,this.second.y)),new Point(Math.max(this.first.x,this.second.x),Math.max(this.first.y,this.second.y))];}}]);return LineSegment;}();// https://martin-thoma.com/how-to-check-if-two-line-segments-intersect/\nvar FrameGeometry=/*#__PURE__*/function(){function FrameGeometry(){_classCallCheck(this,FrameGeometry);}_createClass(FrameGeometry,null,[{key:\"crossProduct\",value:function crossProduct(a,b){return a.x*b.y-b.x*a.y;}},{key:\"doBoundingBoxesIntersect\",value:function doBoundingBoxesIntersect(a,b){return a[0].x<=b[1].x&&a[1].x>=b[0].x&&a[0].y<=b[1].y&&a[1].y>=b[0].y;}},{key:\"isPointOnLine\",value:function isPointOnLine(a,b){var aTmp=new LineSegment(new Point(0,0),new Point(a.second.x-a.first.x,a.second.y-a.first.y));var bTmp=new Point(b.x-a.first.x,b.y-a.first.y);var r=this.crossProduct(aTmp.second,bTmp);return Math.abs(r)<this.EPSILON;}},{key:\"isPointRightOfLine\",value:function isPointRightOfLine(a,b){var aTmp=new LineSegment(new Point(0,0),new Point(a.second.x-a.first.x,a.second.y-a.first.y));var bTmp=new Point(b.x-a.first.x,b.y-a.first.y);return this.crossProduct(aTmp.second,bTmp)<0;}},{key:\"lineSegmentTouchesOrCrossesLine\",value:function lineSegmentTouchesOrCrossesLine(a,b){return this.isPointOnLine(a,b.first)||this.isPointOnLine(a,b.second)||(this.isPointRightOfLine(a,b.first)?!this.isPointRightOfLine(a,b.second):this.isPointRightOfLine(a,b.second));}},{key:\"doLineSegmentsIntersect\",value:function doLineSegmentsIntersect(a,b){var aSegment=new LineSegment(new Point(a[0][0],a[0][1]),new Point(a[1][0],a[1][1]));var bSegment=new LineSegment(new Point(b[0][0],b[0][1]),new Point(b[1][0],b[1][1]));var box1=aSegment.getBoundingBox();var box2=bSegment.getBoundingBox();return this.doBoundingBoxesIntersect(box1,box2)&&this.lineSegmentTouchesOrCrossesLine(aSegment,bSegment)&&this.lineSegmentTouchesOrCrossesLine(bSegment,aSegment);}},{key:\"isElementIntersectingFrame\",value:function isElementIntersectingFrame(element,frame){var _this=this;var frameLineSegments=getElementLineSegments(frame);var elementLineSegments=getElementLineSegments(element);var intersecting=frameLineSegments.some(function(frameLineSegment){return elementLineSegments.some(function(elementLineSegment){return _this.doLineSegmentsIntersect(frameLineSegment,elementLineSegment);});});return intersecting;}}]);return FrameGeometry;}();FrameGeometry.EPSILON=0.000001;export var getElementsCompletelyInFrame=function getElementsCompletelyInFrame(elements,frame){return omitGroupsContainingFrames(getElementsWithinSelection(elements,frame,false)).filter(function(element){return element.type!==\"frame\"&&!element.frameId||element.frameId===frame.id;});};export var isElementContainingFrame=function isElementContainingFrame(elements,element,frame){return getElementsWithinSelection(elements,element).some(function(e){return e.id===frame.id;});};export var getElementsIntersectingFrame=function getElementsIntersectingFrame(elements,frame){return elements.filter(function(element){return FrameGeometry.isElementIntersectingFrame(element,frame);});};export var elementsAreInFrameBounds=function elementsAreInFrameBounds(elements,frame){var _getElementAbsoluteCo=getElementAbsoluteCoords(frame),_getElementAbsoluteCo2=_slicedToArray(_getElementAbsoluteCo,4),selectionX1=_getElementAbsoluteCo2[0],selectionY1=_getElementAbsoluteCo2[1],selectionX2=_getElementAbsoluteCo2[2],selectionY2=_getElementAbsoluteCo2[3];var _getCommonBounds=getCommonBounds(elements),_getCommonBounds2=_slicedToArray(_getCommonBounds,4),elementX1=_getCommonBounds2[0],elementY1=_getCommonBounds2[1],elementX2=_getCommonBounds2[2],elementY2=_getCommonBounds2[3];return selectionX1<=elementX1&&selectionY1<=elementY1&&selectionX2>=elementX2&&selectionY2>=elementY2;};export var elementOverlapsWithFrame=function elementOverlapsWithFrame(element,frame){return elementsAreInFrameBounds([element],frame)||FrameGeometry.isElementIntersectingFrame(element,frame)||isElementContainingFrame([frame],element,frame);};export var isCursorInFrame=function isCursorInFrame(cursorCoords,frame){var _getElementAbsoluteCo3=getElementAbsoluteCoords(frame),_getElementAbsoluteCo4=_slicedToArray(_getElementAbsoluteCo3,4),fx1=_getElementAbsoluteCo4[0],fy1=_getElementAbsoluteCo4[1],fx2=_getElementAbsoluteCo4[2],fy2=_getElementAbsoluteCo4[3];return isPointWithinBounds([fx1,fy1],[cursorCoords.x,cursorCoords.y],[fx2,fy2]);};export var groupsAreAtLeastIntersectingTheFrame=function groupsAreAtLeastIntersectingTheFrame(elements,groupIds,frame){var elementsInGroup=groupIds.flatMap(function(groupId){return getElementsInGroup(elements,groupId);});if(elementsInGroup.length===0){return true;}return!!elementsInGroup.find(function(element){return elementsAreInFrameBounds([element],frame)||FrameGeometry.isElementIntersectingFrame(element,frame);});};export var groupsAreCompletelyOutOfFrame=function groupsAreCompletelyOutOfFrame(elements,groupIds,frame){var elementsInGroup=groupIds.flatMap(function(groupId){return getElementsInGroup(elements,groupId);});if(elementsInGroup.length===0){return true;}return elementsInGroup.find(function(element){return elementsAreInFrameBounds([element],frame)||FrameGeometry.isElementIntersectingFrame(element,frame);})===undefined;};// --------------------------- Frame Utils ------------------------------------\n/**\n * Returns a map of frameId to frame elements. Includes empty frames.\n */export var groupByFrames=function groupByFrames(elements){var frameElementsMap=new Map();var _iterator2=_createForOfIteratorHelper(elements),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var element=_step2.value;var frameId=isFrameElement(element)?element.id:element.frameId;if(frameId&&!frameElementsMap.has(frameId)){frameElementsMap.set(frameId,getFrameElements(elements,frameId));}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return frameElementsMap;};export var getFrameElements=function getFrameElements(allElements,frameId){return allElements.filter(function(element){return element.frameId===frameId;});};export var getElementsInResizingFrame=function getElementsInResizingFrame(allElements,frame,appState){var prevElementsInFrame=getFrameElements(allElements,frame.id);var nextElementsInFrame=new Set(prevElementsInFrame);var elementsCompletelyInFrame=new Set([].concat(_toConsumableArray(getElementsCompletelyInFrame(allElements,frame)),_toConsumableArray(prevElementsInFrame.filter(function(element){return isElementContainingFrame(allElements,element,frame);}))));var elementsNotCompletelyInFrame=prevElementsInFrame.filter(function(element){return!elementsCompletelyInFrame.has(element);});// for elements that are completely in the frame\n// if they are part of some groups, then those groups are still\n// considered to belong to the frame\nvar groupsToKeep=new Set(Array.from(elementsCompletelyInFrame).flatMap(function(element){return element.groupIds;}));var _iterator3=_createForOfIteratorHelper(elementsNotCompletelyInFrame),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var _element2=_step3.value;if(!FrameGeometry.isElementIntersectingFrame(_element2,frame)){if(_element2.groupIds.length===0){nextElementsInFrame.delete(_element2);}}else if(_element2.groupIds.length>0){// group element intersects with the frame, we should keep the groups\n// that this element is part of\nvar _iterator7=_createForOfIteratorHelper(_element2.groupIds),_step7;try{for(_iterator7.s();!(_step7=_iterator7.n()).done;){var _id=_step7.value;groupsToKeep.add(_id);}}catch(err){_iterator7.e(err);}finally{_iterator7.f();}}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(elementsNotCompletelyInFrame),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _element3=_step4.value;if(_element3.groupIds.length>0){var shouldRemoveElement=true;var _iterator8=_createForOfIteratorHelper(_element3.groupIds),_step8;try{for(_iterator8.s();!(_step8=_iterator8.n()).done;){var _id2=_step8.value;if(groupsToKeep.has(_id2)){shouldRemoveElement=false;}}}catch(err){_iterator8.e(err);}finally{_iterator8.f();}if(shouldRemoveElement){nextElementsInFrame.delete(_element3);}}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}var individualElementsCompletelyInFrame=Array.from(elementsCompletelyInFrame).filter(function(element){return element.groupIds.length===0;});var _iterator5=_createForOfIteratorHelper(individualElementsCompletelyInFrame),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var _element4=_step5.value;nextElementsInFrame.add(_element4);}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}var newGroupElementsCompletelyInFrame=Array.from(elementsCompletelyInFrame).filter(function(element){return element.groupIds.length>0;});var groupIds=selectGroupsFromGivenElements(newGroupElementsCompletelyInFrame,appState);// new group elements\nfor(var _i=0,_Object$entries=Object.entries(groupIds);_i<_Object$entries.length;_i++){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),id=_Object$entries$_i[0],isSelected=_Object$entries$_i[1];if(isSelected){var elementsInGroup=getElementsInGroup(allElements,id);if(elementsAreInFrameBounds(elementsInGroup,frame)){var _iterator6=_createForOfIteratorHelper(elementsInGroup),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var element=_step6.value;nextElementsInFrame.add(element);}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}}}return _toConsumableArray(nextElementsInFrame).filter(function(element){return!(isTextElement(element)&&element.containerId);});};export var getElementsInNewFrame=function getElementsInNewFrame(allElements,frame){return omitGroupsContainingFrames(allElements,getElementsCompletelyInFrame(allElements,frame));};export var getContainingFrame=function getContainingFrame(element,elementsMap){if(element.frameId){var _Scene$getScene;if(elementsMap){return elementsMap.get(element.frameId)||null;}return((_Scene$getScene=Scene.getScene(element))===null||_Scene$getScene===void 0?void 0:_Scene$getScene.getElement(element.frameId))||null;}return null;};// --------------------------- Frame Operations -------------------------------\nexport var addElementsToFrame=function addElementsToFrame(allElements,elementsToAdd,frame){var _elementsToAdd=[];var _iterator9=_createForOfIteratorHelper(elementsToAdd),_step9;try{for(_iterator9.s();!(_step9=_iterator9.n()).done;){var element=_step9.value;_elementsToAdd.push(element);var boundTextElement=getBoundTextElement(element);if(boundTextElement){_elementsToAdd.push(boundTextElement);}}}catch(err){_iterator9.e(err);}finally{_iterator9.f();}var nextElements=allElements.slice();var frameBoundary=findIndex(nextElements,function(e){return e.frameId===frame.id;});var _iterator10=_createForOfIteratorHelper(omitGroupsContainingFrames(allElements,_elementsToAdd)),_step10;try{var _loop=function _loop(){var element=_step10.value;if(element.frameId!==frame.id&&!isFrameElement(element)){mutateElement(element,{frameId:frame.id},false);var frameIndex=findIndex(nextElements,function(e){return e.id===frame.id;});var elementIndex=findIndex(nextElements,function(e){return e.id===element.id;});if(elementIndex<frameBoundary){nextElements=[].concat(_toConsumableArray(nextElements.slice(0,elementIndex)),_toConsumableArray(nextElements.slice(elementIndex+1,frameBoundary)),[element],_toConsumableArray(nextElements.slice(frameBoundary)));}else if(elementIndex>frameIndex){nextElements=[].concat(_toConsumableArray(nextElements.slice(0,frameIndex)),[element],_toConsumableArray(nextElements.slice(frameIndex,elementIndex)),_toConsumableArray(nextElements.slice(elementIndex+1)));}}};for(_iterator10.s();!(_step10=_iterator10.n()).done;){_loop();}}catch(err){_iterator10.e(err);}finally{_iterator10.f();}return nextElements;};export var removeElementsFromFrame=function removeElementsFromFrame(allElements,elementsToRemove,appState){var _elementsToRemove=[];var _iterator11=_createForOfIteratorHelper(elementsToRemove),_step11;try{for(_iterator11.s();!(_step11=_iterator11.n()).done;){var _element5=_step11.value;if(_element5.frameId){_elementsToRemove.push(_element5);var boundTextElement=getBoundTextElement(_element5);if(boundTextElement){_elementsToRemove.push(boundTextElement);}}}}catch(err){_iterator11.e(err);}finally{_iterator11.f();}for(var _i2=0,_elementsToRemove2=_elementsToRemove;_i2<_elementsToRemove2.length;_i2++){var element=_elementsToRemove2[_i2];mutateElement(element,{frameId:null},false);}var nextElements=moveOneRight(allElements,appState,Array.from(_elementsToRemove));return nextElements;};export var removeAllElementsFromFrame=function removeAllElementsFromFrame(allElements,frame,appState){var elementsInFrame=getFrameElements(allElements,frame.id);return removeElementsFromFrame(allElements,elementsInFrame,appState);};export var replaceAllElementsInFrame=function replaceAllElementsInFrame(allElements,nextElementsInFrame,frame,appState){return addElementsToFrame(removeAllElementsFromFrame(allElements,frame,appState),nextElementsInFrame,frame);};/** does not mutate elements, but return new ones */export var updateFrameMembershipOfSelectedElements=function updateFrameMembershipOfSelectedElements(allElements,appState,app){var selectedElements=app.scene.getSelectedElements({selectedElementIds:appState.selectedElementIds,// supplying elements explicitly in case we're passed non-state elements\nelements:allElements});var elementsToFilter=new Set(selectedElements);if(appState.editingGroupId){var _iterator12=_createForOfIteratorHelper(selectedElements),_step12;try{for(_iterator12.s();!(_step12=_iterator12.n()).done;){var element=_step12.value;if(element.groupIds.length===0){elementsToFilter.add(element);}else{element.groupIds.flatMap(function(gid){return getElementsInGroup(allElements,gid);}).forEach(function(element){return elementsToFilter.add(element);});}}}catch(err){_iterator12.e(err);}finally{_iterator12.f();}}var elementsToRemove=new Set();elementsToFilter.forEach(function(element){if(element.frameId&&!isFrameElement(element)&&!isElementInFrame(element,allElements,appState)){elementsToRemove.add(element);}});return elementsToRemove.size>0?removeElementsFromFrame(allElements,_toConsumableArray(elementsToRemove),appState):allElements;};/**\n * filters out elements that are inside groups that contain a frame element\n * anywhere in the group tree\n */export var omitGroupsContainingFrames=function omitGroupsContainingFrames(allElements,selectedElements){var uniqueGroupIds=new Set();var _iterator13=_createForOfIteratorHelper(selectedElements||allElements),_step13;try{for(_iterator13.s();!(_step13=_iterator13.n()).done;){var el=_step13.value;var topMostGroupId=el.groupIds[el.groupIds.length-1];if(topMostGroupId){uniqueGroupIds.add(topMostGroupId);}}}catch(err){_iterator13.e(err);}finally{_iterator13.f();}var rejectedGroupIds=new Set();var _iterator14=_createForOfIteratorHelper(uniqueGroupIds),_step14;try{for(_iterator14.s();!(_step14=_iterator14.n()).done;){var groupId=_step14.value;if(getElementsInGroup(allElements,groupId).some(function(el){return isFrameElement(el);})){rejectedGroupIds.add(groupId);}}}catch(err){_iterator14.e(err);}finally{_iterator14.f();}return(selectedElements||allElements).filter(function(el){return!rejectedGroupIds.has(el.groupIds[el.groupIds.length-1]);});};/**\n * depending on the appState, return target frame, which is the frame the given element\n * is going to be added to or remove from\n */export var getTargetFrame=function getTargetFrame(element,appState){var _element=isTextElement(element)?getContainerElement(element)||element:element;return appState.selectedElementIds[_element.id]&&appState.selectedElementsAreBeingDragged?appState.frameToHighlight:getContainingFrame(_element);};// given an element, return if the element is in some frame\nexport var isElementInFrame=function isElementInFrame(element,allElements,appState){var frame=getTargetFrame(element,appState);var _element=isTextElement(element)?getContainerElement(element)||element:element;if(frame){if(_element.groupIds.length===0){return elementOverlapsWithFrame(_element,frame);}var allElementsInGroup=new Set(_element.groupIds.flatMap(function(gid){return getElementsInGroup(allElements,gid);}));if(appState.editingGroupId&&appState.selectedElementsAreBeingDragged){var selectedElements=new Set(getSelectedElements(allElements,appState));var editingGroupOverlapsFrame=appState.frameToHighlight!==null;if(editingGroupOverlapsFrame){return true;}selectedElements.forEach(function(selectedElement){allElementsInGroup.delete(selectedElement);});}var _iterator15=_createForOfIteratorHelper(allElementsInGroup),_step15;try{for(_iterator15.s();!(_step15=_iterator15.n()).done;){var elementInGroup=_step15.value;if(isFrameElement(elementInGroup)){return false;}}}catch(err){_iterator15.e(err);}finally{_iterator15.f();}var _iterator16=_createForOfIteratorHelper(allElementsInGroup),_step16;try{for(_iterator16.s();!(_step16=_iterator16.n()).done;){var _elementInGroup=_step16.value;if(elementOverlapsWithFrame(_elementInGroup,frame)){return true;}}}catch(err){_iterator16.e(err);}finally{_iterator16.f();}}return false;};","map":{"version":3,"names":["getCommonBounds","getElementAbsoluteCoords","isTextElement","isPointWithinBounds","getBoundTextElement","getContainerElement","arrayToMap","findIndex","mutateElement","getElementsWithinSelection","getSelectedElements","isFrameElement","moveOneRight","getElementsInGroup","selectGroupsFromGivenElements","Scene","getElementLineSegments","bindElementsToFramesAfterDuplication","nextElements","oldElements","oldIdToDuplicatedId","nextElementMap","_iterator","_createForOfIteratorHelper","_step","s","n","done","element","value","frameId","nextElementId","get","id","nextFrameId","nextElement","err","e","f","Point","_createClass","x","y","_classCallCheck","LineSegment","pointA","pointB","first","second","key","getBoundingBox","Math","min","max","FrameGeometry","crossProduct","a","b","doBoundingBoxesIntersect","isPointOnLine","aTmp","bTmp","r","abs","EPSILON","isPointRightOfLine","lineSegmentTouchesOrCrossesLine","doLineSegmentsIntersect","aSegment","bSegment","box1","box2","isElementIntersectingFrame","frame","_this","frameLineSegments","elementLineSegments","intersecting","some","frameLineSegment","elementLineSegment","getElementsCompletelyInFrame","elements","omitGroupsContainingFrames","filter","type","isElementContainingFrame","getElementsIntersectingFrame","elementsAreInFrameBounds","_getElementAbsoluteCo","_getElementAbsoluteCo2","_slicedToArray","selectionX1","selectionY1","selectionX2","selectionY2","_getCommonBounds","_getCommonBounds2","elementX1","elementY1","elementX2","elementY2","elementOverlapsWithFrame","isCursorInFrame","cursorCoords","_getElementAbsoluteCo3","_getElementAbsoluteCo4","fx1","fy1","fx2","fy2","groupsAreAtLeastIntersectingTheFrame","groupIds","elementsInGroup","flatMap","groupId","length","find","groupsAreCompletelyOutOfFrame","undefined","groupByFrames","frameElementsMap","Map","_iterator2","_step2","has","set","getFrameElements","allElements","getElementsInResizingFrame","appState","prevElementsInFrame","nextElementsInFrame","Set","elementsCompletelyInFrame","concat","_toConsumableArray","elementsNotCompletelyInFrame","groupsToKeep","Array","from","_iterator3","_step3","delete","_iterator7","_step7","add","_iterator4","_step4","shouldRemoveElement","_iterator8","_step8","individualElementsCompletelyInFrame","_iterator5","_step5","newGroupElementsCompletelyInFrame","_i","_Object$entries","Object","entries","_Object$entries$_i","isSelected","_iterator6","_step6","containerId","getElementsInNewFrame","getContainingFrame","elementsMap","_Scene$getScene","getScene","getElement","addElementsToFrame","elementsToAdd","_elementsToAdd","_iterator9","_step9","push","boundTextElement","slice","frameBoundary","_iterator10","_step10","_loop","frameIndex","elementIndex","removeElementsFromFrame","elementsToRemove","_elementsToRemove","_iterator11","_step11","_i2","_elementsToRemove2","removeAllElementsFromFrame","elementsInFrame","replaceAllElementsInFrame","updateFrameMembershipOfSelectedElements","app","selectedElements","scene","selectedElementIds","elementsToFilter","editingGroupId","_iterator12","_step12","gid","forEach","isElementInFrame","size","uniqueGroupIds","_iterator13","_step13","el","topMostGroupId","rejectedGroupIds","_iterator14","_step14","getTargetFrame","_element","selectedElementsAreBeingDragged","frameToHighlight","allElementsInGroup","editingGroupOverlapsFrame","selectedElement","_iterator15","_step15","elementInGroup","_iterator16","_step16"],"sources":["D:/project/excalidraw-cn/src/frame.ts"],"sourcesContent":["import {\n  getCommonBounds,\n  getElementAbsoluteCoords,\n  isTextElement,\n} from \"./element\";\nimport {\n  ExcalidrawElement,\n  ExcalidrawFrameElement,\n  NonDeleted,\n  NonDeletedExcalidrawElement,\n} from \"./element/types\";\nimport { isPointWithinBounds } from \"./math\";\nimport {\n  getBoundTextElement,\n  getContainerElement,\n} from \"./element/textElement\";\nimport { arrayToMap, findIndex } from \"./utils\";\nimport { mutateElement } from \"./element/mutateElement\";\nimport { AppClassProperties, AppState } from \"./types\";\nimport { getElementsWithinSelection, getSelectedElements } from \"./scene\";\nimport { isFrameElement } from \"./element\";\nimport { moveOneRight } from \"./zindex\";\nimport { getElementsInGroup, selectGroupsFromGivenElements } from \"./groups\";\nimport Scene, { ExcalidrawElementsIncludingDeleted } from \"./scene/Scene\";\nimport { getElementLineSegments } from \"./element/bounds\";\n\n// --------------------------- Frame State ------------------------------------\nexport const bindElementsToFramesAfterDuplication = (\n  nextElements: ExcalidrawElement[],\n  oldElements: readonly ExcalidrawElement[],\n  oldIdToDuplicatedId: Map<ExcalidrawElement[\"id\"], ExcalidrawElement[\"id\"]>,\n) => {\n  const nextElementMap = arrayToMap(nextElements) as Map<\n    ExcalidrawElement[\"id\"],\n    ExcalidrawElement\n  >;\n\n  for (const element of oldElements) {\n    if (element.frameId) {\n      // use its frameId to get the new frameId\n      const nextElementId = oldIdToDuplicatedId.get(element.id);\n      const nextFrameId = oldIdToDuplicatedId.get(element.frameId);\n      if (nextElementId) {\n        const nextElement = nextElementMap.get(nextElementId);\n        if (nextElement) {\n          mutateElement(\n            nextElement,\n            {\n              frameId: nextFrameId ?? element.frameId,\n            },\n            false,\n          );\n        }\n      }\n    }\n  }\n};\n\n// --------------------------- Frame Geometry ---------------------------------\nclass Point {\n  x: number;\n  y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass LineSegment {\n  first: Point;\n  second: Point;\n\n  constructor(pointA: Point, pointB: Point) {\n    this.first = pointA;\n    this.second = pointB;\n  }\n\n  public getBoundingBox(): [Point, Point] {\n    return [\n      new Point(\n        Math.min(this.first.x, this.second.x),\n        Math.min(this.first.y, this.second.y),\n      ),\n      new Point(\n        Math.max(this.first.x, this.second.x),\n        Math.max(this.first.y, this.second.y),\n      ),\n    ];\n  }\n}\n\n// https://martin-thoma.com/how-to-check-if-two-line-segments-intersect/\nclass FrameGeometry {\n  private static EPSILON = 0.000001;\n\n  private static crossProduct(a: Point, b: Point) {\n    return a.x * b.y - b.x * a.y;\n  }\n\n  private static doBoundingBoxesIntersect(\n    a: [Point, Point],\n    b: [Point, Point],\n  ) {\n    return (\n      a[0].x <= b[1].x &&\n      a[1].x >= b[0].x &&\n      a[0].y <= b[1].y &&\n      a[1].y >= b[0].y\n    );\n  }\n\n  private static isPointOnLine(a: LineSegment, b: Point) {\n    const aTmp = new LineSegment(\n      new Point(0, 0),\n      new Point(a.second.x - a.first.x, a.second.y - a.first.y),\n    );\n    const bTmp = new Point(b.x - a.first.x, b.y - a.first.y);\n    const r = this.crossProduct(aTmp.second, bTmp);\n    return Math.abs(r) < this.EPSILON;\n  }\n\n  private static isPointRightOfLine(a: LineSegment, b: Point) {\n    const aTmp = new LineSegment(\n      new Point(0, 0),\n      new Point(a.second.x - a.first.x, a.second.y - a.first.y),\n    );\n    const bTmp = new Point(b.x - a.first.x, b.y - a.first.y);\n    return this.crossProduct(aTmp.second, bTmp) < 0;\n  }\n\n  private static lineSegmentTouchesOrCrossesLine(\n    a: LineSegment,\n    b: LineSegment,\n  ) {\n    return (\n      this.isPointOnLine(a, b.first) ||\n      this.isPointOnLine(a, b.second) ||\n      (this.isPointRightOfLine(a, b.first)\n        ? !this.isPointRightOfLine(a, b.second)\n        : this.isPointRightOfLine(a, b.second))\n    );\n  }\n\n  private static doLineSegmentsIntersect(\n    a: [readonly [number, number], readonly [number, number]],\n    b: [readonly [number, number], readonly [number, number]],\n  ) {\n    const aSegment = new LineSegment(\n      new Point(a[0][0], a[0][1]),\n      new Point(a[1][0], a[1][1]),\n    );\n    const bSegment = new LineSegment(\n      new Point(b[0][0], b[0][1]),\n      new Point(b[1][0], b[1][1]),\n    );\n\n    const box1 = aSegment.getBoundingBox();\n    const box2 = bSegment.getBoundingBox();\n    return (\n      this.doBoundingBoxesIntersect(box1, box2) &&\n      this.lineSegmentTouchesOrCrossesLine(aSegment, bSegment) &&\n      this.lineSegmentTouchesOrCrossesLine(bSegment, aSegment)\n    );\n  }\n\n  public static isElementIntersectingFrame(\n    element: ExcalidrawElement,\n    frame: ExcalidrawFrameElement,\n  ) {\n    const frameLineSegments = getElementLineSegments(frame);\n\n    const elementLineSegments = getElementLineSegments(element);\n\n    const intersecting = frameLineSegments.some((frameLineSegment) =>\n      elementLineSegments.some((elementLineSegment) =>\n        this.doLineSegmentsIntersect(frameLineSegment, elementLineSegment),\n      ),\n    );\n\n    return intersecting;\n  }\n}\n\nexport const getElementsCompletelyInFrame = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameElement,\n) =>\n  omitGroupsContainingFrames(\n    getElementsWithinSelection(elements, frame, false),\n  ).filter(\n    (element) =>\n      (element.type !== \"frame\" && !element.frameId) ||\n      element.frameId === frame.id,\n  );\n\nexport const isElementContainingFrame = (\n  elements: readonly ExcalidrawElement[],\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameElement,\n) => {\n  return getElementsWithinSelection(elements, element).some(\n    (e) => e.id === frame.id,\n  );\n};\n\nexport const getElementsIntersectingFrame = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameElement,\n) =>\n  elements.filter((element) =>\n    FrameGeometry.isElementIntersectingFrame(element, frame),\n  );\n\nexport const elementsAreInFrameBounds = (\n  elements: readonly ExcalidrawElement[],\n  frame: ExcalidrawFrameElement,\n) => {\n  const [selectionX1, selectionY1, selectionX2, selectionY2] =\n    getElementAbsoluteCoords(frame);\n\n  const [elementX1, elementY1, elementX2, elementY2] =\n    getCommonBounds(elements);\n\n  return (\n    selectionX1 <= elementX1 &&\n    selectionY1 <= elementY1 &&\n    selectionX2 >= elementX2 &&\n    selectionY2 >= elementY2\n  );\n};\n\nexport const elementOverlapsWithFrame = (\n  element: ExcalidrawElement,\n  frame: ExcalidrawFrameElement,\n) => {\n  return (\n    elementsAreInFrameBounds([element], frame) ||\n    FrameGeometry.isElementIntersectingFrame(element, frame) ||\n    isElementContainingFrame([frame], element, frame)\n  );\n};\n\nexport const isCursorInFrame = (\n  cursorCoords: {\n    x: number;\n    y: number;\n  },\n  frame: NonDeleted<ExcalidrawFrameElement>,\n) => {\n  const [fx1, fy1, fx2, fy2] = getElementAbsoluteCoords(frame);\n\n  return isPointWithinBounds(\n    [fx1, fy1],\n    [cursorCoords.x, cursorCoords.y],\n    [fx2, fy2],\n  );\n};\n\nexport const groupsAreAtLeastIntersectingTheFrame = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  groupIds: readonly string[],\n  frame: ExcalidrawFrameElement,\n) => {\n  const elementsInGroup = groupIds.flatMap((groupId) =>\n    getElementsInGroup(elements, groupId),\n  );\n\n  if (elementsInGroup.length === 0) {\n    return true;\n  }\n\n  return !!elementsInGroup.find(\n    (element) =>\n      elementsAreInFrameBounds([element], frame) ||\n      FrameGeometry.isElementIntersectingFrame(element, frame),\n  );\n};\n\nexport const groupsAreCompletelyOutOfFrame = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  groupIds: readonly string[],\n  frame: ExcalidrawFrameElement,\n) => {\n  const elementsInGroup = groupIds.flatMap((groupId) =>\n    getElementsInGroup(elements, groupId),\n  );\n\n  if (elementsInGroup.length === 0) {\n    return true;\n  }\n\n  return (\n    elementsInGroup.find(\n      (element) =>\n        elementsAreInFrameBounds([element], frame) ||\n        FrameGeometry.isElementIntersectingFrame(element, frame),\n    ) === undefined\n  );\n};\n\n// --------------------------- Frame Utils ------------------------------------\n\n/**\n * Returns a map of frameId to frame elements. Includes empty frames.\n */\nexport const groupByFrames = (elements: readonly ExcalidrawElement[]) => {\n  const frameElementsMap = new Map<\n    ExcalidrawElement[\"id\"],\n    ExcalidrawElement[]\n  >();\n\n  for (const element of elements) {\n    const frameId = isFrameElement(element) ? element.id : element.frameId;\n    if (frameId && !frameElementsMap.has(frameId)) {\n      frameElementsMap.set(frameId, getFrameElements(elements, frameId));\n    }\n  }\n\n  return frameElementsMap;\n};\n\nexport const getFrameElements = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  frameId: string,\n) => allElements.filter((element) => element.frameId === frameId);\n\nexport const getElementsInResizingFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  frame: ExcalidrawFrameElement,\n  appState: AppState,\n): ExcalidrawElement[] => {\n  const prevElementsInFrame = getFrameElements(allElements, frame.id);\n  const nextElementsInFrame = new Set<ExcalidrawElement>(prevElementsInFrame);\n\n  const elementsCompletelyInFrame = new Set([\n    ...getElementsCompletelyInFrame(allElements, frame),\n    ...prevElementsInFrame.filter((element) =>\n      isElementContainingFrame(allElements, element, frame),\n    ),\n  ]);\n\n  const elementsNotCompletelyInFrame = prevElementsInFrame.filter(\n    (element) => !elementsCompletelyInFrame.has(element),\n  );\n\n  // for elements that are completely in the frame\n  // if they are part of some groups, then those groups are still\n  // considered to belong to the frame\n  const groupsToKeep = new Set<string>(\n    Array.from(elementsCompletelyInFrame).flatMap(\n      (element) => element.groupIds,\n    ),\n  );\n\n  for (const element of elementsNotCompletelyInFrame) {\n    if (!FrameGeometry.isElementIntersectingFrame(element, frame)) {\n      if (element.groupIds.length === 0) {\n        nextElementsInFrame.delete(element);\n      }\n    } else if (element.groupIds.length > 0) {\n      // group element intersects with the frame, we should keep the groups\n      // that this element is part of\n      for (const id of element.groupIds) {\n        groupsToKeep.add(id);\n      }\n    }\n  }\n\n  for (const element of elementsNotCompletelyInFrame) {\n    if (element.groupIds.length > 0) {\n      let shouldRemoveElement = true;\n\n      for (const id of element.groupIds) {\n        if (groupsToKeep.has(id)) {\n          shouldRemoveElement = false;\n        }\n      }\n\n      if (shouldRemoveElement) {\n        nextElementsInFrame.delete(element);\n      }\n    }\n  }\n\n  const individualElementsCompletelyInFrame = Array.from(\n    elementsCompletelyInFrame,\n  ).filter((element) => element.groupIds.length === 0);\n\n  for (const element of individualElementsCompletelyInFrame) {\n    nextElementsInFrame.add(element);\n  }\n\n  const newGroupElementsCompletelyInFrame = Array.from(\n    elementsCompletelyInFrame,\n  ).filter((element) => element.groupIds.length > 0);\n\n  const groupIds = selectGroupsFromGivenElements(\n    newGroupElementsCompletelyInFrame,\n    appState,\n  );\n\n  // new group elements\n  for (const [id, isSelected] of Object.entries(groupIds)) {\n    if (isSelected) {\n      const elementsInGroup = getElementsInGroup(allElements, id);\n\n      if (elementsAreInFrameBounds(elementsInGroup, frame)) {\n        for (const element of elementsInGroup) {\n          nextElementsInFrame.add(element);\n        }\n      }\n    }\n  }\n\n  return [...nextElementsInFrame].filter((element) => {\n    return !(isTextElement(element) && element.containerId);\n  });\n};\n\nexport const getElementsInNewFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  frame: ExcalidrawFrameElement,\n) => {\n  return omitGroupsContainingFrames(\n    allElements,\n    getElementsCompletelyInFrame(allElements, frame),\n  );\n};\n\nexport const getContainingFrame = (\n  element: ExcalidrawElement,\n  /**\n   * Optionally an elements map, in case the elements aren't in the Scene yet.\n   * Takes precedence over Scene elements, even if the element exists\n   * in Scene elements and not the supplied elements map.\n   */\n  elementsMap?: Map<string, ExcalidrawElement>,\n) => {\n  if (element.frameId) {\n    if (elementsMap) {\n      return (elementsMap.get(element.frameId) ||\n        null) as null | ExcalidrawFrameElement;\n    }\n    return (\n      (Scene.getScene(element)?.getElement(\n        element.frameId,\n      ) as ExcalidrawFrameElement) || null\n    );\n  }\n  return null;\n};\n\n// --------------------------- Frame Operations -------------------------------\nexport const addElementsToFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  elementsToAdd: NonDeletedExcalidrawElement[],\n  frame: ExcalidrawFrameElement,\n) => {\n  const _elementsToAdd: ExcalidrawElement[] = [];\n\n  for (const element of elementsToAdd) {\n    _elementsToAdd.push(element);\n\n    const boundTextElement = getBoundTextElement(element);\n    if (boundTextElement) {\n      _elementsToAdd.push(boundTextElement);\n    }\n  }\n\n  let nextElements = allElements.slice();\n\n  const frameBoundary = findIndex(nextElements, (e) => e.frameId === frame.id);\n\n  for (const element of omitGroupsContainingFrames(\n    allElements,\n    _elementsToAdd,\n  )) {\n    if (element.frameId !== frame.id && !isFrameElement(element)) {\n      mutateElement(\n        element,\n        {\n          frameId: frame.id,\n        },\n        false,\n      );\n\n      const frameIndex = findIndex(nextElements, (e) => e.id === frame.id);\n      const elementIndex = findIndex(nextElements, (e) => e.id === element.id);\n\n      if (elementIndex < frameBoundary) {\n        nextElements = [\n          ...nextElements.slice(0, elementIndex),\n          ...nextElements.slice(elementIndex + 1, frameBoundary),\n          element,\n          ...nextElements.slice(frameBoundary),\n        ];\n      } else if (elementIndex > frameIndex) {\n        nextElements = [\n          ...nextElements.slice(0, frameIndex),\n          element,\n          ...nextElements.slice(frameIndex, elementIndex),\n          ...nextElements.slice(elementIndex + 1),\n        ];\n      }\n    }\n  }\n\n  return nextElements;\n};\n\nexport const removeElementsFromFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  elementsToRemove: NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => {\n  const _elementsToRemove: ExcalidrawElement[] = [];\n\n  for (const element of elementsToRemove) {\n    if (element.frameId) {\n      _elementsToRemove.push(element);\n      const boundTextElement = getBoundTextElement(element);\n      if (boundTextElement) {\n        _elementsToRemove.push(boundTextElement);\n      }\n    }\n  }\n\n  for (const element of _elementsToRemove) {\n    mutateElement(\n      element,\n      {\n        frameId: null,\n      },\n      false,\n    );\n  }\n\n  const nextElements = moveOneRight(\n    allElements,\n    appState,\n    Array.from(_elementsToRemove),\n  );\n\n  return nextElements;\n};\n\nexport const removeAllElementsFromFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  frame: ExcalidrawFrameElement,\n  appState: AppState,\n) => {\n  const elementsInFrame = getFrameElements(allElements, frame.id);\n  return removeElementsFromFrame(allElements, elementsInFrame, appState);\n};\n\nexport const replaceAllElementsInFrame = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  nextElementsInFrame: ExcalidrawElement[],\n  frame: ExcalidrawFrameElement,\n  appState: AppState,\n) => {\n  return addElementsToFrame(\n    removeAllElementsFromFrame(allElements, frame, appState),\n    nextElementsInFrame,\n    frame,\n  );\n};\n\n/** does not mutate elements, but return new ones */\nexport const updateFrameMembershipOfSelectedElements = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  appState: AppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    // supplying elements explicitly in case we're passed non-state elements\n    elements: allElements,\n  });\n  const elementsToFilter = new Set<ExcalidrawElement>(selectedElements);\n\n  if (appState.editingGroupId) {\n    for (const element of selectedElements) {\n      if (element.groupIds.length === 0) {\n        elementsToFilter.add(element);\n      } else {\n        element.groupIds\n          .flatMap((gid) => getElementsInGroup(allElements, gid))\n          .forEach((element) => elementsToFilter.add(element));\n      }\n    }\n  }\n\n  const elementsToRemove = new Set<ExcalidrawElement>();\n\n  elementsToFilter.forEach((element) => {\n    if (\n      element.frameId &&\n      !isFrameElement(element) &&\n      !isElementInFrame(element, allElements, appState)\n    ) {\n      elementsToRemove.add(element);\n    }\n  });\n\n  return elementsToRemove.size > 0\n    ? removeElementsFromFrame(allElements, [...elementsToRemove], appState)\n    : allElements;\n};\n\n/**\n * filters out elements that are inside groups that contain a frame element\n * anywhere in the group tree\n */\nexport const omitGroupsContainingFrames = (\n  allElements: ExcalidrawElementsIncludingDeleted,\n  /** subset of elements you want to filter. Optional perf optimization so we\n   * don't have to filter all elements unnecessarily\n   */\n  selectedElements?: readonly ExcalidrawElement[],\n) => {\n  const uniqueGroupIds = new Set<string>();\n  for (const el of selectedElements || allElements) {\n    const topMostGroupId = el.groupIds[el.groupIds.length - 1];\n    if (topMostGroupId) {\n      uniqueGroupIds.add(topMostGroupId);\n    }\n  }\n\n  const rejectedGroupIds = new Set<string>();\n  for (const groupId of uniqueGroupIds) {\n    if (\n      getElementsInGroup(allElements, groupId).some((el) => isFrameElement(el))\n    ) {\n      rejectedGroupIds.add(groupId);\n    }\n  }\n\n  return (selectedElements || allElements).filter(\n    (el) => !rejectedGroupIds.has(el.groupIds[el.groupIds.length - 1]),\n  );\n};\n\n/**\n * depending on the appState, return target frame, which is the frame the given element\n * is going to be added to or remove from\n */\nexport const getTargetFrame = (\n  element: ExcalidrawElement,\n  appState: AppState,\n) => {\n  const _element = isTextElement(element)\n    ? getContainerElement(element) || element\n    : element;\n\n  return appState.selectedElementIds[_element.id] &&\n    appState.selectedElementsAreBeingDragged\n    ? appState.frameToHighlight\n    : getContainingFrame(_element);\n};\n\n// given an element, return if the element is in some frame\nexport const isElementInFrame = (\n  element: ExcalidrawElement,\n  allElements: ExcalidrawElementsIncludingDeleted,\n  appState: AppState,\n) => {\n  const frame = getTargetFrame(element, appState);\n  const _element = isTextElement(element)\n    ? getContainerElement(element) || element\n    : element;\n\n  if (frame) {\n    if (_element.groupIds.length === 0) {\n      return elementOverlapsWithFrame(_element, frame);\n    }\n\n    const allElementsInGroup = new Set(\n      _element.groupIds.flatMap((gid) => getElementsInGroup(allElements, gid)),\n    );\n\n    if (appState.editingGroupId && appState.selectedElementsAreBeingDragged) {\n      const selectedElements = new Set(\n        getSelectedElements(allElements, appState),\n      );\n\n      const editingGroupOverlapsFrame = appState.frameToHighlight !== null;\n\n      if (editingGroupOverlapsFrame) {\n        return true;\n      }\n\n      selectedElements.forEach((selectedElement) => {\n        allElementsInGroup.delete(selectedElement);\n      });\n    }\n\n    for (const elementInGroup of allElementsInGroup) {\n      if (isFrameElement(elementInGroup)) {\n        return false;\n      }\n    }\n\n    for (const elementInGroup of allElementsInGroup) {\n      if (elementOverlapsWithFrame(elementInGroup, frame)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}