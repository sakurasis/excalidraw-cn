{"ast":null,"code":"import { getCommonBounds } from \"../element\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nexport const getScrollBars = (elements, viewportWidth, viewportHeight, _ref) => {\n  let {\n    scrollX,\n    scrollY,\n    zoom\n  } = _ref;\n  if (elements.length === 0) {\n    return {\n      horizontal: null,\n      vertical: null\n    };\n  }\n  // This is the bounding box of all the elements\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom.value;\n  const viewportHeightWithZoom = viewportHeight / zoom.value;\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")) || 0,\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")) || 0,\n    left: parseInt(getGlobalCSSVariable(\"sal\")) || 0,\n    right: parseInt(getGlobalCSSVariable(\"sar\")) || 0\n  };\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal: viewportMinX === sceneMinX && viewportMaxX === sceneMaxX ? null : {\n      x: Math.max(safeArea.left, SCROLLBAR_MARGIN) + (viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX) * viewportWidth,\n      y: viewportHeight - SCROLLBAR_WIDTH - Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n      width: (viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX) * viewportWidth - Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n      height: SCROLLBAR_WIDTH\n    },\n    vertical: viewportMinY === sceneMinY && viewportMaxY === sceneMaxY ? null : {\n      x: isRTL ? Math.max(safeArea.left, SCROLLBAR_MARGIN) : viewportWidth - SCROLLBAR_WIDTH - Math.max(safeArea.right, SCROLLBAR_MARGIN),\n      y: (viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY) * viewportHeight + Math.max(safeArea.top, SCROLLBAR_MARGIN),\n      width: SCROLLBAR_WIDTH,\n      height: (viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY) * viewportHeight - Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom)\n    }\n  };\n};\nexport const isOverScrollBars = (scrollBars, x, y) => {\n  const [isOverHorizontal, isOverVertical] = [scrollBars.horizontal, scrollBars.vertical].map(scrollBar => {\n    return scrollBar != null && scrollBar.x <= x && x <= scrollBar.x + scrollBar.width && scrollBar.y <= y && y <= scrollBar.y + scrollBar.height;\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return {\n    isOverEither,\n    isOverHorizontal,\n    isOverVertical\n  };\n};","map":{"version":3,"names":["getCommonBounds","getGlobalCSSVariable","getLanguage","SCROLLBAR_MARGIN","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","elements","viewportWidth","viewportHeight","_ref","scrollX","scrollY","zoom","length","horizontal","vertical","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","value","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","safeArea","top","parseInt","bottom","left","right","isRTL","rtl","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","Math","min","sceneMinY","sceneMaxX","max","sceneMaxY","x","y","width","height","isOverScrollBars","scrollBars","isOverHorizontal","isOverVertical","map","scrollBar","isOverEither"],"sources":["D:/project/excalidraw-cn/src/scene/scrollbars.ts"],"sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { Zoom } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: number;\n    scrollY: number;\n    zoom: Zoom;\n  },\n): ScrollBars => {\n  if (elements.length === 0) {\n    return {\n      horizontal: null,\n      vertical: null,\n    };\n  }\n  // This is the bounding box of all the elements\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] =\n    getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom.value;\n  const viewportHeightWithZoom = viewportHeight / zoom.value;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")) || 0,\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")) || 0,\n    left: parseInt(getGlobalCSSVariable(\"sal\")) || 0,\n    right: parseInt(getGlobalCSSVariable(\"sar\")) || 0,\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n): {\n  isOverEither: boolean;\n  isOverHorizontal: boolean;\n  isOverVertical: boolean;\n} => {\n  const [isOverHorizontal, isOverVertical] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar != null &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return { isOverEither, isOverHorizontal, isOverVertical };\n};\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,YAAY;AAG5C,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,SAASC,WAAW,QAAQ,SAAS;AAErC,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AACjC,OAAO,MAAMC,eAAe,GAAG,CAAC;AAChC,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAEhD,OAAO,MAAMC,aAAa,GAAGA,CAC3BC,QAAsC,EACtCC,aAAqB,EACrBC,cAAsB,EAAAC,IAAA,KAUP;EAAA,IATf;IACEC,OAAO;IACPC,OAAO;IACPC;EAKF,CAAC,GAAAH,IAAA;EAED,IAAIH,QAAQ,CAACO,MAAM,KAAK,CAAC,EAAE;IACzB,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE;IACZ,CAAC;EACH;EACA;EACA,MAAM,CAACC,YAAY,EAAEC,YAAY,EAAEC,YAAY,EAAEC,YAAY,CAAC,GAC5DpB,eAAe,CAACO,QAAQ,CAAC;;EAE3B;EACA,MAAMc,qBAAqB,GAAGb,aAAa,GAAGK,IAAI,CAACS,KAAK;EACxD,MAAMC,sBAAsB,GAAGd,cAAc,GAAGI,IAAI,CAACS,KAAK;EAE1D,MAAME,iBAAiB,GAAGhB,aAAa,GAAGa,qBAAqB;EAC/D,MAAMI,kBAAkB,GAAGhB,cAAc,GAAGc,sBAAsB;EAElE,MAAMG,QAAQ,GAAG;IACfC,GAAG,EAAEC,QAAQ,CAAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;IAC/C4B,MAAM,EAAED,QAAQ,CAAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;IAClD6B,IAAI,EAAEF,QAAQ,CAAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC;IAChD8B,KAAK,EAAEH,QAAQ,CAAC3B,oBAAoB,CAAC,KAAK,CAAC,CAAC,IAAI;EAClD,CAAC;EAED,MAAM+B,KAAK,GAAG9B,WAAW,EAAE,CAAC+B,GAAG;;EAE/B;EACA,MAAMC,YAAY,GAAG,CAACvB,OAAO,GAAGa,iBAAiB,GAAG,CAAC,GAAGE,QAAQ,CAACI,IAAI;EACrE,MAAMK,YAAY,GAAG,CAACvB,OAAO,GAAGa,kBAAkB,GAAG,CAAC,GAAGC,QAAQ,CAACC,GAAG;EACrE,MAAMS,YAAY,GAAGF,YAAY,GAAGb,qBAAqB,GAAGK,QAAQ,CAACK,KAAK;EAC1E,MAAMM,YAAY,GAAGF,YAAY,GAAGZ,sBAAsB,GAAGG,QAAQ,CAACG,MAAM;;EAE5E;EACA,MAAMS,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACvB,YAAY,EAAEiB,YAAY,CAAC;EACtD,MAAMO,SAAS,GAAGF,IAAI,CAACC,GAAG,CAACtB,YAAY,EAAEiB,YAAY,CAAC;EACtD,MAAMO,SAAS,GAAGH,IAAI,CAACI,GAAG,CAACxB,YAAY,EAAEiB,YAAY,CAAC;EACtD,MAAMQ,SAAS,GAAGL,IAAI,CAACI,GAAG,CAACvB,YAAY,EAAEiB,YAAY,CAAC;;EAEtD;;EAEA,OAAO;IACLtB,UAAU,EACRmB,YAAY,KAAKI,SAAS,IAAIF,YAAY,KAAKM,SAAS,GACpD,IAAI,GACJ;MACEG,CAAC,EACCN,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACI,IAAI,EAAE3B,gBAAgB,CAAC,GACxC,CAAC+B,YAAY,GAAGI,SAAS,KAAKI,SAAS,GAAGJ,SAAS,CAAC,GACnD9B,aAAa;MACjBsC,CAAC,EACCrC,cAAc,GACdL,eAAe,GACfmC,IAAI,CAACI,GAAG,CAACxC,gBAAgB,EAAEuB,QAAQ,CAACG,MAAM,CAAC;MAC7CkB,KAAK,EACF,CAACX,YAAY,GAAGF,YAAY,KAAKQ,SAAS,GAAGJ,SAAS,CAAC,GACtD9B,aAAa,GACf+B,IAAI,CAACI,GAAG,CAACxC,gBAAgB,GAAG,CAAC,EAAEuB,QAAQ,CAACI,IAAI,GAAGJ,QAAQ,CAACK,KAAK,CAAC;MAChEiB,MAAM,EAAE5C;IACV,CAAC;IACPY,QAAQ,EACNmB,YAAY,KAAKM,SAAS,IAAIJ,YAAY,KAAKO,SAAS,GACpD,IAAI,GACJ;MACEC,CAAC,EAAEb,KAAK,GACJO,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACI,IAAI,EAAE3B,gBAAgB,CAAC,GACzCK,aAAa,GACbJ,eAAe,GACfmC,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACK,KAAK,EAAE5B,gBAAgB,CAAC;MAC9C2C,CAAC,EACE,CAACX,YAAY,GAAGM,SAAS,KAAKG,SAAS,GAAGH,SAAS,CAAC,GACnDhC,cAAc,GAChB8B,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACC,GAAG,EAAExB,gBAAgB,CAAC;MAC1C4C,KAAK,EAAE3C,eAAe;MACtB4C,MAAM,EACH,CAACX,YAAY,GAAGF,YAAY,KAAKS,SAAS,GAAGH,SAAS,CAAC,GACtDhC,cAAc,GAChB8B,IAAI,CAACI,GAAG,CAACxC,gBAAgB,GAAG,CAAC,EAAEuB,QAAQ,CAACC,GAAG,GAAGD,QAAQ,CAACG,MAAM;IACjE;EACR,CAAC;AACH,CAAC;AAED,OAAO,MAAMoB,gBAAgB,GAAGA,CAC9BC,UAAsB,EACtBL,CAAS,EACTC,CAAS,KAKN;EACH,MAAM,CAACK,gBAAgB,EAAEC,cAAc,CAAC,GAAG,CACzCF,UAAU,CAACnC,UAAU,EACrBmC,UAAU,CAAClC,QAAQ,CACpB,CAACqC,GAAG,CAAEC,SAAS,IAAK;IACnB,OACEA,SAAS,IAAI,IAAI,IACjBA,SAAS,CAACT,CAAC,IAAIA,CAAC,IAChBA,CAAC,IAAIS,SAAS,CAACT,CAAC,GAAGS,SAAS,CAACP,KAAK,IAClCO,SAAS,CAACR,CAAC,IAAIA,CAAC,IAChBA,CAAC,IAAIQ,SAAS,CAACR,CAAC,GAAGQ,SAAS,CAACN,MAAM;EAEvC,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGJ,gBAAgB,IAAIC,cAAc;EACvD,OAAO;IAAEG,YAAY;IAAEJ,gBAAgB;IAAEC;EAAe,CAAC;AAC3D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}