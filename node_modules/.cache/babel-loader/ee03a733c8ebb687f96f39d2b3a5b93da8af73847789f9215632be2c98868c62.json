{"ast":null,"code":"import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nvar dateTimestampSource = {\n  nowSeconds: function () {\n    return Date.now() / 1000;\n  }\n};\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance() {\n  var performance = getGlobalObject().performance;\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  var timeOrigin = Date.now() - performance.now();\n  return {\n    now: function () {\n      return performance.now();\n    },\n    timeOrigin: timeOrigin\n  };\n}\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance() {\n  try {\n    var perfHooks = dynamicRequire(module, 'perf_hooks');\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n/**\n * The Performance API implementation for the current platform, if available.\n */\nvar platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\nvar timestampSource = platformPerformance === undefined ? dateTimestampSource : {\n  nowSeconds: function () {\n    return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000;\n  }\n};\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n// Re-exported with an old name for backwards-compatibility.\nexport var timestampWithMs = timestampInSeconds;\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport var usingPerformanceAPI = platformPerformance !== undefined;\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport var _browserPerformanceTimeOriginMode;\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport var browserPerformanceTimeOrigin = function () {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n  var performance = getGlobalObject().performance;\n  if (!performance) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n  var threshold = 3600 * 1000;\n  var timeOriginIsReliable = performance.timeOrigin && Math.abs(performance.timeOrigin + performance.now() - Date.now()) < threshold;\n  if (timeOriginIsReliable) {\n    _browserPerformanceTimeOriginMode = 'timeOrigin';\n    return performance.timeOrigin;\n  }\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  var navigationStart = performance.timing && performance.timing.navigationStart;\n  var hasNavigationStart = typeof navigationStart === 'number';\n  var navigationStartIsReliable = hasNavigationStart && Math.abs(navigationStart + performance.now() - Date.now()) < threshold;\n  if (navigationStartIsReliable) {\n    _browserPerformanceTimeOriginMode = 'navigationStart';\n    return navigationStart;\n  }\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return Date.now();\n}();","map":{"version":3,"names":["getGlobalObject","dynamicRequire","isNodeEnv","dateTimestampSource","nowSeconds","Date","now","getBrowserPerformance","performance","undefined","timeOrigin","getNodePerformance","perfHooks","module","_","platformPerformance","timestampSource","dateTimestampInSeconds","bind","timestampInSeconds","timestampWithMs","usingPerformanceAPI","_browserPerformanceTimeOriginMode","browserPerformanceTimeOrigin","threshold","timeOriginIsReliable","Math","abs","navigationStart","timing","hasNavigationStart","navigationStartIsReliable"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\time.ts"],"sourcesContent":["import { getGlobalObject } from './misc';\nimport { dynamicRequire, isNodeEnv } from './node';\n\n/**\n * An object that can return the current timestamp in seconds since the UNIX epoch.\n */\ninterface TimestampSource {\n  nowSeconds(): number;\n}\n\n/**\n * A TimestampSource implementation for environments that do not support the Performance Web API natively.\n *\n * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier\n * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It\n * is more obvious to explain \"why does my span have negative duration\" than \"why my spans have zero duration\".\n */\nconst dateTimestampSource: TimestampSource = {\n  nowSeconds: () => Date.now() / 1000,\n};\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction getBrowserPerformance(): Performance | undefined {\n  const { performance } = getGlobalObject<Window>();\n  if (!performance || !performance.now) {\n    return undefined;\n  }\n\n  // Replace performance.timeOrigin with our own timeOrigin based on Date.now().\n  //\n  // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +\n  // performance.now() gives a date arbitrarily in the past.\n  //\n  // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is\n  // undefined.\n  //\n  // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to\n  // interact with data coming out of performance entries.\n  //\n  // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that\n  // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes\n  // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have\n  // observed skews that can be as long as days, weeks or months.\n  //\n  // See https://github.com/getsentry/sentry-javascript/issues/2590.\n  //\n  // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload\n  // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation\n  // transactions of long-lived web pages.\n  const timeOrigin = Date.now() - performance.now();\n\n  return {\n    now: () => performance.now(),\n    timeOrigin,\n  };\n}\n\n/**\n * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't\n * implement the API.\n */\nfunction getNodePerformance(): Performance | undefined {\n  try {\n    const perfHooks = dynamicRequire(module, 'perf_hooks') as { performance: Performance };\n    return perfHooks.performance;\n  } catch (_) {\n    return undefined;\n  }\n}\n\n/**\n * The Performance API implementation for the current platform, if available.\n */\nconst platformPerformance: Performance | undefined = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();\n\nconst timestampSource: TimestampSource =\n  platformPerformance === undefined\n    ? dateTimestampSource\n    : {\n        nowSeconds: () => (platformPerformance.timeOrigin + platformPerformance.now()) / 1000,\n      };\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport const dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * See `usingPerformanceAPI` to test whether the Performance API is used.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport const timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);\n\n// Re-exported with an old name for backwards-compatibility.\nexport const timestampWithMs = timestampInSeconds;\n\n/**\n * A boolean that is true when timestampInSeconds uses the Performance API to produce monotonic timestamps.\n */\nexport const usingPerformanceAPI = platformPerformance !== undefined;\n\n/**\n * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.\n */\nexport let _browserPerformanceTimeOriginMode: string;\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport const browserPerformanceTimeOrigin = ((): number | undefined => {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = getGlobalObject<Window>();\n  if (!performance) {\n    _browserPerformanceTimeOriginMode = 'none';\n    return undefined;\n  }\n\n  const threshold = 3600 * 1000;\n\n  const timeOriginIsReliable =\n    performance.timeOrigin && Math.abs(performance.timeOrigin + performance.now() - Date.now()) < threshold;\n  if (timeOriginIsReliable) {\n    _browserPerformanceTimeOriginMode = 'timeOrigin';\n    return performance.timeOrigin;\n  }\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing && performance.timing.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  const navigationStartIsReliable =\n    hasNavigationStart && Math.abs(navigationStart + performance.now() - Date.now()) < threshold;\n  if (navigationStartIsReliable) {\n    _browserPerformanceTimeOriginMode = 'navigationStart';\n    return navigationStart;\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  _browserPerformanceTimeOriginMode = 'dateNow';\n  return Date.now();\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}