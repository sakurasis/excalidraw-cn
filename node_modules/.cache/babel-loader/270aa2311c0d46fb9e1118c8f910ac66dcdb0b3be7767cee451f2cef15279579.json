{"ast":null,"code":"import _regeneratorRuntime from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import decodePng from\"png-chunks-extract\";import tEXt from\"png-chunk-text\";import encodePng from\"png-chunks-encode\";import{stringToBase64,encode,decode,base64ToString}from\"./encode\";import{EXPORT_DATA_TYPES,MIME_TYPES}from\"../constants\";import{blobToArrayBuffer}from\"./blob\";// -----------------------------------------------------------------------------\n// PNG\n// -----------------------------------------------------------------------------\nexport var getTEXtChunk=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob){var chunks,metadataChunk;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.t0=decodePng;_context.t1=Uint8Array;_context.next=4;return blobToArrayBuffer(blob);case 4:_context.t2=_context.sent;_context.t3=new _context.t1(_context.t2);chunks=(0,_context.t0)(_context.t3);metadataChunk=chunks.find(function(chunk){return chunk.name===\"tEXt\";});if(!metadataChunk){_context.next=10;break;}return _context.abrupt(\"return\",tEXt.decode(metadataChunk.data));case 10:return _context.abrupt(\"return\",null);case 11:case\"end\":return _context.stop();}},_callee);}));return function getTEXtChunk(_x){return _ref.apply(this,arguments);};}();export var encodePngMetadata=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref2){var blob,metadata,chunks,metadataChunk;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:blob=_ref2.blob,metadata=_ref2.metadata;_context2.t0=decodePng;_context2.t1=Uint8Array;_context2.next=5;return blobToArrayBuffer(blob);case 5:_context2.t2=_context2.sent;_context2.t3=new _context2.t1(_context2.t2);chunks=(0,_context2.t0)(_context2.t3);_context2.t4=tEXt;_context2.t5=MIME_TYPES.excalidraw;_context2.t6=JSON;_context2.next=13;return encode({text:metadata,compress:true});case 13:_context2.t7=_context2.sent;_context2.t8=_context2.t6.stringify.call(_context2.t6,_context2.t7);metadataChunk=_context2.t4.encode.call(_context2.t4,_context2.t5,_context2.t8);// insert metadata before last chunk (iEND)\nchunks.splice(-1,0,metadataChunk);return _context2.abrupt(\"return\",new Blob([encodePng(chunks)],{type:MIME_TYPES.png}));case 18:case\"end\":return _context2.stop();}},_callee2);}));return function encodePngMetadata(_x2){return _ref3.apply(this,arguments);};}();export var decodePngMetadata=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(blob){var metadata,encodedData;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getTEXtChunk(blob);case 2:metadata=_context3.sent;if(!((metadata===null||metadata===void 0?void 0:metadata.keyword)===MIME_TYPES.excalidraw)){_context3.next=19;break;}_context3.prev=4;encodedData=JSON.parse(metadata.text);if(\"encoded\"in encodedData){_context3.next=10;break;}if(!(\"type\"in encodedData&&encodedData.type===EXPORT_DATA_TYPES.excalidraw)){_context3.next=9;break;}return _context3.abrupt(\"return\",metadata.text);case 9:throw new Error(\"FAILED\");case 10:_context3.next=12;return decode(encodedData);case 12:return _context3.abrupt(\"return\",_context3.sent);case 15:_context3.prev=15;_context3.t0=_context3[\"catch\"](4);console.error(_context3.t0);throw new Error(\"FAILED\");case 19:throw new Error(\"INVALID\");case 20:case\"end\":return _context3.stop();}},_callee3,null,[[4,15]]);}));return function decodePngMetadata(_x3){return _ref4.apply(this,arguments);};}();// -----------------------------------------------------------------------------\n// SVG\n// -----------------------------------------------------------------------------\nexport var encodeSvgMetadata=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref5){var text,base64,metadata;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:text=_ref5.text;_context4.t0=stringToBase64;_context4.t1=JSON;_context4.next=5;return encode({text:text});case 5:_context4.t2=_context4.sent;_context4.t3=_context4.t1.stringify.call(_context4.t1,_context4.t2);_context4.next=9;return(0,_context4.t0)(_context4.t3,true/* is already byte string */);case 9:base64=_context4.sent;metadata=\"\";metadata+=\"<!-- payload-type:\".concat(MIME_TYPES.excalidraw,\" -->\");metadata+=\"<!-- payload-version:2 -->\";metadata+=\"<!-- payload-start -->\";metadata+=base64;metadata+=\"<!-- payload-end -->\";return _context4.abrupt(\"return\",metadata);case 17:case\"end\":return _context4.stop();}},_callee4);}));return function encodeSvgMetadata(_x4){return _ref6.apply(this,arguments);};}();export var decodeSvgMetadata=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref7){var svg,match,versionMatch,version,isByteString,json,encodedData;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:svg=_ref7.svg;if(!svg.includes(\"payload-type:\".concat(MIME_TYPES.excalidraw))){_context5.next=26;break;}match=svg.match(/<!-- payload-start -->\\s*(.+?)\\s*<!-- payload-end -->/);if(match){_context5.next=5;break;}throw new Error(\"INVALID\");case 5:versionMatch=svg.match(/<!-- payload-version:(\\d+) -->/);version=(versionMatch===null||versionMatch===void 0?void 0:versionMatch[1])||\"1\";isByteString=version!==\"1\";_context5.prev=8;_context5.next=11;return base64ToString(match[1],isByteString);case 11:json=_context5.sent;encodedData=JSON.parse(json);if(\"encoded\"in encodedData){_context5.next=17;break;}if(!(\"type\"in encodedData&&encodedData.type===EXPORT_DATA_TYPES.excalidraw)){_context5.next=16;break;}return _context5.abrupt(\"return\",json);case 16:throw new Error(\"FAILED\");case 17:_context5.next=19;return decode(encodedData);case 19:return _context5.abrupt(\"return\",_context5.sent);case 22:_context5.prev=22;_context5.t0=_context5[\"catch\"](8);console.error(_context5.t0);throw new Error(\"FAILED\");case 26:throw new Error(\"INVALID\");case 27:case\"end\":return _context5.stop();}},_callee5,null,[[8,22]]);}));return function decodeSvgMetadata(_x5){return _ref8.apply(this,arguments);};}();","map":{"version":3,"names":["decodePng","tEXt","encodePng","stringToBase64","encode","decode","base64ToString","EXPORT_DATA_TYPES","MIME_TYPES","blobToArrayBuffer","getTEXtChunk","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","blob","chunks","metadataChunk","wrap","_callee$","_context","prev","next","t0","t1","Uint8Array","t2","sent","t3","find","chunk","name","abrupt","data","stop","_x","apply","arguments","encodePngMetadata","_ref3","_callee2","_ref2","metadata","_callee2$","_context2","t4","t5","excalidraw","t6","JSON","text","compress","t7","t8","stringify","call","splice","Blob","type","png","_x2","decodePngMetadata","_ref4","_callee3","encodedData","_callee3$","_context3","keyword","parse","Error","console","error","_x3","encodeSvgMetadata","_ref6","_callee4","_ref5","base64","_callee4$","_context4","concat","_x4","decodeSvgMetadata","_ref8","_callee5","_ref7","svg","match","versionMatch","version","isByteString","json","_callee5$","_context5","includes","_x5"],"sources":["D:/project/excalidraw-cn/src/data/image.ts"],"sourcesContent":["import decodePng from \"png-chunks-extract\";\nimport tEXt from \"png-chunk-text\";\nimport encodePng from \"png-chunks-encode\";\nimport { stringToBase64, encode, decode, base64ToString } from \"./encode\";\nimport { EXPORT_DATA_TYPES, MIME_TYPES } from \"../constants\";\nimport { blobToArrayBuffer } from \"./blob\";\n\n// -----------------------------------------------------------------------------\n// PNG\n// -----------------------------------------------------------------------------\n\nexport const getTEXtChunk = async (\n  blob: Blob,\n): Promise<{ keyword: string; text: string } | null> => {\n  const chunks = decodePng(new Uint8Array(await blobToArrayBuffer(blob)));\n  const metadataChunk = chunks.find((chunk) => chunk.name === \"tEXt\");\n  if (metadataChunk) {\n    return tEXt.decode(metadataChunk.data);\n  }\n  return null;\n};\n\nexport const encodePngMetadata = async ({\n  blob,\n  metadata,\n}: {\n  blob: Blob;\n  metadata: string;\n}) => {\n  const chunks = decodePng(new Uint8Array(await blobToArrayBuffer(blob)));\n\n  const metadataChunk = tEXt.encode(\n    MIME_TYPES.excalidraw,\n    JSON.stringify(\n      await encode({\n        text: metadata,\n        compress: true,\n      }),\n    ),\n  );\n  // insert metadata before last chunk (iEND)\n  chunks.splice(-1, 0, metadataChunk);\n\n  return new Blob([encodePng(chunks)], { type: MIME_TYPES.png });\n};\n\nexport const decodePngMetadata = async (blob: Blob) => {\n  const metadata = await getTEXtChunk(blob);\n  if (metadata?.keyword === MIME_TYPES.excalidraw) {\n    try {\n      const encodedData = JSON.parse(metadata.text);\n      if (!(\"encoded\" in encodedData)) {\n        // legacy, un-encoded scene JSON\n        if (\n          \"type\" in encodedData &&\n          encodedData.type === EXPORT_DATA_TYPES.excalidraw\n        ) {\n          return metadata.text;\n        }\n        throw new Error(\"FAILED\");\n      }\n      return await decode(encodedData);\n    } catch (error: any) {\n      console.error(error);\n      throw new Error(\"FAILED\");\n    }\n  }\n  throw new Error(\"INVALID\");\n};\n\n// -----------------------------------------------------------------------------\n// SVG\n// -----------------------------------------------------------------------------\n\nexport const encodeSvgMetadata = async ({ text }: { text: string }) => {\n  const base64 = await stringToBase64(\n    JSON.stringify(await encode({ text })),\n    true /* is already byte string */,\n  );\n\n  let metadata = \"\";\n  metadata += `<!-- payload-type:${MIME_TYPES.excalidraw} -->`;\n  metadata += `<!-- payload-version:2 -->`;\n  metadata += \"<!-- payload-start -->\";\n  metadata += base64;\n  metadata += \"<!-- payload-end -->\";\n  return metadata;\n};\n\nexport const decodeSvgMetadata = async ({ svg }: { svg: string }) => {\n  if (svg.includes(`payload-type:${MIME_TYPES.excalidraw}`)) {\n    const match = svg.match(\n      /<!-- payload-start -->\\s*(.+?)\\s*<!-- payload-end -->/,\n    );\n    if (!match) {\n      throw new Error(\"INVALID\");\n    }\n    const versionMatch = svg.match(/<!-- payload-version:(\\d+) -->/);\n    const version = versionMatch?.[1] || \"1\";\n    const isByteString = version !== \"1\";\n\n    try {\n      const json = await base64ToString(match[1], isByteString);\n      const encodedData = JSON.parse(json);\n      if (!(\"encoded\" in encodedData)) {\n        // legacy, un-encoded scene JSON\n        if (\n          \"type\" in encodedData &&\n          encodedData.type === EXPORT_DATA_TYPES.excalidraw\n        ) {\n          return json;\n        }\n        throw new Error(\"FAILED\");\n      }\n      return await decode(encodedData);\n    } catch (error: any) {\n      console.error(error);\n      throw new Error(\"FAILED\");\n    }\n  }\n  throw new Error(\"INVALID\");\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}