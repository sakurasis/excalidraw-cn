{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\actions\\\\actionDistribute.tsx\";\nimport { DistributeHorizontallyIcon, DistributeVerticallyIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { distributeElements } from \"../distribute\";\nimport { getNonDeletedElements } from \"../element\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst enableActionGroup = (appState, app) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  return selectedElements.length > 1 &&\n  // TODO enable distributing frames when implemented properly\n  !selectedElements.some(el => el.type === \"frame\");\n};\nconst distributeSelectedElements = (elements, appState, app, distribution) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  const updatedElements = distributeElements(selectedElements, distribution);\n  const updatedElementsMap = arrayToMap(updatedElements);\n  return updateFrameMembershipOfSelectedElements(elements.map(element => updatedElementsMap.get(element.id) || element), appState, app);\n};\nexport const distributeHorizontally = register({\n  name: \"distributeHorizontally\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"x\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.H,\n  PanelComponent: _ref => {\n    let {\n      elements,\n      appState,\n      updateData,\n      app\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      hidden: !enableActionGroup(appState, app),\n      type: \"button\",\n      icon: DistributeHorizontallyIcon,\n      onClick: () => updateData(null),\n      title: `${t(\"labels.distributeHorizontally\")} — ${getShortcutKey(\"Alt+H\")}`,\n      \"aria-label\": t(\"labels.distributeHorizontally\"),\n      visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const distributeVertically = register({\n  name: \"distributeVertically\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"y\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n  PanelComponent: _ref2 => {\n    let {\n      elements,\n      appState,\n      updateData,\n      app\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      hidden: !enableActionGroup(appState, app),\n      type: \"button\",\n      icon: DistributeVerticallyIcon,\n      onClick: () => updateData(null),\n      title: `${t(\"labels.distributeVertically\")} — ${getShortcutKey(\"Alt+V\")}`,\n      \"aria-label\": t(\"labels.distributeVertically\"),\n      visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this);\n  }\n});","map":{"version":3,"names":["DistributeHorizontallyIcon","DistributeVerticallyIcon","ToolButton","distributeElements","getNonDeletedElements","updateFrameMembershipOfSelectedElements","t","CODES","KEYS","isSomeElementSelected","arrayToMap","getShortcutKey","register","jsxDEV","_jsxDEV","enableActionGroup","appState","app","selectedElements","scene","getSelectedElements","length","some","el","type","distributeSelectedElements","elements","distribution","updatedElements","updatedElementsMap","map","element","get","id","distributeHorizontally","name","trackEvent","category","perform","_","space","axis","commitToHistory","keyTest","event","CTRL_OR_CMD","altKey","code","H","PanelComponent","_ref","updateData","hidden","icon","onClick","title","visible","fileName","_jsxFileName","lineNumber","columnNumber","distributeVertically","V","_ref2"],"sources":["D:/project/excalidraw-cn/src/actions/actionDistribute.tsx"],"sourcesContent":["import {\n  DistributeHorizontallyIcon,\n  DistributeVerticallyIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { distributeElements, Distribution } from \"../distribute\";\nimport { getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { AppClassProperties, AppState } from \"../types\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (appState: AppState, app: AppClassProperties) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n  return (\n    selectedElements.length > 1 &&\n    // TODO enable distributing frames when implemented properly\n    !selectedElements.some((el) => el.type === \"frame\")\n  );\n};\n\nconst distributeSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  app: AppClassProperties,\n  distribution: Distribution,\n) => {\n  const selectedElements = app.scene.getSelectedElements(appState);\n\n  const updatedElements = distributeElements(selectedElements, distribution);\n\n  const updatedElementsMap = arrayToMap(updatedElements);\n\n  return updateFrameMembershipOfSelectedElements(\n    elements.map((element) => updatedElementsMap.get(element.id) || element),\n    appState,\n    app,\n  );\n};\n\nexport const distributeHorizontally = register({\n  name: \"distributeHorizontally\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"x\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.H,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(appState, app)}\n      type=\"button\"\n      icon={DistributeHorizontallyIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeHorizontally\")} — ${getShortcutKey(\n        \"Alt+H\",\n      )}`}\n      aria-label={t(\"labels.distributeHorizontally\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const distributeVertically = register({\n  name: \"distributeVertically\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, app, {\n        space: \"between\",\n        axis: \"y\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    !event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(appState, app)}\n      type=\"button\"\n      icon={DistributeVerticallyIcon}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeVertically\")} — ${getShortcutKey(\"Alt+V\")}`}\n      aria-label={t(\"labels.distributeVertically\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}