{"ast":null,"code":"import { Severity } from '@sentry/types';\nimport { fill, getGlobalObject, safeJoin } from '@sentry/utils';\nvar global = getGlobalObject();\n/** Send Console API calls as Sentry Events */\nvar CaptureConsole = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function CaptureConsole(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = CaptureConsole.id;\n    /**\n     * @inheritDoc\n     */\n    this._levels = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  CaptureConsole.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!('console' in global)) {\n      return;\n    }\n    this._levels.forEach(function (level) {\n      if (!(level in global.console)) {\n        return;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fill(global.console, level, function (originalConsoleLevel) {\n        return function () {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          var hub = getCurrentHub();\n          if (hub.getIntegration(CaptureConsole)) {\n            hub.withScope(function (scope) {\n              scope.setLevel(Severity.fromString(level));\n              scope.setExtra('arguments', args);\n              scope.addEventProcessor(function (event) {\n                event.logger = 'console';\n                return event;\n              });\n              var message = safeJoin(args, ' ');\n              if (level === 'assert') {\n                if (args[0] === false) {\n                  message = \"Assertion failed: \" + (safeJoin(args.slice(1), ' ') || 'console.assert');\n                  scope.setExtra('arguments', args.slice(1));\n                  hub.captureMessage(message);\n                }\n              } else {\n                hub.captureMessage(message);\n              }\n            });\n          }\n          // this fails for some browsers. :(\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  CaptureConsole.id = 'CaptureConsole';\n  return CaptureConsole;\n}();\nexport { CaptureConsole };","map":{"version":3,"names":["Severity","fill","getGlobalObject","safeJoin","global","CaptureConsole","options","name","id","_levels","levels","prototype","setupOnce","_","getCurrentHub","forEach","level","console","originalConsoleLevel","args","_i","arguments","length","hub","getIntegration","withScope","scope","setLevel","fromString","setExtra","addEventProcessor","event","logger","message","slice","captureMessage","Function","apply","call"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\captureconsole.ts"],"sourcesContent":["import { EventProcessor, Hub, Integration, Severity } from '@sentry/types';\nimport { fill, getGlobalObject, safeJoin } from '@sentry/utils';\n\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Send Console API calls as Sentry Events */\nexport class CaptureConsole implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'CaptureConsole';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = CaptureConsole.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _levels: string[] = ['log', 'info', 'warn', 'error', 'debug', 'assert'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { levels?: string[] } = {}) {\n    if (options.levels) {\n      this._levels = options.levels;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!('console' in global)) {\n      return;\n    }\n\n    this._levels.forEach((level: string) => {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      fill(global.console, level, (originalConsoleLevel: () => any) => (...args: any[]): void => {\n        const hub = getCurrentHub();\n\n        if (hub.getIntegration(CaptureConsole)) {\n          hub.withScope(scope => {\n            scope.setLevel(Severity.fromString(level));\n            scope.setExtra('arguments', args);\n            scope.addEventProcessor(event => {\n              event.logger = 'console';\n              return event;\n            });\n\n            let message = safeJoin(args, ' ');\n            if (level === 'assert') {\n              if (args[0] === false) {\n                message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n                scope.setExtra('arguments', args.slice(1));\n                hub.captureMessage(message);\n              }\n            } else {\n              hub.captureMessage(message);\n            }\n          });\n        }\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n          Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n        }\n      });\n    });\n  }\n}\n"],"mappings":"AAAA,SAA2CA,QAAQ,QAAQ,eAAe;AAC1E,SAASC,IAAI,EAAEC,eAAe,EAAEC,QAAQ,QAAQ,eAAe;AAE/D,IAAMC,MAAM,GAAGF,eAAe,EAA0B;AAExD;AACA,IAAAG,cAAA;EAgBE;;;EAGA,SAAAA,eAAmBC,OAAmC;IAAnC,IAAAA,OAAA;MAAAA,OAAA,KAAmC;IAAA;IAbtD;;;IAGO,KAAAC,IAAI,GAAWF,cAAc,CAACG,EAAE;IAEvC;;;IAGiB,KAAAC,OAAO,GAAa,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;IAMtF,IAAIH,OAAO,CAACI,MAAM,EAAE;MAClB,IAAI,CAACD,OAAO,GAAGH,OAAO,CAACI,MAAM;;EAEjC;EAEA;;;EAGOL,cAAA,CAAAM,SAAA,CAAAC,SAAS,GAAhB,UAAiBC,CAAqC,EAAEC,aAAwB;IAC9E,IAAI,EAAE,SAAS,IAAIV,MAAM,CAAC,EAAE;MAC1B;;IAGF,IAAI,CAACK,OAAO,CAACM,OAAO,CAAC,UAACC,KAAa;MACjC,IAAI,EAAEA,KAAK,IAAIZ,MAAM,CAACa,OAAO,CAAC,EAAE;QAC9B;;MAGF;MACAhB,IAAI,CAACG,MAAM,CAACa,OAAO,EAAED,KAAK,EAAE,UAACE,oBAA+B;QAAK;UAAC,IAAAC,IAAA;eAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;YAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;UAChE,IAAMG,GAAG,GAAGT,aAAa,EAAE;UAE3B,IAAIS,GAAG,CAACC,cAAc,CAACnB,cAAc,CAAC,EAAE;YACtCkB,GAAG,CAACE,SAAS,CAAC,UAAAC,KAAK;cACjBA,KAAK,CAACC,QAAQ,CAAC3B,QAAQ,CAAC4B,UAAU,CAACZ,KAAK,CAAC,CAAC;cAC1CU,KAAK,CAACG,QAAQ,CAAC,WAAW,EAAEV,IAAI,CAAC;cACjCO,KAAK,CAACI,iBAAiB,CAAC,UAAAC,KAAK;gBAC3BA,KAAK,CAACC,MAAM,GAAG,SAAS;gBACxB,OAAOD,KAAK;cACd,CAAC,CAAC;cAEF,IAAIE,OAAO,GAAG9B,QAAQ,CAACgB,IAAI,EAAE,GAAG,CAAC;cACjC,IAAIH,KAAK,KAAK,QAAQ,EAAE;gBACtB,IAAIG,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;kBACrBc,OAAO,GAAG,wBAAqB9B,QAAQ,CAACgB,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,gBAAgB,CAAE;kBACjFR,KAAK,CAACG,QAAQ,CAAC,WAAW,EAAEV,IAAI,CAACe,KAAK,CAAC,CAAC,CAAC,CAAC;kBAC1CX,GAAG,CAACY,cAAc,CAACF,OAAO,CAAC;;eAE9B,MAAM;gBACLV,GAAG,CAACY,cAAc,CAACF,OAAO,CAAC;;YAE/B,CAAC,CAAC;;UAGJ;UACA,IAAIf,oBAAoB,EAAE;YACxBkB,QAAQ,CAACzB,SAAS,CAAC0B,KAAK,CAACC,IAAI,CAACpB,oBAAoB,EAAEd,MAAM,CAACa,OAAO,EAAEE,IAAI,CAAC;;QAE7E,CAAC;MA7BgE,CA6BhE,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EArED;;;EAGcd,cAAA,CAAAG,EAAE,GAAW,gBAAgB;EAmE7C,OAAAH,cAAC;CAAA,EAvED;SAAaA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}