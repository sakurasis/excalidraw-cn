{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\excalidraw-app\\\\components\\\\ExportToExcalidrawPlus.tsx\";\nimport React from \"react\";\nimport { Card } from \"../../components/Card\";\nimport { ToolButton } from \"../../components/ToolButton\";\nimport { serializeAsJSON } from \"../../data/json\";\nimport { loadFirebaseStorage, saveFilesToFirebase } from \"../data/firebase\";\nimport { nanoid } from \"nanoid\";\nimport { useI18n } from \"../../i18n\";\nimport { excalidrawPlusIcon } from \"./icons\";\nimport { encryptData, generateEncryptionKey } from \"../../data/encryption\";\nimport { isInitializedImageElement } from \"../../element/typeChecks\";\nimport { FILE_UPLOAD_MAX_BYTES } from \"../app_constants\";\nimport { encodeFilesForUpload } from \"../data/FileManager\";\nimport { MIME_TYPES } from \"../../constants\";\nimport { trackEvent } from \"../../analytics\";\nimport { getFrame } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const exportToExcalidrawPlus = async (elements, appState, files) => {\n  const firebase = await loadFirebaseStorage();\n  const id = `${nanoid(12)}`;\n  const encryptionKey = await generateEncryptionKey();\n  const encryptedData = await encryptData(encryptionKey, serializeAsJSON(elements, appState, files, \"database\"));\n  const blob = new Blob([encryptedData.iv, new Uint8Array(encryptedData.encryptedBuffer)], {\n    type: MIME_TYPES.binary\n  });\n  await firebase.storage().ref(`/migrations/scenes/${id}`).put(blob, {\n    customMetadata: {\n      data: JSON.stringify({\n        version: 2,\n        name: appState.name\n      }),\n      created: Date.now().toString()\n    }\n  });\n  const filesMap = new Map();\n  for (const element of elements) {\n    if (isInitializedImageElement(element) && files[element.fileId]) {\n      filesMap.set(element.fileId, files[element.fileId]);\n    }\n  }\n  if (filesMap.size) {\n    const filesToUpload = await encodeFilesForUpload({\n      files: filesMap,\n      encryptionKey,\n      maxBytes: FILE_UPLOAD_MAX_BYTES\n    });\n    await saveFilesToFirebase({\n      prefix: `/migrations/files/scenes/${id}`,\n      files: filesToUpload\n    });\n  }\n  window.open(`https://plus.excalidraw.com/import?excalidraw=${id},${encryptionKey}`);\n};\nexport const ExportToExcalidrawPlus = _ref => {\n  let {\n    elements,\n    appState,\n    files,\n    onError\n  } = _ref;\n  const {\n    t\n  } = useI18n();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    color: \"primary\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Card-icon\",\n      children: excalidrawPlusIcon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Excalidraw+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Card-details\",\n      children: t(\"exportDialog.excalidrawplus_description\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n      className: \"Card-button\",\n      type: \"button\",\n      title: t(\"exportDialog.excalidrawplus_button\"),\n      \"aria-label\": t(\"exportDialog.excalidrawplus_button\"),\n      showAriaLabel: true,\n      onClick: async () => {\n        try {\n          trackEvent(\"export\", \"eplus\", `ui (${getFrame()})`);\n          await exportToExcalidrawPlus(elements, appState, files);\n        } catch (error) {\n          console.error(error);\n          if (error.name !== \"AbortError\") {\n            onError(new Error(t(\"exportDialog.excalidrawplus_exportError\")));\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","Card","ToolButton","serializeAsJSON","loadFirebaseStorage","saveFilesToFirebase","nanoid","useI18n","excalidrawPlusIcon","encryptData","generateEncryptionKey","isInitializedImageElement","FILE_UPLOAD_MAX_BYTES","encodeFilesForUpload","MIME_TYPES","trackEvent","getFrame","jsxDEV","_jsxDEV","exportToExcalidrawPlus","elements","appState","files","firebase","id","encryptionKey","encryptedData","blob","Blob","iv","Uint8Array","encryptedBuffer","type","binary","storage","ref","put","customMetadata","data","JSON","stringify","version","name","created","Date","now","toString","filesMap","Map","element","fileId","set","size","filesToUpload","maxBytes","prefix","window","open","ExportToExcalidrawPlus","_ref","onError","t","color","children","className","fileName","_jsxFileName","lineNumber","columnNumber","title","showAriaLabel","onClick","error","console","Error"],"sources":["D:/project/excalidraw-cn/src/excalidraw-app/components/ExportToExcalidrawPlus.tsx"],"sourcesContent":["import React from \"react\";\nimport { Card } from \"../../components/Card\";\nimport { ToolButton } from \"../../components/ToolButton\";\nimport { serializeAsJSON } from \"../../data/json\";\nimport { loadFirebaseStorage, saveFilesToFirebase } from \"../data/firebase\";\nimport { FileId, NonDeletedExcalidrawElement } from \"../../element/types\";\nimport { AppState, BinaryFileData, BinaryFiles } from \"../../types\";\nimport { nanoid } from \"nanoid\";\nimport { useI18n } from \"../../i18n\";\nimport { excalidrawPlusIcon } from \"./icons\";\nimport { encryptData, generateEncryptionKey } from \"../../data/encryption\";\nimport { isInitializedImageElement } from \"../../element/typeChecks\";\nimport { FILE_UPLOAD_MAX_BYTES } from \"../app_constants\";\nimport { encodeFilesForUpload } from \"../data/FileManager\";\nimport { MIME_TYPES } from \"../../constants\";\nimport { trackEvent } from \"../../analytics\";\nimport { getFrame } from \"../../utils\";\n\nexport const exportToExcalidrawPlus = async (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: Partial<AppState>,\n  files: BinaryFiles,\n) => {\n  const firebase = await loadFirebaseStorage();\n\n  const id = `${nanoid(12)}`;\n\n  const encryptionKey = (await generateEncryptionKey())!;\n  const encryptedData = await encryptData(\n    encryptionKey,\n    serializeAsJSON(elements, appState, files, \"database\"),\n  );\n\n  const blob = new Blob(\n    [encryptedData.iv, new Uint8Array(encryptedData.encryptedBuffer)],\n    {\n      type: MIME_TYPES.binary,\n    },\n  );\n\n  await firebase\n    .storage()\n    .ref(`/migrations/scenes/${id}`)\n    .put(blob, {\n      customMetadata: {\n        data: JSON.stringify({ version: 2, name: appState.name }),\n        created: Date.now().toString(),\n      },\n    });\n\n  const filesMap = new Map<FileId, BinaryFileData>();\n  for (const element of elements) {\n    if (isInitializedImageElement(element) && files[element.fileId]) {\n      filesMap.set(element.fileId, files[element.fileId]);\n    }\n  }\n\n  if (filesMap.size) {\n    const filesToUpload = await encodeFilesForUpload({\n      files: filesMap,\n      encryptionKey,\n      maxBytes: FILE_UPLOAD_MAX_BYTES,\n    });\n\n    await saveFilesToFirebase({\n      prefix: `/migrations/files/scenes/${id}`,\n      files: filesToUpload,\n    });\n  }\n\n  window.open(\n    `https://plus.excalidraw.com/import?excalidraw=${id},${encryptionKey}`,\n  );\n};\n\nexport const ExportToExcalidrawPlus: React.FC<{\n  elements: readonly NonDeletedExcalidrawElement[];\n  appState: Partial<AppState>;\n  files: BinaryFiles;\n  onError: (error: Error) => void;\n}> = ({ elements, appState, files, onError }) => {\n  const { t } = useI18n();\n  return (\n    <Card color=\"primary\">\n      <div className=\"Card-icon\">{excalidrawPlusIcon}</div>\n      <h2>Excalidraw+</h2>\n      <div className=\"Card-details\">\n        {t(\"exportDialog.excalidrawplus_description\")}\n      </div>\n      <ToolButton\n        className=\"Card-button\"\n        type=\"button\"\n        title={t(\"exportDialog.excalidrawplus_button\")}\n        aria-label={t(\"exportDialog.excalidrawplus_button\")}\n        showAriaLabel={true}\n        onClick={async () => {\n          try {\n            trackEvent(\"export\", \"eplus\", `ui (${getFrame()})`);\n            await exportToExcalidrawPlus(elements, appState, files);\n          } catch (error: any) {\n            console.error(error);\n            if (error.name !== \"AbortError\") {\n              onError(new Error(t(\"exportDialog.excalidrawplus_exportError\")));\n            }\n          }\n        }}\n      />\n    </Card>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}