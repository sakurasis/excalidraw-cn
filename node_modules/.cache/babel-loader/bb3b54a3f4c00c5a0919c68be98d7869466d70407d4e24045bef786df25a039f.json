{"ast":null,"code":"import _slicedToArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n  var out = [];\n  var lastType = '';\n  var cx = 0,\n    cy = 0;\n  var subx = 0,\n    suby = 0;\n  var lcx = 0,\n    lcy = 0;\n  var _iterator = _createForOfIteratorHelper(segments),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _step.value,\n        key = _step$value.key,\n        data = _step$value.data;\n      switch (key) {\n        case 'M':\n          out.push({\n            key: 'M',\n            data: _toConsumableArray(data)\n          });\n          var _data = _slicedToArray(data, 2);\n          cx = _data[0];\n          cy = _data[1];\n          var _data2 = _slicedToArray(data, 2);\n          subx = _data2[0];\n          suby = _data2[1];\n          break;\n        case 'C':\n          out.push({\n            key: 'C',\n            data: _toConsumableArray(data)\n          });\n          cx = data[4];\n          cy = data[5];\n          lcx = data[2];\n          lcy = data[3];\n          break;\n        case 'L':\n          out.push({\n            key: 'L',\n            data: _toConsumableArray(data)\n          });\n          var _data3 = _slicedToArray(data, 2);\n          cx = _data3[0];\n          cy = _data3[1];\n          break;\n        case 'H':\n          cx = data[0];\n          out.push({\n            key: 'L',\n            data: [cx, cy]\n          });\n          break;\n        case 'V':\n          cy = data[0];\n          out.push({\n            key: 'L',\n            data: [cx, cy]\n          });\n          break;\n        case 'S':\n          {\n            var cx1 = 0,\n              cy1 = 0;\n            if (lastType === 'C' || lastType === 'S') {\n              cx1 = cx + (cx - lcx);\n              cy1 = cy + (cy - lcy);\n            } else {\n              cx1 = cx;\n              cy1 = cy;\n            }\n            out.push({\n              key: 'C',\n              data: [cx1, cy1].concat(_toConsumableArray(data))\n            });\n            lcx = data[0];\n            lcy = data[1];\n            cx = data[2];\n            cy = data[3];\n            break;\n          }\n        case 'T':\n          {\n            var _data4 = _slicedToArray(data, 2),\n              x = _data4[0],\n              y = _data4[1];\n            var x1 = 0,\n              y1 = 0;\n            if (lastType === 'Q' || lastType === 'T') {\n              x1 = cx + (cx - lcx);\n              y1 = cy + (cy - lcy);\n            } else {\n              x1 = cx;\n              y1 = cy;\n            }\n            var _cx = cx + 2 * (x1 - cx) / 3;\n            var _cy = cy + 2 * (y1 - cy) / 3;\n            var cx2 = x + 2 * (x1 - x) / 3;\n            var cy2 = y + 2 * (y1 - y) / 3;\n            out.push({\n              key: 'C',\n              data: [_cx, _cy, cx2, cy2, x, y]\n            });\n            lcx = x1;\n            lcy = y1;\n            cx = x;\n            cy = y;\n            break;\n          }\n        case 'Q':\n          {\n            var _data5 = _slicedToArray(data, 4),\n              _x = _data5[0],\n              _y = _data5[1],\n              _x2 = _data5[2],\n              _y2 = _data5[3];\n            var _cx2 = cx + 2 * (_x - cx) / 3;\n            var _cy2 = cy + 2 * (_y - cy) / 3;\n            var _cx3 = _x2 + 2 * (_x - _x2) / 3;\n            var _cy3 = _y2 + 2 * (_y - _y2) / 3;\n            out.push({\n              key: 'C',\n              data: [_cx2, _cy2, _cx3, _cy3, _x2, _y2]\n            });\n            lcx = _x;\n            lcy = _y;\n            cx = _x2;\n            cy = _y2;\n            break;\n          }\n        case 'A':\n          {\n            var r1 = Math.abs(data[0]);\n            var r2 = Math.abs(data[1]);\n            var angle = data[2];\n            var largeArcFlag = data[3];\n            var sweepFlag = data[4];\n            var _x3 = data[5];\n            var _y3 = data[6];\n            if (r1 === 0 || r2 === 0) {\n              out.push({\n                key: 'C',\n                data: [cx, cy, _x3, _y3, _x3, _y3]\n              });\n              cx = _x3;\n              cy = _y3;\n            } else {\n              if (cx !== _x3 || cy !== _y3) {\n                var curves = arcToCubicCurves(cx, cy, _x3, _y3, r1, r2, angle, largeArcFlag, sweepFlag);\n                curves.forEach(function (curve) {\n                  out.push({\n                    key: 'C',\n                    data: curve\n                  });\n                });\n                cx = _x3;\n                cy = _y3;\n              }\n            }\n            break;\n          }\n        case 'Z':\n          out.push({\n            key: 'Z',\n            data: []\n          });\n          cx = subx;\n          cy = suby;\n          break;\n      }\n      lastType = key;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return out;\n}\nfunction degToRad(degrees) {\n  return Math.PI * degrees / 180;\n}\nfunction rotate(x, y, angleRad) {\n  var X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n  var Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n  return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n  var angleRad = degToRad(angle);\n  var params = [];\n  var f1 = 0,\n    f2 = 0,\n    cx = 0,\n    cy = 0;\n  if (recursive) {\n    var _recursive = _slicedToArray(recursive, 4);\n    f1 = _recursive[0];\n    f2 = _recursive[1];\n    cx = _recursive[2];\n    cy = _recursive[3];\n  } else {\n    var _rotate = rotate(x1, y1, -angleRad);\n    var _rotate2 = _slicedToArray(_rotate, 2);\n    x1 = _rotate2[0];\n    y1 = _rotate2[1];\n    var _rotate3 = rotate(x2, y2, -angleRad);\n    var _rotate4 = _slicedToArray(_rotate3, 2);\n    x2 = _rotate4[0];\n    y2 = _rotate4[1];\n    var x = (x1 - x2) / 2;\n    var y = (y1 - y2) / 2;\n    var h = x * x / (r1 * r1) + y * y / (r2 * r2);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      r1 = h * r1;\n      r2 = h * r2;\n    }\n    var sign = largeArcFlag === sweepFlag ? -1 : 1;\n    var r1Pow = r1 * r1;\n    var r2Pow = r2 * r2;\n    var left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n    var right = r1Pow * y * y + r2Pow * x * x;\n    var k = sign * Math.sqrt(Math.abs(left / right));\n    cx = k * r1 * y / r2 + (x1 + x2) / 2;\n    cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n    f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n    f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n    if (x1 < cx) {\n      f1 = Math.PI - f1;\n    }\n    if (x2 < cx) {\n      f2 = Math.PI - f2;\n    }\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n    if (sweepFlag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n    if (!sweepFlag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  }\n  var df = f2 - f1;\n  if (Math.abs(df) > Math.PI * 120 / 180) {\n    var f2old = f2;\n    var x2old = x2;\n    var y2old = y2;\n    if (sweepFlag && f2 > f1) {\n      f2 = f1 + Math.PI * 120 / 180 * 1;\n    } else {\n      f2 = f1 + Math.PI * 120 / 180 * -1;\n    }\n    x2 = cx + r1 * Math.cos(f2);\n    y2 = cy + r2 * Math.sin(f2);\n    params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  var c1 = Math.cos(f1);\n  var s1 = Math.sin(f1);\n  var c2 = Math.cos(f2);\n  var s2 = Math.sin(f2);\n  var t = Math.tan(df / 4);\n  var hx = 4 / 3 * r1 * t;\n  var hy = 4 / 3 * r2 * t;\n  var m1 = [x1, y1];\n  var m2 = [x1 + hx * s1, y1 - hy * c1];\n  var m3 = [x2 + hx * s2, y2 - hy * c2];\n  var m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(params);\n  } else {\n    params = [m2, m3, m4].concat(params);\n    var curves = [];\n    for (var i = 0; i < params.length; i += 3) {\n      var _r = rotate(params[i][0], params[i][1], angleRad);\n      var _r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n      var r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n      curves.push([_r[0], _r[1], _r2[0], _r2[1], r3[0], r3[1]]);\n    }\n    return curves;\n  }\n}","map":{"version":3,"names":["normalize","segments","out","lastType","cx","cy","subx","suby","lcx","lcy","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","value","key","data","push","_toConsumableArray","_data","_slicedToArray","_data2","_data3","cx1","cy1","concat","_data4","x","y","x1","y1","cx2","cy2","_data5","r1","Math","abs","r2","angle","largeArcFlag","sweepFlag","curves","arcToCubicCurves","forEach","curve","err","e","f","degToRad","degrees","PI","rotate","angleRad","X","cos","sin","Y","x2","y2","recursive","params","f1","f2","_recursive","_rotate","_rotate2","_rotate3","_rotate4","h","sqrt","sign","r1Pow","r2Pow","left","right","k","asin","parseFloat","toFixed","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","i","length","r3"],"sources":["D:/project/excalidraw-cn/node_modules/path-data-parser/lib/normalize.js"],"sourcesContent":["// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n    const out = [];\n    let lastType = '';\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    let lcx = 0, lcy = 0;\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                lcx = data[2];\n                lcy = data[3];\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'H':\n                cx = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'V':\n                cy = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'S': {\n                let cx1 = 0, cy1 = 0;\n                if (lastType === 'C' || lastType === 'S') {\n                    cx1 = cx + (cx - lcx);\n                    cy1 = cy + (cy - lcy);\n                }\n                else {\n                    cx1 = cx;\n                    cy1 = cy;\n                }\n                out.push({ key: 'C', data: [cx1, cy1, ...data] });\n                lcx = data[0];\n                lcy = data[1];\n                cx = data[2];\n                cy = data[3];\n                break;\n            }\n            case 'T': {\n                const [x, y] = data;\n                let x1 = 0, y1 = 0;\n                if (lastType === 'Q' || lastType === 'T') {\n                    x1 = cx + (cx - lcx);\n                    y1 = cy + (cy - lcy);\n                }\n                else {\n                    x1 = cx;\n                    y1 = cy;\n                }\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'Q': {\n                const [x1, y1, x, y] = data;\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'A': {\n                const r1 = Math.abs(data[0]);\n                const r2 = Math.abs(data[1]);\n                const angle = data[2];\n                const largeArcFlag = data[3];\n                const sweepFlag = data[4];\n                const x = data[5];\n                const y = data[6];\n                if (r1 === 0 || r2 === 0) {\n                    out.push({ key: 'C', data: [cx, cy, x, y, x, y] });\n                    cx = x;\n                    cy = y;\n                }\n                else {\n                    if (cx !== x || cy !== y) {\n                        const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n                        curves.forEach(function (curve) {\n                            out.push({ key: 'C', data: curve });\n                        });\n                        cx = x;\n                        cy = y;\n                    }\n                }\n                break;\n            }\n            case 'Z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n        lastType = key;\n    }\n    return out;\n}\nfunction degToRad(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nfunction rotate(x, y, angleRad) {\n    const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n    const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n    return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n    const angleRad = degToRad(angle);\n    let params = [];\n    let f1 = 0, f2 = 0, cx = 0, cy = 0;\n    if (recursive) {\n        [f1, f2, cx, cy] = recursive;\n    }\n    else {\n        [x1, y1] = rotate(x1, y1, -angleRad);\n        [x2, y2] = rotate(x2, y2, -angleRad);\n        const x = (x1 - x2) / 2;\n        const y = (y1 - y2) / 2;\n        let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            r1 = h * r1;\n            r2 = h * r2;\n        }\n        const sign = (largeArcFlag === sweepFlag) ? -1 : 1;\n        const r1Pow = r1 * r1;\n        const r2Pow = r2 * r2;\n        const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        const right = r1Pow * y * y + r2Pow * x * x;\n        const k = sign * Math.sqrt(Math.abs(left / right));\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n        if (x1 < cx) {\n            f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n            f2 = Math.PI - f2;\n        }\n        if (f1 < 0) {\n            f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n            f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n            f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n            f2 = f2 - Math.PI * 2;\n        }\n    }\n    let df = f2 - f1;\n    if (Math.abs(df) > (Math.PI * 120 / 180)) {\n        const f2old = f2;\n        const x2old = x2;\n        const y2old = y2;\n        if (sweepFlag && f2 > f1) {\n            f2 = f1 + (Math.PI * 120 / 180) * (1);\n        }\n        else {\n            f2 = f1 + (Math.PI * 120 / 180) * (-1);\n        }\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n    }\n    df = f2 - f1;\n    const c1 = Math.cos(f1);\n    const s1 = Math.sin(f1);\n    const c2 = Math.cos(f2);\n    const s2 = Math.sin(f2);\n    const t = Math.tan(df / 4);\n    const hx = 4 / 3 * r1 * t;\n    const hy = 4 / 3 * r2 * t;\n    const m1 = [x1, y1];\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\n    const m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(params);\n    }\n    else {\n        params = [m2, m3, m4].concat(params);\n        const curves = [];\n        for (let i = 0; i < params.length; i += 3) {\n            const r1 = rotate(params[i][0], params[i][1], angleRad);\n            const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n            const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n            curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n        }\n        return curves;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}