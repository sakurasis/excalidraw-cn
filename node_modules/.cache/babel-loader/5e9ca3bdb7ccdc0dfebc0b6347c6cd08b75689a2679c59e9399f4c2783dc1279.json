{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseBackend } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nvar BrowserBackend = /** @class */function (_super) {\n  __extends(BrowserBackend, _super);\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventFromException(this._options, exception, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n    return eventFromMessage(this._options, message, level, hint);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n    var transportOptions = __assign(__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn,\n      _metadata: this._options._metadata\n    });\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  };\n  return BrowserBackend;\n}(BaseBackend);\nexport { BrowserBackend };","map":{"version":3,"names":["BaseBackend","Severity","supportsFetch","eventFromException","eventFromMessage","FetchTransport","XHRTransport","BrowserBackend","_super","__extends","prototype","exception","hint","_options","message","level","Info","_setupTransport","dsn","call","transportOptions","__assign","_metadata","transport"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\browser\\src\\backend.ts"],"sourcesContent":["import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A flag enabling Sessions Tracking feature.\n   * By default Sessions Tracking is disabled.\n   */\n  autoSessionTracking?: boolean;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options, exception, hint);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(this._options, message, level, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      _metadata: this._options._metadata,\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAAoCC,QAAQ,QAAmB,eAAe;AAC9E,SAASC,aAAa,QAAQ,eAAe;AAE7C,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,gBAAgB;AACrE,SAASC,cAAc,EAAEC,YAAY,QAAQ,cAAc;AAkC3D;;;;AAIA,IAAAC,cAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAApC,SAAAD,eAAA;;EAqCA;EApCE;;;EAGOA,cAAA,CAAAG,SAAA,CAAAP,kBAAkB,GAAzB,UAA0BQ,SAAkB,EAAEC,IAAgB;IAC5D,OAAOT,kBAAkB,CAAC,IAAI,CAACU,QAAQ,EAAEF,SAAS,EAAEC,IAAI,CAAC;EAC3D,CAAC;EACD;;;EAGOL,cAAA,CAAAG,SAAA,CAAAN,gBAAgB,GAAvB,UAAwBU,OAAe,EAAEC,KAA+B,EAAEH,IAAgB;IAAjD,IAAAG,KAAA;MAAAA,KAAA,GAAkBd,QAAQ,CAACe,IAAI;IAAA;IACtE,OAAOZ,gBAAgB,CAAC,IAAI,CAACS,QAAQ,EAAEC,OAAO,EAAEC,KAAK,EAAEH,IAAI,CAAC;EAC9D,CAAC;EAED;;;EAGUL,cAAA,CAAAG,SAAA,CAAAO,eAAe,GAAzB;IACE,IAAI,CAAC,IAAI,CAACJ,QAAQ,CAACK,GAAG,EAAE;MACtB;MACA,OAAOV,MAAA,CAAAE,SAAA,CAAMO,eAAe,CAAAE,IAAA,MAAE;;IAGhC,IAAMC,gBAAgB,GAAAC,QAAA,CAAAA,QAAA,KACjB,IAAI,CAACR,QAAQ,CAACO,gBAAgB;MACjCF,GAAG,EAAE,IAAI,CAACL,QAAQ,CAACK,GAAG;MACtBI,SAAS,EAAE,IAAI,CAACT,QAAQ,CAACS;IAAS,EACnC;IAED,IAAI,IAAI,CAACT,QAAQ,CAACU,SAAS,EAAE;MAC3B,OAAO,IAAI,IAAI,CAACV,QAAQ,CAACU,SAAS,CAACH,gBAAgB,CAAC;;IAEtD,IAAIlB,aAAa,EAAE,EAAE;MACnB,OAAO,IAAIG,cAAc,CAACe,gBAAgB,CAAC;;IAE7C,OAAO,IAAId,YAAY,CAACc,gBAAgB,CAAC;EAC3C,CAAC;EACH,OAAAb,cAAC;AAAD,CAAC,CArCmCP,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}