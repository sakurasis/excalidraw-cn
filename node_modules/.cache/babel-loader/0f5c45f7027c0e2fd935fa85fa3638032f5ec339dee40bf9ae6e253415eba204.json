{"ast":null,"code":"import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n  constructor(svg, config) {\n    this.svg = svg;\n    this.gen = new RoughGenerator(config);\n  }\n  draw(drawable) {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.getDefaultOptions();\n    const doc = this.svg.ownerDocument || window.document;\n    const g = doc.createElementNS(SVGNS, 'g');\n    const precision = drawable.options.fixedDecimalPlaceDigits;\n    for (const drawing of sets) {\n      let path = null;\n      switch (drawing.type) {\n        case 'path':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing, precision));\n            path.setAttribute('stroke', o.stroke);\n            path.setAttribute('stroke-width', o.strokeWidth + '');\n            path.setAttribute('fill', 'none');\n            if (o.strokeLineDash) {\n              path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n            }\n            if (o.strokeLineDashOffset) {\n              path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n            }\n            break;\n          }\n        case 'fillPath':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing, precision));\n            path.setAttribute('stroke', 'none');\n            path.setAttribute('stroke-width', '0');\n            path.setAttribute('fill', o.fill || '');\n            if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n              path.setAttribute('fill-rule', 'evenodd');\n            }\n            break;\n          }\n        case 'fillSketch':\n          {\n            path = this.fillSketch(doc, drawing, o);\n            break;\n          }\n      }\n      if (path) {\n        g.appendChild(path);\n      }\n    }\n    return g;\n  }\n  fillSketch(doc, drawing, o) {\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    const path = doc.createElementNS(SVGNS, 'path');\n    path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n    path.setAttribute('stroke', o.fill || '');\n    path.setAttribute('stroke-width', fweight + '');\n    path.setAttribute('fill', 'none');\n    if (o.fillLineDash) {\n      path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n    }\n    if (o.fillLineDashOffset) {\n      path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n    }\n    return path;\n  }\n  get generator() {\n    return this.gen;\n  }\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n  opsToPath(drawing, fixedDecimalPlaceDigits) {\n    return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n  }\n  line(x1, y1, x2, y2, options) {\n    const d = this.gen.line(x1, y1, x2, y2, options);\n    return this.draw(d);\n  }\n  rectangle(x, y, width, height, options) {\n    const d = this.gen.rectangle(x, y, width, height, options);\n    return this.draw(d);\n  }\n  ellipse(x, y, width, height, options) {\n    const d = this.gen.ellipse(x, y, width, height, options);\n    return this.draw(d);\n  }\n  circle(x, y, diameter, options) {\n    const d = this.gen.circle(x, y, diameter, options);\n    return this.draw(d);\n  }\n  linearPath(points, options) {\n    const d = this.gen.linearPath(points, options);\n    return this.draw(d);\n  }\n  polygon(points, options) {\n    const d = this.gen.polygon(points, options);\n    return this.draw(d);\n  }\n  arc(x, y, width, height, start, stop) {\n    let closed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let options = arguments.length > 7 ? arguments[7] : undefined;\n    const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    return this.draw(d);\n  }\n  curve(points, options) {\n    const d = this.gen.curve(points, options);\n    return this.draw(d);\n  }\n  path(d, options) {\n    const drawing = this.gen.path(d, options);\n    return this.draw(drawing);\n  }\n}","map":{"version":3,"names":["SVGNS","RoughGenerator","RoughSVG","constructor","svg","config","gen","draw","drawable","sets","o","options","getDefaultOptions","doc","ownerDocument","window","document","g","createElementNS","precision","fixedDecimalPlaceDigits","drawing","path","type","setAttribute","opsToPath","stroke","strokeWidth","strokeLineDash","join","trim","strokeLineDashOffset","fill","shape","fillSketch","appendChild","fweight","fillWeight","fillLineDash","fillLineDashOffset","generator","defaultOptions","line","x1","y1","x2","y2","d","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","arguments","length","undefined","curve"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/svg.js"],"sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', o.stroke);\n                    path.setAttribute('stroke-width', o.strokeWidth + '');\n                    path.setAttribute('fill', 'none');\n                    if (o.strokeLineDash) {\n                        path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                    }\n                    if (o.strokeLineDashOffset) {\n                        path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n                    }\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', 'none');\n                    path.setAttribute('stroke-width', '0');\n                    path.setAttribute('fill', o.fill || '');\n                    if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                        path.setAttribute('fill-rule', 'evenodd');\n                    }\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n        path.setAttribute('stroke', o.fill || '');\n        path.setAttribute('stroke-width', fweight + '');\n        path.setAttribute('fill', 'none');\n        if (o.fillLineDash) {\n            path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n        }\n        if (o.fillLineDashOffset) {\n            path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n        }\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing, fixedDecimalPlaceDigits) {\n        return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}