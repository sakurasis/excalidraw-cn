{"ast":null,"code":"function hashToInteger(id){var hash=0;if(id.length===0){return hash;}for(var i=0;i<id.length;i++){var char=id.charCodeAt(i);hash=(hash<<5)-hash+char;}return hash;}export var getClientColor=function getClientColor(id){// to get more even distribution in case `id` is not uniformly distributed to\n// begin with, we hash it\nvar hash=Math.abs(hashToInteger(id));// we want to get a multiple of 10 number in the range of 0-360 (in other\n// words a hue value of step size 10). There are 37 such values including 0.\nvar hue=hash%37*10;var saturation=100;var lightness=83;return\"hsl(\".concat(hue,\", \").concat(saturation,\"%, \").concat(lightness,\"%)\");};/**\n * returns first char, capitalized\n */export var getNameInitial=function getNameInitial(name){var _name$trim;// first char can be a surrogate pair, hence using codePointAt\nvar firstCodePoint=name===null||name===void 0?void 0:(_name$trim=name.trim())===null||_name$trim===void 0?void 0:_name$trim.codePointAt(0);return(firstCodePoint?String.fromCodePoint(firstCodePoint):\"?\").toUpperCase();};","map":{"version":3,"names":["hashToInteger","id","hash","length","i","char","charCodeAt","getClientColor","Math","abs","hue","saturation","lightness","concat","getNameInitial","name","_name$trim","firstCodePoint","trim","codePointAt","String","fromCodePoint","toUpperCase"],"sources":["D:/project/excalidraw-cn/src/clients.ts"],"sourcesContent":["function hashToInteger(id: string) {\n  let hash = 0;\n  if (id.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < id.length; i++) {\n    const char = id.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n  }\n  return hash;\n}\n\nexport const getClientColor = (\n  /**\n   * any uniquely identifying key, such as user id or socket id\n   */\n  id: string,\n) => {\n  // to get more even distribution in case `id` is not uniformly distributed to\n  // begin with, we hash it\n  const hash = Math.abs(hashToInteger(id));\n  // we want to get a multiple of 10 number in the range of 0-360 (in other\n  // words a hue value of step size 10). There are 37 such values including 0.\n  const hue = (hash % 37) * 10;\n  const saturation = 100;\n  const lightness = 83;\n\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n};\n\n/**\n * returns first char, capitalized\n */\nexport const getNameInitial = (name?: string | null) => {\n  // first char can be a surrogate pair, hence using codePointAt\n  const firstCodePoint = name?.trim()?.codePointAt(0);\n  return (\n    firstCodePoint ? String.fromCodePoint(firstCodePoint) : \"?\"\n  ).toUpperCase();\n};\n"],"mappings":"AAAA,QAAS,CAAAA,aAAaA,CAACC,EAAU,CAAE,CACjC,GAAI,CAAAC,IAAI,CAAG,CAAC,CACZ,GAAID,EAAE,CAACE,MAAM,GAAK,CAAC,CAAE,CACnB,MAAO,CAAAD,IAAI,CACb,CACA,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,EAAE,CAACE,MAAM,CAAEC,CAAC,EAAE,CAAE,CAClC,GAAM,CAAAC,IAAI,CAAGJ,EAAE,CAACK,UAAU,CAACF,CAAC,CAAC,CAC7BF,IAAI,CAAG,CAACA,IAAI,EAAI,CAAC,EAAIA,IAAI,CAAGG,IAAI,CAClC,CACA,MAAO,CAAAH,IAAI,CACb,CAEA,MAAO,IAAM,CAAAK,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAIzBN,EAAU,CACP,CACH;AACA;AACA,GAAM,CAAAC,IAAI,CAAGM,IAAI,CAACC,GAAG,CAACT,aAAa,CAACC,EAAE,CAAC,CAAC,CACxC;AACA;AACA,GAAM,CAAAS,GAAG,CAAIR,IAAI,CAAG,EAAE,CAAI,EAAE,CAC5B,GAAM,CAAAS,UAAU,CAAG,GAAG,CACtB,GAAM,CAAAC,SAAS,CAAG,EAAE,CAEpB,aAAAC,MAAA,CAAcH,GAAG,OAAAG,MAAA,CAAKF,UAAU,QAAAE,MAAA,CAAMD,SAAS,OACjD,CAAC,CAED;AACA;AACA,GACA,MAAO,IAAM,CAAAE,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIC,IAAoB,CAAK,KAAAC,UAAA,CACtD;AACA,GAAM,CAAAC,cAAc,CAAGF,IAAI,SAAJA,IAAI,kBAAAC,UAAA,CAAJD,IAAI,CAAEG,IAAI,EAAE,UAAAF,UAAA,iBAAZA,UAAA,CAAcG,WAAW,CAAC,CAAC,CAAC,CACnD,MAAO,CACLF,cAAc,CAAGG,MAAM,CAACC,aAAa,CAACJ,cAAc,CAAC,CAAG,GAAG,EAC3DK,WAAW,EAAE,CACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}