{"ast":null,"code":"import { __values } from \"tslib\";\nimport { getGlobalObject, supportsReportingObserver } from '@sentry/utils';\n/** JSDoc */\nvar ReportTypes;\n(function (ReportTypes) {\n  /** JSDoc */\n  ReportTypes[\"Crash\"] = \"crash\";\n  /** JSDoc */\n  ReportTypes[\"Deprecation\"] = \"deprecation\";\n  /** JSDoc */\n  ReportTypes[\"Intervention\"] = \"intervention\";\n})(ReportTypes || (ReportTypes = {}));\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nvar ReportingObserver = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function ReportingObserver(_options) {\n    if (_options === void 0) {\n      _options = {\n        types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention]\n      };\n    }\n    this._options = _options;\n    /**\n     * @inheritDoc\n     */\n    this.name = ReportingObserver.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  ReportingObserver.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!supportsReportingObserver()) {\n      return;\n    }\n    this._getCurrentHub = getCurrentHub;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    var observer = new (getGlobalObject().ReportingObserver)(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types\n    });\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    observer.observe();\n  };\n  /**\n   * @inheritDoc\n   */\n  ReportingObserver.prototype.handler = function (reports) {\n    var e_1, _a;\n    var hub = this._getCurrentHub && this._getCurrentHub();\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n    var _loop_1 = function _loop_1(report) {\n      hub.withScope(function (scope) {\n        scope.setExtra('url', report.url);\n        var label = \"ReportingObserver [\" + report.type + \"]\";\n        var details = 'No details available';\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          var plainBody = {};\n          // eslint-disable-next-line guard-for-in\n          for (var prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n          scope.setExtra('body', plainBody);\n          if (report.type === ReportTypes.Crash) {\n            var body = report.body;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            var body = report.body;\n            details = body.message || details;\n          }\n        }\n        hub.captureMessage(label + \": \" + details);\n      });\n    };\n    try {\n      for (var reports_1 = __values(reports), reports_1_1 = reports_1.next(); !reports_1_1.done; reports_1_1 = reports_1.next()) {\n        var report = reports_1_1.value;\n        _loop_1(report);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (reports_1_1 && !reports_1_1.done && (_a = reports_1.return)) _a.call(reports_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  ReportingObserver.id = 'ReportingObserver';\n  return ReportingObserver;\n}();\nexport { ReportingObserver };","map":{"version":3,"names":["getGlobalObject","supportsReportingObserver","ReportTypes","ReportingObserver","_options","types","Crash","Deprecation","Intervention","name","id","prototype","setupOnce","_","getCurrentHub","_getCurrentHub","observer","handler","bind","buffered","observe","reports","hub","getIntegration","report","withScope","scope","setExtra","url","label","type","details","body","plainBody","prop","crashId","reason","join","trim","message","captureMessage","reports_1","__values","reports_1_1","next","done","value"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\reportingobserver.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, supportsReportingObserver } from '@sentry/utils';\n\n/** JSDoc */\ninterface Report {\n  [key: string]: any;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\n/** JSDoc */\nenum ReportTypes {\n  /** JSDoc */\n  Crash = 'crash',\n  /** JSDoc */\n  Deprecation = 'deprecation',\n  /** JSDoc */\n  Intervention = 'intervention',\n}\n\n/** JSDoc */\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\n/** JSDoc */\ninterface CrashReportBody {\n  [key: string]: any;\n  crashId: string;\n  reason?: string;\n}\n\n/** JSDoc */\ninterface DeprecationReportBody {\n  [key: string]: any;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** JSDoc */\ninterface InterventionReportBody {\n  [key: string]: any;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nexport class ReportingObserver implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReportingObserver';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = ReportingObserver.id;\n\n  /**\n   * Returns current hub.\n   */\n  private _getCurrentHub?: () => Hub;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly _options: {\n      types?: ReportTypes[];\n    } = {\n      types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],\n    },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const observer = new (getGlobalObject<any>().ReportingObserver)(this.handler.bind(this), {\n      buffered: true,\n      types: this._options.types,\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    observer.observe();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(reports: Report[]): void {\n    const hub = this._getCurrentHub && this._getCurrentHub();\n    if (!hub || !hub.getIntegration(ReportingObserver)) {\n      return;\n    }\n    for (const report of reports) {\n      hub.withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: any;\n          } = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        hub.captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}