{"ast":null,"code":"import _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport var DotFiller = /*#__PURE__*/function () {\n  function DotFiller(helper) {\n    _classCallCheck(this, DotFiller);\n    this.helper = helper;\n  }\n  _createClass(DotFiller, [{\n    key: \"fillPolygons\",\n    value: function fillPolygons(polygonList, o) {\n      o = Object.assign({}, o, {\n        hachureAngle: 0\n      });\n      var lines = polygonHachureLines(polygonList, o);\n      return this.dotsOnLines(lines, o);\n    }\n  }, {\n    key: \"dotsOnLines\",\n    value: function dotsOnLines(lines, o) {\n      var ops = [];\n      var gap = o.hachureGap;\n      if (gap < 0) {\n        gap = o.strokeWidth * 4;\n      }\n      gap = Math.max(gap, 0.1);\n      var fweight = o.fillWeight;\n      if (fweight < 0) {\n        fweight = o.strokeWidth / 2;\n      }\n      var ro = gap / 4;\n      var _iterator = _createForOfIteratorHelper(lines),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var line = _step.value;\n          var length = lineLength(line);\n          var dl = length / gap;\n          var count = Math.ceil(dl) - 1;\n          var offset = length - count * gap;\n          var x = (line[0][0] + line[1][0]) / 2 - gap / 4;\n          var minY = Math.min(line[0][1], line[1][1]);\n          for (var i = 0; i < count; i++) {\n            var y = minY + offset + i * gap;\n            var cx = x - ro + Math.random() * 2 * ro;\n            var cy = y - ro + Math.random() * 2 * ro;\n            var el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n            ops.push.apply(ops, _toConsumableArray(el.ops));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return {\n        type: 'fillSketch',\n        ops: ops\n      };\n    }\n  }]);\n  return DotFiller;\n}();","map":{"version":3,"names":["lineLength","polygonHachureLines","DotFiller","helper","_classCallCheck","_createClass","key","value","fillPolygons","polygonList","o","Object","assign","hachureAngle","lines","dotsOnLines","ops","gap","hachureGap","strokeWidth","Math","max","fweight","fillWeight","ro","_iterator","_createForOfIteratorHelper","_step","s","n","done","line","length","dl","count","ceil","offset","x","minY","min","i","y","cx","random","cy","el","ellipse","push","apply","_toConsumableArray","err","e","f","type"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/dot-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DotFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        o = Object.assign({}, o, { hachureAngle: 0 });\n        const lines = polygonHachureLines(polygonList, o);\n        return this.dotsOnLines(lines, o);\n    }\n    dotsOnLines(lines, o) {\n        const ops = [];\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const ro = gap / 4;\n        for (const line of lines) {\n            const length = lineLength(line);\n            const dl = length / gap;\n            const count = Math.ceil(dl) - 1;\n            const offset = length - (count * gap);\n            const x = ((line[0][0] + line[1][0]) / 2) - (gap / 4);\n            const minY = Math.min(line[0][1], line[1][1]);\n            for (let i = 0; i < count; i++) {\n                const y = minY + offset + (i * gap);\n                const cx = (x - ro) + Math.random() * 2 * ro;\n                const cy = (y - ro) + Math.random() * 2 * ro;\n                const el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n                ops.push(...el.ops);\n            }\n        }\n        return { type: 'fillSketch', ops };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}