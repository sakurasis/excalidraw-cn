{"ast":null,"code":"import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DotFiller {\n  constructor(helper) {\n    this.helper = helper;\n  }\n  fillPolygons(polygonList, o) {\n    o = Object.assign({}, o, {\n      hachureAngle: 0\n    });\n    const lines = polygonHachureLines(polygonList, o);\n    return this.dotsOnLines(lines, o);\n  }\n  dotsOnLines(lines, o) {\n    const ops = [];\n    let gap = o.hachureGap;\n    if (gap < 0) {\n      gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    let fweight = o.fillWeight;\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n    const ro = gap / 4;\n    for (const line of lines) {\n      const length = lineLength(line);\n      const dl = length / gap;\n      const count = Math.ceil(dl) - 1;\n      const offset = length - count * gap;\n      const x = (line[0][0] + line[1][0]) / 2 - gap / 4;\n      const minY = Math.min(line[0][1], line[1][1]);\n      for (let i = 0; i < count; i++) {\n        const y = minY + offset + i * gap;\n        const cx = x - ro + Math.random() * 2 * ro;\n        const cy = y - ro + Math.random() * 2 * ro;\n        const el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n        ops.push(...el.ops);\n      }\n    }\n    return {\n      type: 'fillSketch',\n      ops\n    };\n  }\n}","map":{"version":3,"names":["lineLength","polygonHachureLines","DotFiller","constructor","helper","fillPolygons","polygonList","o","Object","assign","hachureAngle","lines","dotsOnLines","ops","gap","hachureGap","strokeWidth","Math","max","fweight","fillWeight","ro","line","length","dl","count","ceil","offset","x","minY","min","i","y","cx","random","cy","el","ellipse","push","type"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/dot-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DotFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        o = Object.assign({}, o, { hachureAngle: 0 });\n        const lines = polygonHachureLines(polygonList, o);\n        return this.dotsOnLines(lines, o);\n    }\n    dotsOnLines(lines, o) {\n        const ops = [];\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const ro = gap / 4;\n        for (const line of lines) {\n            const length = lineLength(line);\n            const dl = length / gap;\n            const count = Math.ceil(dl) - 1;\n            const offset = length - (count * gap);\n            const x = ((line[0][0] + line[1][0]) / 2) - (gap / 4);\n            const minY = Math.min(line[0][1], line[1][1]);\n            for (let i = 0; i < count; i++) {\n                const y = minY + offset + (i * gap);\n                const cx = (x - ro) + Math.random() * 2 * ro;\n                const cy = (y - ro) + Math.random() * 2 * ro;\n                const el = this.helper.ellipse(cx, cy, fweight, fweight, o);\n                ops.push(...el.ops);\n            }\n        }\n        return { type: 'fillSketch', ops };\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,OAAO,MAAMC,SAAS,CAAC;EACnBC,WAAWA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACxB;EACAC,YAAYA,CAACC,WAAW,EAAEC,CAAC,EAAE;IACzBA,CAAC,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,CAAC,EAAE;MAAEG,YAAY,EAAE;IAAE,CAAC,CAAC;IAC7C,MAAMC,KAAK,GAAGV,mBAAmB,CAACK,WAAW,EAAEC,CAAC,CAAC;IACjD,OAAO,IAAI,CAACK,WAAW,CAACD,KAAK,EAAEJ,CAAC,CAAC;EACrC;EACAK,WAAWA,CAACD,KAAK,EAAEJ,CAAC,EAAE;IAClB,MAAMM,GAAG,GAAG,EAAE;IACd,IAAIC,GAAG,GAAGP,CAAC,CAACQ,UAAU;IACtB,IAAID,GAAG,GAAG,CAAC,EAAE;MACTA,GAAG,GAAGP,CAAC,CAACS,WAAW,GAAG,CAAC;IAC3B;IACAF,GAAG,GAAGG,IAAI,CAACC,GAAG,CAACJ,GAAG,EAAE,GAAG,CAAC;IACxB,IAAIK,OAAO,GAAGZ,CAAC,CAACa,UAAU;IAC1B,IAAID,OAAO,GAAG,CAAC,EAAE;MACbA,OAAO,GAAGZ,CAAC,CAACS,WAAW,GAAG,CAAC;IAC/B;IACA,MAAMK,EAAE,GAAGP,GAAG,GAAG,CAAC;IAClB,KAAK,MAAMQ,IAAI,IAAIX,KAAK,EAAE;MACtB,MAAMY,MAAM,GAAGvB,UAAU,CAACsB,IAAI,CAAC;MAC/B,MAAME,EAAE,GAAGD,MAAM,GAAGT,GAAG;MACvB,MAAMW,KAAK,GAAGR,IAAI,CAACS,IAAI,CAACF,EAAE,CAAC,GAAG,CAAC;MAC/B,MAAMG,MAAM,GAAGJ,MAAM,GAAIE,KAAK,GAAGX,GAAI;MACrC,MAAMc,CAAC,GAAI,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAKR,GAAG,GAAG,CAAE;MACrD,MAAMe,IAAI,GAAGZ,IAAI,CAACa,GAAG,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7C,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,EAAEM,CAAC,EAAE,EAAE;QAC5B,MAAMC,CAAC,GAAGH,IAAI,GAAGF,MAAM,GAAII,CAAC,GAAGjB,GAAI;QACnC,MAAMmB,EAAE,GAAIL,CAAC,GAAGP,EAAE,GAAIJ,IAAI,CAACiB,MAAM,EAAE,GAAG,CAAC,GAAGb,EAAE;QAC5C,MAAMc,EAAE,GAAIH,CAAC,GAAGX,EAAE,GAAIJ,IAAI,CAACiB,MAAM,EAAE,GAAG,CAAC,GAAGb,EAAE;QAC5C,MAAMe,EAAE,GAAG,IAAI,CAAChC,MAAM,CAACiC,OAAO,CAACJ,EAAE,EAAEE,EAAE,EAAEhB,OAAO,EAAEA,OAAO,EAAEZ,CAAC,CAAC;QAC3DM,GAAG,CAACyB,IAAI,CAAC,GAAGF,EAAE,CAACvB,GAAG,CAAC;MACvB;IACJ;IACA,OAAO;MAAE0B,IAAI,EAAE,YAAY;MAAE1B;IAAI,CAAC;EACtC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}