{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  Breadcrumbs.prototype.setupOnce = function () {\n    var _this = this;\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._consoleBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'console'\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._domBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'dom'\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._xhrBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'xhr'\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._fetchBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'fetch'\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: function callback() {\n          var args = [];\n          for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n          }\n          _this._historyBreadcrumb.apply(_this, __spread(args));\n        },\n        type: 'history'\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._consoleBreadcrumb = function (handlerData) {\n    var breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' ')\n    };\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._domBreadcrumb = function (handlerData) {\n    var target;\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target) : htmlTreeAsString(handlerData.event);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  };\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._xhrBreadcrumb = function (handlerData) {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n      var _a = handlerData.xhr.__sentry_xhr__ || {},\n        method = _a.method,\n        url = _a.url,\n        status_code = _a.status_code,\n        body = _a.body;\n      getCurrentHub().addBreadcrumb({\n        category: 'xhr',\n        data: {\n          method: method,\n          url: url,\n          status_code: status_code\n        },\n        type: 'http'\n      }, {\n        xhr: handlerData.xhr,\n        input: body\n      });\n      return;\n    }\n  };\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._fetchBreadcrumb = function (handlerData) {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http'\n      }, {\n        data: handlerData.error,\n        input: handlerData.args\n      });\n    } else {\n      getCurrentHub().addBreadcrumb({\n        category: 'fetch',\n        data: __assign(__assign({}, handlerData.fetchData), {\n          status_code: handlerData.response.status\n        }),\n        type: 'http'\n      }, {\n        input: handlerData.args,\n        response: handlerData.response\n      });\n    }\n  };\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Breadcrumbs.prototype._historyBreadcrumb = function (handlerData) {\n    var global = getGlobalObject();\n    var from = handlerData.from;\n    var to = handlerData.to;\n    var parsedLoc = parseUrl(global.location.href);\n    var parsedFrom = parseUrl(from);\n    var parsedTo = parseUrl(to);\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from: from,\n        to: to\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\nexport { Breadcrumbs };","map":{"version":3,"names":["getCurrentHub","Severity","addInstrumentationHandler","getEventDescription","getGlobalObject","htmlTreeAsString","parseUrl","safeJoin","Breadcrumbs","options","name","id","_options","__assign","console","dom","fetch","history","sentry","xhr","prototype","addSentryBreadcrumb","event","addBreadcrumb","category","type","event_id","level","message","setupOnce","_this","callback","args","_i","arguments","length","_consoleBreadcrumb","apply","__spread","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","handlerData","breadcrumb","data","logger","fromString","slice","input","target","e","global","endTimestamp","__sentry_own_request__","_a","__sentry_xhr__","method","url","status_code","body","fetchData","match","error","Error","response","status","from","to","parsedLoc","location","href","parsedFrom","parsedTo","path","protocol","host","relative"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\browser\\src\\integrations\\breadcrumbs.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean;\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._consoleBreadcrumb(...args);\n        },\n        type: 'console',\n      });\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._domBreadcrumb(...args);\n        },\n        type: 'dom',\n      });\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._xhrBreadcrumb(...args);\n        },\n        type: 'xhr',\n      });\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._fetchBreadcrumb(...args);\n        },\n        type: 'fetch',\n      });\n    }\n    if (this._options.history) {\n      addInstrumentationHandler({\n        callback: (...args) => {\n          this._historyBreadcrumb(...args);\n        },\n        type: 'history',\n      });\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from console API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: Severity.fromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    getCurrentHub().addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  }\n\n  /**\n   * Creates breadcrumbs from DOM API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _domBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node)\n        : htmlTreeAsString((handlerData.event as unknown) as Node);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  /**\n   * Creates breadcrumbs from XHR API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n    if (handlerData.endTimestamp) {\n      // We only capture complete, non-sentry requests\n      if (handlerData.xhr.__sentry_own_request__) {\n        return;\n      }\n\n      const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'xhr',\n          data: {\n            method,\n            url,\n            status_code,\n          },\n          type: 'http',\n        },\n        {\n          xhr: handlerData.xhr,\n          input: body,\n        },\n      );\n\n      return;\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from fetch API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n    // We only capture complete fetch requests\n    if (!handlerData.endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: handlerData.fetchData,\n          level: Severity.Error,\n          type: 'http',\n        },\n        {\n          data: handlerData.error,\n          input: handlerData.args,\n        },\n      );\n    } else {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: 'fetch',\n          data: {\n            ...handlerData.fetchData,\n            status_code: handlerData.response.status,\n          },\n          type: 'http',\n        },\n        {\n          input: handlerData.args,\n          response: handlerData.response,\n        },\n      );\n    }\n  }\n\n  /**\n   * Creates breadcrumbs from history API calls\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n    const global = getGlobalObject<Window>();\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(global.location.href);\n    let parsedFrom = parseUrl(from);\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    getCurrentHub().addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}