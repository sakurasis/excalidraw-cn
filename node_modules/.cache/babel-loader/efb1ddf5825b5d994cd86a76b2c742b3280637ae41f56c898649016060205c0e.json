{"ast":null,"code":"import React from \"react\";\nexport const SidebarPropsContext = /*#__PURE__*/React.createContext({});","map":{"version":3,"names":["React","SidebarPropsContext","createContext"],"sources":["D:/project/excalidraw-cn/src/components/Sidebar/common.ts"],"sourcesContent":["import React from \"react\";\nimport { AppState, SidebarName, SidebarTabName } from \"../../types\";\n\nexport type SidebarTriggerProps = {\n  name: SidebarName;\n  tab?: SidebarTabName;\n  icon?: JSX.Element;\n  children?: React.ReactNode;\n  title?: string;\n  className?: string;\n  onToggle?: (open: boolean) => void;\n  style?: React.CSSProperties;\n};\n\nexport type SidebarProps<P = {}> = {\n  name: SidebarName;\n  children: React.ReactNode;\n  /**\n   * Called on sidebar open/close or tab change.\n   */\n  onStateChange?: (state: AppState[\"openSidebar\"]) => void;\n  /**\n   * supply alongside `docked` prop in order to make the Sidebar user-dockable\n   */\n  onDock?: (docked: boolean) => void;\n  docked?: boolean;\n  className?: string;\n  // NOTE sidebars we use internally inside the editor must have this flag set.\n  // It indicates that this sidebar should have lower precedence over host\n  // sidebars, if both are open.\n  /** @private internal */\n  __fallback?: boolean;\n} & P;\n\nexport type SidebarPropsContextValue = Pick<\n  SidebarProps,\n  \"onDock\" | \"docked\"\n> & { onCloseRequest: () => void; shouldRenderDockButton: boolean };\n\nexport const SidebarPropsContext =\n  React.createContext<SidebarPropsContextValue>({} as SidebarPropsContextValue);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAuCzB,OAAO,MAAMC,mBAAmB,gBAC9BD,KAAK,CAACE,aAAa,CAA2B,CAAC,CAAC,CAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}