{"ast":null,"code":"import * as GA from \"./ga\";\n/**\n * A line is stored as an array `[0, c, a, b, 0, 0, 0, 0]` representing:\n *   c * e0 + a * e1 + b*e2\n *\n * This maps to a standard formula `a * x + b * y + c`.\n *\n * `(-b, a)` corresponds to a 2D vector parallel to the line. The lines\n * have a natural orientation, corresponding to that vector.\n *\n * The magnitude (\"norm\") of the line is `sqrt(a ^ 2 + b ^ 2)`.\n * `c / norm(line)` is the oriented distance from line to origin.\n */ // Returns line with direction (x, y) through origin\nexport const vector = (x, y) => GA.normalized([0, 0, -y, x, 0, 0, 0, 0]);\n\n// For equation ax + by + c = 0.\nexport const equation = (a, b, c) => GA.normalized([0, c, a, b, 0, 0, 0, 0]);\nexport const through = (from, to) => GA.normalized(GA.join(to, from));\nexport const orthogonal = (line, point) => GA.dot(line, point);\n\n// Returns a line perpendicular to the line through `against` and `intersection`\n// going through `intersection`.\nexport const orthogonalThrough = (against, intersection) => orthogonal(through(against, intersection), intersection);\nexport const parallel = (line, distance) => {\n  const result = line.slice();\n  result[1] -= distance;\n  return result;\n};\nexport const parallelThrough = (line, point) => orthogonal(orthogonal(point, line), point);\nexport const distance = (line1, line2) => GA.inorm(GA.meet(line1, line2));\nexport const angle = (line1, line2) => Math.acos(GA.dot(line1, line2)[0]);\n\n// The orientation of the line\nexport const sign = line => Math.sign(line[1]);","map":{"version":3,"names":["GA","vector","x","y","normalized","equation","a","b","c","through","from","to","join","orthogonal","line","point","dot","orthogonalThrough","against","intersection","parallel","distance","result","slice","parallelThrough","line1","line2","inorm","meet","angle","Math","acos","sign"],"sources":["D:/project/excalidraw-cn/src/galines.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Point } from \"./ga\";\n\n/**\n * A line is stored as an array `[0, c, a, b, 0, 0, 0, 0]` representing:\n *   c * e0 + a * e1 + b*e2\n *\n * This maps to a standard formula `a * x + b * y + c`.\n *\n * `(-b, a)` corresponds to a 2D vector parallel to the line. The lines\n * have a natural orientation, corresponding to that vector.\n *\n * The magnitude (\"norm\") of the line is `sqrt(a ^ 2 + b ^ 2)`.\n * `c / norm(line)` is the oriented distance from line to origin.\n */\n\n// Returns line with direction (x, y) through origin\nexport const vector = (x: number, y: number): Line =>\n  GA.normalized([0, 0, -y, x, 0, 0, 0, 0]);\n\n// For equation ax + by + c = 0.\nexport const equation = (a: number, b: number, c: number): Line =>\n  GA.normalized([0, c, a, b, 0, 0, 0, 0]);\n\nexport const through = (from: Point, to: Point): Line =>\n  GA.normalized(GA.join(to, from));\n\nexport const orthogonal = (line: Line, point: Point): Line =>\n  GA.dot(line, point);\n\n// Returns a line perpendicular to the line through `against` and `intersection`\n// going through `intersection`.\nexport const orthogonalThrough = (against: Point, intersection: Point): Line =>\n  orthogonal(through(against, intersection), intersection);\n\nexport const parallel = (line: Line, distance: number): Line => {\n  const result = line.slice();\n  result[1] -= distance;\n  return result as unknown as Line;\n};\n\nexport const parallelThrough = (line: Line, point: Point): Line =>\n  orthogonal(orthogonal(point, line), point);\n\nexport const distance = (line1: Line, line2: Line): number =>\n  GA.inorm(GA.meet(line1, line2));\n\nexport const angle = (line1: Line, line2: Line): number =>\n  Math.acos(GA.dot(line1, line2)[0]);\n\n// The orientation of the line\nexport const sign = (line: Line): number => Math.sign(line[1]);\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,MAAM;AAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXA,CAaA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,CAAS,EAAEC,CAAS,KACzCH,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAACD,CAAC,EAAED,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMG,QAAQ,GAAGA,CAACC,CAAS,EAAEC,CAAS,EAAEC,CAAS,KACtDR,EAAE,CAACI,UAAU,CAAC,CAAC,CAAC,EAAEI,CAAC,EAAEF,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAEzC,OAAO,MAAME,OAAO,GAAGA,CAACC,IAAW,EAAEC,EAAS,KAC5CX,EAAE,CAACI,UAAU,CAACJ,EAAE,CAACY,IAAI,CAACD,EAAE,EAAED,IAAI,CAAC,CAAC;AAElC,OAAO,MAAMG,UAAU,GAAGA,CAACC,IAAU,EAAEC,KAAY,KACjDf,EAAE,CAACgB,GAAG,CAACF,IAAI,EAAEC,KAAK,CAAC;;AAErB;AACA;AACA,OAAO,MAAME,iBAAiB,GAAGA,CAACC,OAAc,EAAEC,YAAmB,KACnEN,UAAU,CAACJ,OAAO,CAACS,OAAO,EAAEC,YAAY,CAAC,EAAEA,YAAY,CAAC;AAE1D,OAAO,MAAMC,QAAQ,GAAGA,CAACN,IAAU,EAAEO,QAAgB,KAAW;EAC9D,MAAMC,MAAM,GAAGR,IAAI,CAACS,KAAK,EAAE;EAC3BD,MAAM,CAAC,CAAC,CAAC,IAAID,QAAQ;EACrB,OAAOC,MAAM;AACf,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACV,IAAU,EAAEC,KAAY,KACtDF,UAAU,CAACA,UAAU,CAACE,KAAK,EAAED,IAAI,CAAC,EAAEC,KAAK,CAAC;AAE5C,OAAO,MAAMM,QAAQ,GAAGA,CAACI,KAAW,EAAEC,KAAW,KAC/C1B,EAAE,CAAC2B,KAAK,CAAC3B,EAAE,CAAC4B,IAAI,CAACH,KAAK,EAAEC,KAAK,CAAC,CAAC;AAEjC,OAAO,MAAMG,KAAK,GAAGA,CAACJ,KAAW,EAAEC,KAAW,KAC5CI,IAAI,CAACC,IAAI,CAAC/B,EAAE,CAACgB,GAAG,CAACS,KAAK,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMM,IAAI,GAAIlB,IAAU,IAAagB,IAAI,CAACE,IAAI,CAAClB,IAAI,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}