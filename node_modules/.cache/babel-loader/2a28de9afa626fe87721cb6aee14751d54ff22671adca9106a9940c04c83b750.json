{"ast":null,"code":"import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{invalidateShapeForElement}from\"../renderer/renderElement\";import Scene from\"../scene/Scene\";import{getSizeFromPoints}from\"../points\";import{randomInteger}from\"../random\";import{getUpdatedTimestamp}from\"../utils\";// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport var mutateElement=function mutateElement(element,updates){var informMutation=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var didChange=false;// casting to any because can't use `in` operator\n// (see https://github.com/microsoft/TypeScript/issues/21732)\nvar _ref=updates,points=_ref.points,fileId=_ref.fileId;if(typeof points!==\"undefined\"){updates=_objectSpread(_objectSpread({},getSizeFromPoints(points)),updates);}for(var key in updates){var value=updates[key];if(typeof value!==\"undefined\"){if(element[key]===value&&(// if object, always update because its attrs could have changed\n// (except for specific keys we handle below)\ntypeof value!==\"object\"||value===null||key===\"groupIds\"||key===\"scale\")){continue;}if(key===\"scale\"){var prevScale=element[key];var nextScale=value;if(prevScale[0]===nextScale[0]&&prevScale[1]===nextScale[1]){continue;}}else if(key===\"points\"){var prevPoints=element[key];var nextPoints=value;if(prevPoints.length===nextPoints.length){var didChangePoints=false;var index=prevPoints.length;while(--index){var prevPoint=prevPoints[index];var nextPoint=nextPoints[index];if(prevPoint[0]!==nextPoint[0]||prevPoint[1]!==nextPoint[1]){didChangePoints=true;break;}}if(!didChangePoints){continue;}}}element[key]=value;didChange=true;}}if(!didChange){return element;}if(typeof updates.height!==\"undefined\"||typeof updates.width!==\"undefined\"||typeof fileId!=\"undefined\"||typeof points!==\"undefined\"){invalidateShapeForElement(element);}element.version++;element.versionNonce=randomInteger();element.updated=getUpdatedTimestamp();if(informMutation){var _Scene$getScene;(_Scene$getScene=Scene.getScene(element))===null||_Scene$getScene===void 0?void 0:_Scene$getScene.informMutation();}return element;};export var newElementWith=function newElementWith(element,updates){var didChange=false;for(var key in updates){var value=updates[key];if(typeof value!==\"undefined\"){if(element[key]===value&&(// if object, always update because its attrs could have changed\ntypeof value!==\"object\"||value===null)){continue;}didChange=true;}}if(!didChange){return element;}return _objectSpread(_objectSpread(_objectSpread({},element),updates),{},{updated:getUpdatedTimestamp(),version:element.version+1,versionNonce:randomInteger()});};/**\n * Mutates element, bumping `version`, `versionNonce`, and `updated`.\n *\n * NOTE: does not trigger re-render.\n */export var bumpVersion=function bumpVersion(element,version){element.version=(version!==null&&version!==void 0?version:element.version)+1;element.versionNonce=randomInteger();element.updated=getUpdatedTimestamp();return element;};","map":{"version":3,"names":["invalidateShapeForElement","Scene","getSizeFromPoints","randomInteger","getUpdatedTimestamp","mutateElement","element","updates","informMutation","arguments","length","undefined","didChange","_ref","points","fileId","_objectSpread","key","value","prevScale","nextScale","prevPoints","nextPoints","didChangePoints","index","prevPoint","nextPoint","height","width","version","versionNonce","updated","_Scene$getScene","getScene","newElementWith","bumpVersion"],"sources":["D:/project/excalidraw-cn/src/element/mutateElement.ts"],"sourcesContent":["import { ExcalidrawElement } from \"./types\";\nimport { invalidateShapeForElement } from \"../renderer/renderElement\";\nimport Scene from \"../scene/Scene\";\nimport { getSizeFromPoints } from \"../points\";\nimport { randomInteger } from \"../random\";\nimport { Point } from \"../types\";\nimport { getUpdatedTimestamp } from \"../utils\";\nimport { Mutable } from \"../utility-types\";\n\ntype ElementUpdate<TElement extends ExcalidrawElement> = Omit<\n  Partial<TElement>,\n  \"id\" | \"version\" | \"versionNonce\"\n>;\n\n// This function tracks updates of text elements for the purposes for collaboration.\n// The version is used to compare updates when more than one user is working in\n// the same drawing. Note: this will trigger the component to update. Make sure you\n// are calling it either from a React event handler or within unstable_batchedUpdates().\nexport const mutateElement = <TElement extends Mutable<ExcalidrawElement>>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n  informMutation = true,\n): TElement => {\n  let didChange = false;\n\n  // casting to any because can't use `in` operator\n  // (see https://github.com/microsoft/TypeScript/issues/21732)\n  const { points, fileId } = updates as any;\n\n  if (typeof points !== \"undefined\") {\n    updates = { ...getSizeFromPoints(points), ...updates };\n  }\n\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update because its attrs could have changed\n        // (except for specific keys we handle below)\n        (typeof value !== \"object\" ||\n          value === null ||\n          key === \"groupIds\" ||\n          key === \"scale\")\n      ) {\n        continue;\n      }\n\n      if (key === \"scale\") {\n        const prevScale = (element as any)[key];\n        const nextScale = value;\n        if (prevScale[0] === nextScale[0] && prevScale[1] === nextScale[1]) {\n          continue;\n        }\n      } else if (key === \"points\") {\n        const prevPoints = (element as any)[key];\n        const nextPoints = value;\n        if (prevPoints.length === nextPoints.length) {\n          let didChangePoints = false;\n          let index = prevPoints.length;\n          while (--index) {\n            const prevPoint: Point = prevPoints[index];\n            const nextPoint: Point = nextPoints[index];\n            if (\n              prevPoint[0] !== nextPoint[0] ||\n              prevPoint[1] !== nextPoint[1]\n            ) {\n              didChangePoints = true;\n              break;\n            }\n          }\n          if (!didChangePoints) {\n            continue;\n          }\n        }\n      }\n\n      (element as any)[key] = value;\n      didChange = true;\n    }\n  }\n  if (!didChange) {\n    return element;\n  }\n\n  if (\n    typeof updates.height !== \"undefined\" ||\n    typeof updates.width !== \"undefined\" ||\n    typeof fileId != \"undefined\" ||\n    typeof points !== \"undefined\"\n  ) {\n    invalidateShapeForElement(element);\n  }\n\n  element.version++;\n  element.versionNonce = randomInteger();\n  element.updated = getUpdatedTimestamp();\n\n  if (informMutation) {\n    Scene.getScene(element)?.informMutation();\n  }\n\n  return element;\n};\n\nexport const newElementWith = <TElement extends ExcalidrawElement>(\n  element: TElement,\n  updates: ElementUpdate<TElement>,\n): TElement => {\n  let didChange = false;\n  for (const key in updates) {\n    const value = (updates as any)[key];\n    if (typeof value !== \"undefined\") {\n      if (\n        (element as any)[key] === value &&\n        // if object, always update because its attrs could have changed\n        (typeof value !== \"object\" || value === null)\n      ) {\n        continue;\n      }\n      didChange = true;\n    }\n  }\n\n  if (!didChange) {\n    return element;\n  }\n\n  return {\n    ...element,\n    ...updates,\n    updated: getUpdatedTimestamp(),\n    version: element.version + 1,\n    versionNonce: randomInteger(),\n  };\n};\n\n/**\n * Mutates element, bumping `version`, `versionNonce`, and `updated`.\n *\n * NOTE: does not trigger re-render.\n */\nexport const bumpVersion = (\n  element: Mutable<ExcalidrawElement>,\n  version?: ExcalidrawElement[\"version\"],\n) => {\n  element.version = (version ?? element.version) + 1;\n  element.versionNonce = randomInteger();\n  element.updated = getUpdatedTimestamp();\n  return element;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}