{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { RoughGenerator } from './generator';\nexport var RoughCanvas = /*#__PURE__*/function () {\n  function RoughCanvas(canvas, config) {\n    _classCallCheck(this, RoughCanvas);\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.gen = new RoughGenerator(config);\n  }\n  _createClass(RoughCanvas, [{\n    key: \"draw\",\n    value: function draw(drawable) {\n      var sets = drawable.sets || [];\n      var o = drawable.options || this.getDefaultOptions();\n      var ctx = this.ctx;\n      var precision = drawable.options.fixedDecimalPlaceDigits;\n      var _iterator = _createForOfIteratorHelper(sets),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var drawing = _step.value;\n          switch (drawing.type) {\n            case 'path':\n              ctx.save();\n              ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n              ctx.lineWidth = o.strokeWidth;\n              if (o.strokeLineDash) {\n                ctx.setLineDash(o.strokeLineDash);\n              }\n              if (o.strokeLineDashOffset) {\n                ctx.lineDashOffset = o.strokeLineDashOffset;\n              }\n              this._drawToContext(ctx, drawing, precision);\n              ctx.restore();\n              break;\n            case 'fillPath':\n              {\n                ctx.save();\n                ctx.fillStyle = o.fill || '';\n                var fillRule = drawable.shape === 'curve' || drawable.shape === 'polygon' || drawable.shape === 'path' ? 'evenodd' : 'nonzero';\n                this._drawToContext(ctx, drawing, precision, fillRule);\n                ctx.restore();\n                break;\n              }\n            case 'fillSketch':\n              this.fillSketch(ctx, drawing, o);\n              break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"fillSketch\",\n    value: function fillSketch(ctx, drawing, o) {\n      var fweight = o.fillWeight;\n      if (fweight < 0) {\n        fweight = o.strokeWidth / 2;\n      }\n      ctx.save();\n      if (o.fillLineDash) {\n        ctx.setLineDash(o.fillLineDash);\n      }\n      if (o.fillLineDashOffset) {\n        ctx.lineDashOffset = o.fillLineDashOffset;\n      }\n      ctx.strokeStyle = o.fill || '';\n      ctx.lineWidth = fweight;\n      this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n      ctx.restore();\n    }\n  }, {\n    key: \"_drawToContext\",\n    value: function _drawToContext(ctx, drawing, fixedDecimals) {\n      var rule = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'nonzero';\n      ctx.beginPath();\n      var _iterator2 = _createForOfIteratorHelper(drawing.ops),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          var data = typeof fixedDecimals === 'number' && fixedDecimals >= 0 ? item.data.map(function (d) {\n            return +d.toFixed(fixedDecimals);\n          }) : item.data;\n          switch (item.op) {\n            case 'move':\n              ctx.moveTo(data[0], data[1]);\n              break;\n            case 'bcurveTo':\n              ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n              break;\n            case 'lineTo':\n              ctx.lineTo(data[0], data[1]);\n              break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (drawing.type === 'fillPath') {\n        ctx.fill(rule);\n      } else {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"generator\",\n    get: function get() {\n      return this.gen;\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return this.gen.defaultOptions;\n    }\n  }, {\n    key: \"line\",\n    value: function line(x1, y1, x2, y2, options) {\n      var d = this.gen.line(x1, y1, x2, y2, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"rectangle\",\n    value: function rectangle(x, y, width, height, options) {\n      var d = this.gen.rectangle(x, y, width, height, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"ellipse\",\n    value: function ellipse(x, y, width, height, options) {\n      var d = this.gen.ellipse(x, y, width, height, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(x, y, diameter, options) {\n      var d = this.gen.circle(x, y, diameter, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"linearPath\",\n    value: function linearPath(points, options) {\n      var d = this.gen.linearPath(points, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(points, options) {\n      var d = this.gen.polygon(points, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(x, y, width, height, start, stop) {\n      var closed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var options = arguments.length > 7 ? arguments[7] : undefined;\n      var d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(points, options) {\n      var d = this.gen.curve(points, options);\n      this.draw(d);\n      return d;\n    }\n  }, {\n    key: \"path\",\n    value: function path(d, options) {\n      var drawing = this.gen.path(d, options);\n      this.draw(drawing);\n      return drawing;\n    }\n  }]);\n  return RoughCanvas;\n}();","map":{"version":3,"names":["RoughGenerator","RoughCanvas","canvas","config","_classCallCheck","ctx","getContext","gen","_createClass","key","value","draw","drawable","sets","o","options","getDefaultOptions","precision","fixedDecimalPlaceDigits","_iterator","_createForOfIteratorHelper","_step","s","n","done","drawing","type","save","strokeStyle","stroke","lineWidth","strokeWidth","strokeLineDash","setLineDash","strokeLineDashOffset","lineDashOffset","_drawToContext","restore","fillStyle","fill","fillRule","shape","fillSketch","err","e","f","fweight","fillWeight","fillLineDash","fillLineDashOffset","fixedDecimals","rule","arguments","length","undefined","beginPath","_iterator2","ops","_step2","item","data","map","d","toFixed","op","moveTo","bezierCurveTo","lineTo","get","defaultOptions","line","x1","y1","x2","y2","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","curve","path"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/canvas.js"],"sourcesContent":["import { RoughGenerator } from './generator';\nexport class RoughCanvas {\n    constructor(canvas, config) {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext('2d');\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const ctx = this.ctx;\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            switch (drawing.type) {\n                case 'path':\n                    ctx.save();\n                    ctx.strokeStyle = o.stroke === 'none' ? 'transparent' : o.stroke;\n                    ctx.lineWidth = o.strokeWidth;\n                    if (o.strokeLineDash) {\n                        ctx.setLineDash(o.strokeLineDash);\n                    }\n                    if (o.strokeLineDashOffset) {\n                        ctx.lineDashOffset = o.strokeLineDashOffset;\n                    }\n                    this._drawToContext(ctx, drawing, precision);\n                    ctx.restore();\n                    break;\n                case 'fillPath': {\n                    ctx.save();\n                    ctx.fillStyle = o.fill || '';\n                    const fillRule = (drawable.shape === 'curve' || drawable.shape === 'polygon' || drawable.shape === 'path') ? 'evenodd' : 'nonzero';\n                    this._drawToContext(ctx, drawing, precision, fillRule);\n                    ctx.restore();\n                    break;\n                }\n                case 'fillSketch':\n                    this.fillSketch(ctx, drawing, o);\n                    break;\n            }\n        }\n    }\n    fillSketch(ctx, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        ctx.save();\n        if (o.fillLineDash) {\n            ctx.setLineDash(o.fillLineDash);\n        }\n        if (o.fillLineDashOffset) {\n            ctx.lineDashOffset = o.fillLineDashOffset;\n        }\n        ctx.strokeStyle = o.fill || '';\n        ctx.lineWidth = fweight;\n        this._drawToContext(ctx, drawing, o.fixedDecimalPlaceDigits);\n        ctx.restore();\n    }\n    _drawToContext(ctx, drawing, fixedDecimals, rule = 'nonzero') {\n        ctx.beginPath();\n        for (const item of drawing.ops) {\n            const data = ((typeof fixedDecimals === 'number') && fixedDecimals >= 0) ? (item.data.map((d) => +d.toFixed(fixedDecimals))) : item.data;\n            switch (item.op) {\n                case 'move':\n                    ctx.moveTo(data[0], data[1]);\n                    break;\n                case 'bcurveTo':\n                    ctx.bezierCurveTo(data[0], data[1], data[2], data[3], data[4], data[5]);\n                    break;\n                case 'lineTo':\n                    ctx.lineTo(data[0], data[1]);\n                    break;\n            }\n        }\n        if (drawing.type === 'fillPath') {\n            ctx.fill(rule);\n        }\n        else {\n            ctx.stroke();\n        }\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        this.draw(d);\n        return d;\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        this.draw(d);\n        return d;\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        this.draw(d);\n        return d;\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        this.draw(d);\n        return d;\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        this.draw(d);\n        return d;\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        this.draw(d);\n        return d;\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        this.draw(d);\n        return d;\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        this.draw(drawing);\n        return drawing;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}