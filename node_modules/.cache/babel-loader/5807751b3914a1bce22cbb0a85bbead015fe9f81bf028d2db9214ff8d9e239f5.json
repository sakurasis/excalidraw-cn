{"ast":null,"code":"import * as GA from \"./ga\";\nimport * as GALine from \"./galines\";\nimport { join } from \"./ga\";\nexport const from = _ref => {\n  let [x, y] = _ref;\n  return [0, 0, 0, 0, y, x, 1, 0];\n};\nexport const toTuple = point => [point[5], point[4]];\nexport const abs = point => [0, 0, 0, 0, Math.abs(point[4]), Math.abs(point[5]), 1, 0];\nexport const intersect = (line1, line2) => GA.normalized(GA.meet(line1, line2));\n\n// Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\nexport const project = (point, line) => intersect(GALine.orthogonal(line, point), line);\nexport const distance = (point1, point2) => GA.norm(join(point1, point2));\nexport const distanceToLine = (point, line) => GA.joinScalar(point, line);","map":{"version":3,"names":["GA","GALine","join","from","_ref","x","y","toTuple","point","abs","Math","intersect","line1","line2","normalized","meet","project","line","orthogonal","distance","point1","point2","norm","distanceToLine","joinScalar"],"sources":["D:/project/excalidraw-cn/src/gapoints.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport * as GALine from \"./galines\";\nimport { Point, Line, join } from \"./ga\";\n\nexport const from = ([x, y]: readonly [number, number]): Point => [\n  0,\n  0,\n  0,\n  0,\n  y,\n  x,\n  1,\n  0,\n];\n\nexport const toTuple = (point: Point): [number, number] => [point[5], point[4]];\n\nexport const abs = (point: Point): Point => [\n  0,\n  0,\n  0,\n  0,\n  Math.abs(point[4]),\n  Math.abs(point[5]),\n  1,\n  0,\n];\n\nexport const intersect = (line1: Line, line2: Line): Point =>\n  GA.normalized(GA.meet(line1, line2));\n\n// Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\nexport const project = (point: Point, line: Line): Point =>\n  intersect(GALine.orthogonal(line, point), line);\n\nexport const distance = (point1: Point, point2: Point): number =>\n  GA.norm(join(point1, point2));\n\nexport const distanceToLine = (point: Point, line: Line): number =>\n  GA.joinScalar(point, line);\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,MAAM;AAC1B,OAAO,KAAKC,MAAM,MAAM,WAAW;AACnC,SAAsBC,IAAI,QAAQ,MAAM;AAExC,OAAO,MAAMC,IAAI,GAAGC,IAAA;EAAA,IAAC,CAACC,CAAC,EAAEC,CAAC,CAA4B,GAAAF,IAAA;EAAA,OAAY,CAChE,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACDE,CAAC,EACDD,CAAC,EACD,CAAC,EACD,CAAC,CACF;AAAA;AAED,OAAO,MAAME,OAAO,GAAIC,KAAY,IAAuB,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;AAE/E,OAAO,MAAMC,GAAG,GAAID,KAAY,IAAY,CAC1C,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACDE,IAAI,CAACD,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAClBE,IAAI,CAACD,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,EAClB,CAAC,EACD,CAAC,CACF;AAED,OAAO,MAAMG,SAAS,GAAGA,CAACC,KAAW,EAAEC,KAAW,KAChDb,EAAE,CAACc,UAAU,CAACd,EAAE,CAACe,IAAI,CAACH,KAAK,EAAEC,KAAK,CAAC,CAAC;;AAEtC;AACA;AACA,OAAO,MAAMG,OAAO,GAAGA,CAACR,KAAY,EAAES,IAAU,KAC9CN,SAAS,CAACV,MAAM,CAACiB,UAAU,CAACD,IAAI,EAAET,KAAK,CAAC,EAAES,IAAI,CAAC;AAEjD,OAAO,MAAME,QAAQ,GAAGA,CAACC,MAAa,EAAEC,MAAa,KACnDrB,EAAE,CAACsB,IAAI,CAACpB,IAAI,CAACkB,MAAM,EAAEC,MAAM,CAAC,CAAC;AAE/B,OAAO,MAAME,cAAc,GAAGA,CAACf,KAAY,EAAES,IAAU,KACrDjB,EAAE,CAACwB,UAAU,CAAChB,KAAK,EAAES,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}