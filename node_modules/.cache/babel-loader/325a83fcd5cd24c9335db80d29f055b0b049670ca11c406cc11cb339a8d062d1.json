{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\actions\\\\actionCanvas.tsx\";\nimport { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport { ZoomInIcon, ZoomOutIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { CURSOR_TYPE, MIN_ZOOM, THEME, ZOOM_STEP } from \"../constants\";\nimport { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getNormalizedZoom } from \"../scene\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { getStateForZoom } from \"../scene/zoom\";\nimport { getShortcutKey, setCursor, updateActiveTool } from \"../utils\";\nimport { register } from \"./register\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { getDefaultAppState, isEraserActive, isHandToolActive } from \"../appState\";\nimport { DEFAULT_CANVAS_BACKGROUND_PICKS } from \"../colors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const actionChangeViewBackgroundColor = register({\n  name: \"changeViewBackgroundColor\",\n  trackEvent: false,\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.changeViewBackgroundColor && !appState.viewModeEnabled;\n  },\n  perform: (_, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        ...value\n      },\n      commitToHistory: !!value.viewBackgroundColor\n    };\n  },\n  PanelComponent: _ref => {\n    let {\n      elements,\n      appState,\n      updateData,\n      appProps\n    } = _ref;\n    // FIXME move me to src/components/mainMenu/DefaultItems.tsx\n    return /*#__PURE__*/_jsxDEV(ColorPicker, {\n      palette: null,\n      topPicks: DEFAULT_CANVAS_BACKGROUND_PICKS,\n      label: t(\"labels.canvasBackground\"),\n      type: \"canvasBackground\",\n      color: appState.viewBackgroundColor,\n      onChange: color => updateData({\n        viewBackgroundColor: color\n      }),\n      \"data-testid\": \"canvas-background-picker\",\n      elements: elements,\n      appState: appState,\n      updateData: updateData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionClearCanvas = register({\n  name: \"clearCanvas\",\n  trackEvent: {\n    category: \"canvas\"\n  },\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.clearCanvas && !appState.viewModeEnabled;\n  },\n  perform: (elements, appState, _, app) => {\n    app.imageCache.clear();\n    return {\n      elements: elements.map(element => newElementWith(element, {\n        isDeleted: true\n      })),\n      appState: {\n        ...getDefaultAppState(),\n        files: {},\n        theme: appState.theme,\n        penMode: appState.penMode,\n        penDetected: appState.penDetected,\n        exportBackground: appState.exportBackground,\n        exportEmbedScene: appState.exportEmbedScene,\n        gridSize: appState.gridSize,\n        showStats: appState.showStats,\n        pasteDialog: appState.pasteDialog,\n        activeTool: appState.activeTool.type === \"image\" ? {\n          ...appState.activeTool,\n          type: \"selection\"\n        } : appState.activeTool\n      },\n      commitToHistory: true\n    };\n  }\n});\nexport const actionZoomIn = register({\n  name: \"zoomIn\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom({\n          viewportX: appState.width / 2 + appState.offsetLeft,\n          viewportY: appState.height / 2 + appState.offsetTop,\n          nextZoom: getNormalizedZoom(appState.zoom.value + ZOOM_STEP)\n        }, appState)\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref2 => {\n    let {\n      updateData\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      className: \"zoom-in-button zoom-button\",\n      icon: ZoomInIcon,\n      title: `${t(\"buttons.zoomIn\")} — ${getShortcutKey(\"CtrlOrCmd++\")}`,\n      \"aria-label\": t(\"buttons.zoomIn\"),\n      onClick: () => {\n        updateData(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }, this);\n  },\n  keyTest: event => (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\nexport const actionZoomOut = register({\n  name: \"zoomOut\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom({\n          viewportX: appState.width / 2 + appState.offsetLeft,\n          viewportY: appState.height / 2 + appState.offsetTop,\n          nextZoom: getNormalizedZoom(appState.zoom.value - ZOOM_STEP)\n        }, appState)\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref3 => {\n    let {\n      updateData\n    } = _ref3;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      className: \"zoom-out-button zoom-button\",\n      icon: ZoomOutIcon,\n      title: `${t(\"buttons.zoomOut\")} — ${getShortcutKey(\"CtrlOrCmd+-\")}`,\n      \"aria-label\": t(\"buttons.zoomOut\"),\n      onClick: () => {\n        updateData(null);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }, this);\n  },\n  keyTest: event => (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\nexport const actionResetZoom = register({\n  name: \"resetZoom\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom({\n          viewportX: appState.width / 2 + appState.offsetLeft,\n          viewportY: appState.height / 2 + appState.offsetTop,\n          nextZoom: getNormalizedZoom(1)\n        }, appState)\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: _ref4 => {\n    let {\n      updateData,\n      appState\n    } = _ref4;\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: t(\"buttons.resetZoom\"),\n      style: {\n        height: \"100%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ToolButton, {\n        type: \"button\",\n        className: \"reset-zoom-button zoom-button\",\n        title: t(\"buttons.resetZoom\"),\n        \"aria-label\": t(\"buttons.resetZoom\"),\n        onClick: () => {\n          updateData(null);\n        },\n        children: [(appState.zoom.value * 100).toFixed(0), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 5\n    }, this);\n  },\n  keyTest: event => (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\nconst zoomValueToFitBoundsOnViewport = (bounds, viewportDimensions) => {\n  const [x1, y1, x2, y2] = bounds;\n  const commonBoundsWidth = x2 - x1;\n  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;\n  const commonBoundsHeight = y2 - y1;\n  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;\n  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);\n  const zoomAdjustedToSteps = Math.floor(smallestZoomValue / ZOOM_STEP) * ZOOM_STEP;\n  const clampedZoomValueToFitElements = Math.min(Math.max(zoomAdjustedToSteps, MIN_ZOOM), 1);\n  return clampedZoomValueToFitElements;\n};\nexport const zoomToFit = _ref5 => {\n  let {\n    targetElements,\n    appState,\n    fitToViewport = false,\n    viewportZoomFactor = 0.7\n  } = _ref5;\n  const commonBounds = getCommonBounds(getNonDeletedElements(targetElements));\n  const [x1, y1, x2, y2] = commonBounds;\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n  let newZoomValue;\n  let scrollX;\n  let scrollY;\n  if (fitToViewport) {\n    const commonBoundsWidth = x2 - x1;\n    const commonBoundsHeight = y2 - y1;\n    newZoomValue = Math.min(appState.width / commonBoundsWidth, appState.height / commonBoundsHeight) * Math.min(1, Math.max(viewportZoomFactor, 0.1));\n\n    // Apply clamping to newZoomValue to be between 10% and 3000%\n    newZoomValue = Math.min(Math.max(newZoomValue, 0.1), 30.0);\n    scrollX = appState.width / 2 * (1 / newZoomValue) - centerX;\n    scrollY = appState.height / 2 * (1 / newZoomValue) - centerY;\n  } else {\n    newZoomValue = zoomValueToFitBoundsOnViewport(commonBounds, {\n      width: appState.width,\n      height: appState.height\n    });\n    const centerScroll = centerScrollOn({\n      scenePoint: {\n        x: centerX,\n        y: centerY\n      },\n      viewportDimensions: {\n        width: appState.width,\n        height: appState.height\n      },\n      zoom: {\n        value: newZoomValue\n      }\n    });\n    scrollX = centerScroll.scrollX;\n    scrollY = centerScroll.scrollY;\n  }\n  return {\n    appState: {\n      ...appState,\n      scrollX,\n      scrollY,\n      zoom: {\n        value: newZoomValue\n      }\n    },\n    commitToHistory: false\n  };\n};\n\n// Note, this action differs from actionZoomToFitSelection in that it doesn't\n// zoom beyond 100%. In other words, if the content is smaller than viewport\n// size, it won't be zoomed in.\nexport const actionZoomToFitSelectionInViewport = register({\n  name: \"zoomToFitSelectionInViewport\",\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState,\n      fitToViewport: false\n    });\n  },\n  // NOTE shift-2 should have been assigned actionZoomToFitSelection.\n  // TBD on how proceed\n  keyTest: event => event.code === CODES.TWO && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]\n});\nexport const actionZoomToFitSelection = register({\n  name: \"zoomToFitSelection\",\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState,\n      fitToViewport: true\n    });\n  },\n  // NOTE this action should use shift-2 per figma, alas\n  keyTest: event => event.code === CODES.THREE && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]\n});\nexport const actionZoomToFit = register({\n  name: \"zoomToFit\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState) => zoomToFit({\n    targetElements: elements,\n    appState,\n    fitToViewport: false\n  }),\n  keyTest: event => event.code === CODES.ONE && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]\n});\nexport const actionToggleTheme = register({\n  name: \"toggleTheme\",\n  viewMode: true,\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (_, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        theme: value || (appState.theme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT)\n      },\n      commitToHistory: false\n    };\n  },\n  keyTest: event => event.altKey && event.shiftKey && event.code === CODES.D,\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.toggleTheme;\n  }\n});\nexport const actionToggleEraserTool = register({\n  name: \"toggleEraserTool\",\n  trackEvent: {\n    category: \"toolbar\"\n  },\n  perform: (elements, appState) => {\n    let activeTool;\n    if (isEraserActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\"\n        }),\n        lastActiveToolBeforeEraser: null\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"eraser\",\n        lastActiveToolBeforeEraser: appState.activeTool\n      });\n    }\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeTool\n      },\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.key === KEYS.E\n});\nexport const actionToggleHandTool = register({\n  name: \"toggleHandTool\",\n  trackEvent: {\n    category: \"toolbar\"\n  },\n  perform: (elements, appState, _, app) => {\n    let activeTool;\n    if (isHandToolActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\"\n        }),\n        lastActiveToolBeforeEraser: null\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"hand\",\n        lastActiveToolBeforeEraser: appState.activeTool\n      });\n      setCursor(app.canvas, CURSOR_TYPE.GRAB);\n    }\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeTool\n      },\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.key === KEYS.H\n});","map":{"version":3,"names":["ColorPicker","ZoomInIcon","ZoomOutIcon","ToolButton","CURSOR_TYPE","MIN_ZOOM","THEME","ZOOM_STEP","getCommonBounds","getNonDeletedElements","t","CODES","KEYS","getNormalizedZoom","centerScrollOn","getStateForZoom","getShortcutKey","setCursor","updateActiveTool","register","Tooltip","newElementWith","getDefaultAppState","isEraserActive","isHandToolActive","DEFAULT_CANVAS_BACKGROUND_PICKS","jsxDEV","_jsxDEV","actionChangeViewBackgroundColor","name","trackEvent","predicate","elements","appState","props","app","UIOptions","canvasActions","changeViewBackgroundColor","viewModeEnabled","perform","_","value","commitToHistory","viewBackgroundColor","PanelComponent","_ref","updateData","appProps","palette","topPicks","label","type","color","onChange","fileName","_jsxFileName","lineNumber","columnNumber","actionClearCanvas","category","clearCanvas","imageCache","clear","map","element","isDeleted","files","theme","penMode","penDetected","exportBackground","exportEmbedScene","gridSize","showStats","pasteDialog","activeTool","actionZoomIn","viewMode","_elements","viewportX","width","offsetLeft","viewportY","height","offsetTop","nextZoom","zoom","_ref2","className","icon","title","onClick","keyTest","event","code","EQUAL","NUM_ADD","CTRL_OR_CMD","shiftKey","actionZoomOut","_ref3","MINUS","NUM_SUBTRACT","actionResetZoom","_ref4","style","children","toFixed","ZERO","NUM_ZERO","zoomValueToFitBoundsOnViewport","bounds","viewportDimensions","x1","y1","x2","y2","commonBoundsWidth","zoomValueForWidth","commonBoundsHeight","zoomValueForHeight","smallestZoomValue","Math","min","zoomAdjustedToSteps","floor","clampedZoomValueToFitElements","max","zoomToFit","_ref5","targetElements","fitToViewport","viewportZoomFactor","commonBounds","centerX","centerY","newZoomValue","scrollX","scrollY","centerScroll","scenePoint","x","y","actionZoomToFitSelectionInViewport","selectedElements","scene","getSelectedElements","length","TWO","altKey","actionZoomToFitSelection","THREE","actionZoomToFit","ONE","actionToggleTheme","LIGHT","DARK","D","toggleTheme","actionToggleEraserTool","lastActiveTool","lastActiveToolBeforeEraser","selectedElementIds","selectedGroupIds","key","E","actionToggleHandTool","canvas","GRAB","H"],"sources":["D:/project/excalidraw-cn/src/actions/actionCanvas.tsx"],"sourcesContent":["import { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport { ZoomInIcon, ZoomOutIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { CURSOR_TYPE, MIN_ZOOM, THEME, ZOOM_STEP } from \"../constants\";\nimport { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getNormalizedZoom } from \"../scene\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { getStateForZoom } from \"../scene/zoom\";\nimport { AppState, NormalizedZoomValue } from \"../types\";\nimport { getShortcutKey, setCursor, updateActiveTool } from \"../utils\";\nimport { register } from \"./register\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport {\n  getDefaultAppState,\n  isEraserActive,\n  isHandToolActive,\n} from \"../appState\";\nimport { DEFAULT_CANVAS_BACKGROUND_PICKS } from \"../colors\";\nimport { Bounds } from \"../element/bounds\";\n\nexport const actionChangeViewBackgroundColor = register({\n  name: \"changeViewBackgroundColor\",\n  trackEvent: false,\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.changeViewBackgroundColor &&\n      !appState.viewModeEnabled\n    );\n  },\n  perform: (_, appState, value) => {\n    return {\n      appState: { ...appState, ...value },\n      commitToHistory: !!value.viewBackgroundColor,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => {\n    // FIXME move me to src/components/mainMenu/DefaultItems.tsx\n    return (\n      <ColorPicker\n        palette={null}\n        topPicks={DEFAULT_CANVAS_BACKGROUND_PICKS}\n        label={t(\"labels.canvasBackground\")}\n        type=\"canvasBackground\"\n        color={appState.viewBackgroundColor}\n        onChange={(color) => updateData({ viewBackgroundColor: color })}\n        data-testid=\"canvas-background-picker\"\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    );\n  },\n});\n\nexport const actionClearCanvas = register({\n  name: \"clearCanvas\",\n  trackEvent: { category: \"canvas\" },\n  predicate: (elements, appState, props, app) => {\n    return (\n      !!app.props.UIOptions.canvasActions.clearCanvas &&\n      !appState.viewModeEnabled\n    );\n  },\n  perform: (elements, appState, _, app) => {\n    app.imageCache.clear();\n    return {\n      elements: elements.map((element) =>\n        newElementWith(element, { isDeleted: true }),\n      ),\n      appState: {\n        ...getDefaultAppState(),\n        files: {},\n        theme: appState.theme,\n        penMode: appState.penMode,\n        penDetected: appState.penDetected,\n        exportBackground: appState.exportBackground,\n        exportEmbedScene: appState.exportEmbedScene,\n        gridSize: appState.gridSize,\n        showStats: appState.showStats,\n        pasteDialog: appState.pasteDialog,\n        activeTool:\n          appState.activeTool.type === \"image\"\n            ? { ...appState.activeTool, type: \"selection\" }\n            : appState.activeTool,\n      },\n      commitToHistory: true,\n    };\n  },\n});\n\nexport const actionZoomIn = register({\n  name: \"zoomIn\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(appState.zoom.value + ZOOM_STEP),\n          },\n          appState,\n        ),\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      className=\"zoom-in-button zoom-button\"\n      icon={ZoomInIcon}\n      title={`${t(\"buttons.zoomIn\")} — ${getShortcutKey(\"CtrlOrCmd++\")}`}\n      aria-label={t(\"buttons.zoomIn\")}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionZoomOut = register({\n  name: \"zoomOut\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(appState.zoom.value - ZOOM_STEP),\n          },\n          appState,\n        ),\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      className=\"zoom-out-button zoom-button\"\n      icon={ZoomOutIcon}\n      title={`${t(\"buttons.zoomOut\")} — ${getShortcutKey(\"CtrlOrCmd+-\")}`}\n      aria-label={t(\"buttons.zoomOut\")}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionResetZoom = register({\n  name: \"resetZoom\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_elements, appState, _, app) => {\n    return {\n      appState: {\n        ...appState,\n        ...getStateForZoom(\n          {\n            viewportX: appState.width / 2 + appState.offsetLeft,\n            viewportY: appState.height / 2 + appState.offsetTop,\n            nextZoom: getNormalizedZoom(1),\n          },\n          appState,\n        ),\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData, appState }) => (\n    <Tooltip label={t(\"buttons.resetZoom\")} style={{ height: \"100%\" }}>\n      <ToolButton\n        type=\"button\"\n        className=\"reset-zoom-button zoom-button\"\n        title={t(\"buttons.resetZoom\")}\n        aria-label={t(\"buttons.resetZoom\")}\n        onClick={() => {\n          updateData(null);\n        }}\n      >\n        {(appState.zoom.value * 100).toFixed(0)}%\n      </ToolButton>\n    </Tooltip>\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nconst zoomValueToFitBoundsOnViewport = (\n  bounds: Bounds,\n  viewportDimensions: { width: number; height: number },\n) => {\n  const [x1, y1, x2, y2] = bounds;\n  const commonBoundsWidth = x2 - x1;\n  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;\n  const commonBoundsHeight = y2 - y1;\n  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;\n  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);\n  const zoomAdjustedToSteps =\n    Math.floor(smallestZoomValue / ZOOM_STEP) * ZOOM_STEP;\n  const clampedZoomValueToFitElements = Math.min(\n    Math.max(zoomAdjustedToSteps, MIN_ZOOM),\n    1,\n  );\n  return clampedZoomValueToFitElements as NormalizedZoomValue;\n};\n\nexport const zoomToFit = ({\n  targetElements,\n  appState,\n  fitToViewport = false,\n  viewportZoomFactor = 0.7,\n}: {\n  targetElements: readonly ExcalidrawElement[];\n  appState: Readonly<AppState>;\n  /** whether to fit content to viewport (beyond >100%) */\n  fitToViewport: boolean;\n  /** zoom content to cover X of the viewport, when fitToViewport=true */\n  viewportZoomFactor?: number;\n}) => {\n  const commonBounds = getCommonBounds(getNonDeletedElements(targetElements));\n\n  const [x1, y1, x2, y2] = commonBounds;\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n\n  let newZoomValue;\n  let scrollX;\n  let scrollY;\n\n  if (fitToViewport) {\n    const commonBoundsWidth = x2 - x1;\n    const commonBoundsHeight = y2 - y1;\n\n    newZoomValue =\n      Math.min(\n        appState.width / commonBoundsWidth,\n        appState.height / commonBoundsHeight,\n      ) * Math.min(1, Math.max(viewportZoomFactor, 0.1));\n\n    // Apply clamping to newZoomValue to be between 10% and 3000%\n    newZoomValue = Math.min(\n      Math.max(newZoomValue, 0.1),\n      30.0,\n    ) as NormalizedZoomValue;\n\n    scrollX = (appState.width / 2) * (1 / newZoomValue) - centerX;\n    scrollY = (appState.height / 2) * (1 / newZoomValue) - centerY;\n  } else {\n    newZoomValue = zoomValueToFitBoundsOnViewport(commonBounds, {\n      width: appState.width,\n      height: appState.height,\n    });\n\n    const centerScroll = centerScrollOn({\n      scenePoint: { x: centerX, y: centerY },\n      viewportDimensions: {\n        width: appState.width,\n        height: appState.height,\n      },\n      zoom: { value: newZoomValue },\n    });\n\n    scrollX = centerScroll.scrollX;\n    scrollY = centerScroll.scrollY;\n  }\n\n  return {\n    appState: {\n      ...appState,\n      scrollX,\n      scrollY,\n      zoom: { value: newZoomValue },\n    },\n    commitToHistory: false,\n  };\n};\n\n// Note, this action differs from actionZoomToFitSelection in that it doesn't\n// zoom beyond 100%. In other words, if the content is smaller than viewport\n// size, it won't be zoomed in.\nexport const actionZoomToFitSelectionInViewport = register({\n  name: \"zoomToFitSelectionInViewport\",\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState,\n      fitToViewport: false,\n    });\n  },\n  // NOTE shift-2 should have been assigned actionZoomToFitSelection.\n  // TBD on how proceed\n  keyTest: (event) =>\n    event.code === CODES.TWO &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionZoomToFitSelection = register({\n  name: \"zoomToFitSelection\",\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements(appState);\n    return zoomToFit({\n      targetElements: selectedElements.length ? selectedElements : elements,\n      appState,\n      fitToViewport: true,\n    });\n  },\n  // NOTE this action should use shift-2 per figma, alas\n  keyTest: (event) =>\n    event.code === CODES.THREE &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionZoomToFit = register({\n  name: \"zoomToFit\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState) =>\n    zoomToFit({ targetElements: elements, appState, fitToViewport: false }),\n  keyTest: (event) =>\n    event.code === CODES.ONE &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionToggleTheme = register({\n  name: \"toggleTheme\",\n  viewMode: true,\n  trackEvent: { category: \"canvas\" },\n  perform: (_, appState, value) => {\n    return {\n      appState: {\n        ...appState,\n        theme:\n          value || (appState.theme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT),\n      },\n      commitToHistory: false,\n    };\n  },\n  keyTest: (event) => event.altKey && event.shiftKey && event.code === CODES.D,\n  predicate: (elements, appState, props, app) => {\n    return !!app.props.UIOptions.canvasActions.toggleTheme;\n  },\n});\n\nexport const actionToggleEraserTool = register({\n  name: \"toggleEraserTool\",\n  trackEvent: { category: \"toolbar\" },\n  perform: (elements, appState) => {\n    let activeTool: AppState[\"activeTool\"];\n\n    if (isEraserActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\",\n        }),\n        lastActiveToolBeforeEraser: null,\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"eraser\",\n        lastActiveToolBeforeEraser: appState.activeTool,\n      });\n    }\n\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeTool,\n      },\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) => event.key === KEYS.E,\n});\n\nexport const actionToggleHandTool = register({\n  name: \"toggleHandTool\",\n  trackEvent: { category: \"toolbar\" },\n  perform: (elements, appState, _, app) => {\n    let activeTool: AppState[\"activeTool\"];\n\n    if (isHandToolActive(appState)) {\n      activeTool = updateActiveTool(appState, {\n        ...(appState.activeTool.lastActiveTool || {\n          type: \"selection\",\n        }),\n        lastActiveToolBeforeEraser: null,\n      });\n    } else {\n      activeTool = updateActiveTool(appState, {\n        type: \"hand\",\n        lastActiveToolBeforeEraser: appState.activeTool,\n      });\n      setCursor(app.canvas, CURSOR_TYPE.GRAB);\n    }\n\n    return {\n      appState: {\n        ...appState,\n        selectedElementIds: {},\n        selectedGroupIds: {},\n        activeTool,\n      },\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) => event.key === KEYS.H,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}