{"ast":null,"code":"import { HachureFiller } from './hachure-filler';\nimport { polygonHachureLines } from './scan-line-hachure';\nimport { lineLength } from '../geometry';\nexport class ZigZagFiller extends HachureFiller {\n  fillPolygons(polygonList, o) {\n    let gap = o.hachureGap;\n    if (gap < 0) {\n      gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    const o2 = Object.assign({}, o, {\n      hachureGap: gap\n    });\n    const lines = polygonHachureLines(polygonList, o2);\n    const zigZagAngle = Math.PI / 180 * o.hachureAngle;\n    const zigzagLines = [];\n    const dgx = gap * 0.5 * Math.cos(zigZagAngle);\n    const dgy = gap * 0.5 * Math.sin(zigZagAngle);\n    for (const [p1, p2] of lines) {\n      if (lineLength([p1, p2])) {\n        zigzagLines.push([[p1[0] - dgx, p1[1] + dgy], [...p2]], [[p1[0] + dgx, p1[1] - dgy], [...p2]]);\n      }\n    }\n    const ops = this.renderLines(zigzagLines, o);\n    return {\n      type: 'fillSketch',\n      ops\n    };\n  }\n}","map":{"version":3,"names":["HachureFiller","polygonHachureLines","lineLength","ZigZagFiller","fillPolygons","polygonList","o","gap","hachureGap","strokeWidth","Math","max","o2","Object","assign","lines","zigZagAngle","PI","hachureAngle","zigzagLines","dgx","cos","dgy","sin","p1","p2","push","ops","renderLines","type"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/zigzag-filler.js"],"sourcesContent":["import { HachureFiller } from './hachure-filler';\nimport { polygonHachureLines } from './scan-line-hachure';\nimport { lineLength } from '../geometry';\nexport class ZigZagFiller extends HachureFiller {\n    fillPolygons(polygonList, o) {\n        let gap = o.hachureGap;\n        if (gap < 0) {\n            gap = o.strokeWidth * 4;\n        }\n        gap = Math.max(gap, 0.1);\n        const o2 = Object.assign({}, o, { hachureGap: gap });\n        const lines = polygonHachureLines(polygonList, o2);\n        const zigZagAngle = (Math.PI / 180) * o.hachureAngle;\n        const zigzagLines = [];\n        const dgx = gap * 0.5 * Math.cos(zigZagAngle);\n        const dgy = gap * 0.5 * Math.sin(zigZagAngle);\n        for (const [p1, p2] of lines) {\n            if (lineLength([p1, p2])) {\n                zigzagLines.push([\n                    [p1[0] - dgx, p1[1] + dgy],\n                    [...p2],\n                ], [\n                    [p1[0] + dgx, p1[1] - dgy],\n                    [...p2],\n                ]);\n            }\n        }\n        const ops = this.renderLines(zigzagLines, o);\n        return { type: 'fillSketch', ops };\n    }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,MAAMC,YAAY,SAASH,aAAa,CAAC;EAC5CI,YAAYA,CAACC,WAAW,EAAEC,CAAC,EAAE;IACzB,IAAIC,GAAG,GAAGD,CAAC,CAACE,UAAU;IACtB,IAAID,GAAG,GAAG,CAAC,EAAE;MACTA,GAAG,GAAGD,CAAC,CAACG,WAAW,GAAG,CAAC;IAC3B;IACAF,GAAG,GAAGG,IAAI,CAACC,GAAG,CAACJ,GAAG,EAAE,GAAG,CAAC;IACxB,MAAMK,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,CAAC,EAAE;MAAEE,UAAU,EAAED;IAAI,CAAC,CAAC;IACpD,MAAMQ,KAAK,GAAGd,mBAAmB,CAACI,WAAW,EAAEO,EAAE,CAAC;IAClD,MAAMI,WAAW,GAAIN,IAAI,CAACO,EAAE,GAAG,GAAG,GAAIX,CAAC,CAACY,YAAY;IACpD,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,GAAG,GAAGb,GAAG,GAAG,GAAG,GAAGG,IAAI,CAACW,GAAG,CAACL,WAAW,CAAC;IAC7C,MAAMM,GAAG,GAAGf,GAAG,GAAG,GAAG,GAAGG,IAAI,CAACa,GAAG,CAACP,WAAW,CAAC;IAC7C,KAAK,MAAM,CAACQ,EAAE,EAAEC,EAAE,CAAC,IAAIV,KAAK,EAAE;MAC1B,IAAIb,UAAU,CAAC,CAACsB,EAAE,EAAEC,EAAE,CAAC,CAAC,EAAE;QACtBN,WAAW,CAACO,IAAI,CAAC,CACb,CAACF,EAAE,CAAC,CAAC,CAAC,GAAGJ,GAAG,EAAEI,EAAE,CAAC,CAAC,CAAC,GAAGF,GAAG,CAAC,EAC1B,CAAC,GAAGG,EAAE,CAAC,CACV,EAAE,CACC,CAACD,EAAE,CAAC,CAAC,CAAC,GAAGJ,GAAG,EAAEI,EAAE,CAAC,CAAC,CAAC,GAAGF,GAAG,CAAC,EAC1B,CAAC,GAAGG,EAAE,CAAC,CACV,CAAC;MACN;IACJ;IACA,MAAME,GAAG,GAAG,IAAI,CAACC,WAAW,CAACT,WAAW,EAAEb,CAAC,CAAC;IAC5C,OAAO;MAAEuB,IAAI,EAAE,YAAY;MAAEF;IAAI,CAAC;EACtC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}