{"ast":null,"code":"module.exports = encode;\nfunction encode(keyword, content) {\n  keyword = String(keyword);\n  content = String(content);\n  if (!/^[\\x00-\\xFF]+$/.test(keyword) || !/^[\\x00-\\xFF]+$/.test(content)) {\n    throw new Error('Only Latin-1 characters are permitted in PNG tEXt chunks. You might want to consider base64 encoding and/or zEXt compression');\n  }\n  if (keyword.length >= 80) {\n    throw new Error('Keyword \"' + keyword + '\" is longer than the 79-character limit imposed by the PNG specification');\n  }\n  var totalSize = keyword.length + content.length + 1;\n  var output = new Uint8Array(totalSize);\n  var idx = 0;\n  var code;\n  for (var i = 0; i < keyword.length; i++) {\n    if (!(code = keyword.charCodeAt(i))) {\n      throw new Error('0x00 character is not permitted in tEXt keywords');\n    }\n    output[idx++] = code;\n  }\n  output[idx++] = 0;\n  for (var j = 0; j < content.length; j++) {\n    if (!(code = content.charCodeAt(j))) {\n      throw new Error('0x00 character is not permitted in tEXt content');\n    }\n    output[idx++] = code;\n  }\n  return {\n    name: 'tEXt',\n    data: output\n  };\n}","map":{"version":3,"names":["module","exports","encode","keyword","content","String","test","Error","length","totalSize","output","Uint8Array","idx","code","i","charCodeAt","j","name","data"],"sources":["D:/project/excalidraw-cn/node_modules/png-chunk-text/encode.js"],"sourcesContent":["module.exports = encode\n\nfunction encode (keyword, content) {\n  keyword = String(keyword)\n  content = String(content)\n\n  if (!/^[\\x00-\\xFF]+$/.test(keyword) || !/^[\\x00-\\xFF]+$/.test(content)) {\n    throw new Error('Only Latin-1 characters are permitted in PNG tEXt chunks. You might want to consider base64 encoding and/or zEXt compression')\n  }\n\n  if (keyword.length >= 80) {\n    throw new Error('Keyword \"' + keyword + '\" is longer than the 79-character limit imposed by the PNG specification')\n  }\n\n  var totalSize = keyword.length + content.length + 1\n  var output = new Uint8Array(totalSize)\n  var idx = 0\n  var code\n\n  for (var i = 0; i < keyword.length; i++) {\n    if (!(code = keyword.charCodeAt(i))) {\n      throw new Error('0x00 character is not permitted in tEXt keywords')\n    }\n\n    output[idx++] = code\n  }\n\n  output[idx++] = 0\n\n  for (var j = 0; j < content.length; j++) {\n    if (!(code = content.charCodeAt(j))) {\n      throw new Error('0x00 character is not permitted in tEXt content')\n    }\n\n    output[idx++] = code\n  }\n\n  return {\n    name: 'tEXt',\n    data: output\n  }\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAO,GAAGC,MAAM;AAEvB,SAASA,MAAMA,CAAEC,OAAO,EAAEC,OAAO,EAAE;EACjCD,OAAO,GAAGE,MAAM,CAACF,OAAO,CAAC;EACzBC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAAC;EAEzB,IAAI,CAAC,gBAAgB,CAACE,IAAI,CAACH,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAACG,IAAI,CAACF,OAAO,CAAC,EAAE;IACtE,MAAM,IAAIG,KAAK,CAAC,8HAA8H,CAAC;EACjJ;EAEA,IAAIJ,OAAO,CAACK,MAAM,IAAI,EAAE,EAAE;IACxB,MAAM,IAAID,KAAK,CAAC,WAAW,GAAGJ,OAAO,GAAG,0EAA0E,CAAC;EACrH;EAEA,IAAIM,SAAS,GAAGN,OAAO,CAACK,MAAM,GAAGJ,OAAO,CAACI,MAAM,GAAG,CAAC;EACnD,IAAIE,MAAM,GAAG,IAAIC,UAAU,CAACF,SAAS,CAAC;EACtC,IAAIG,GAAG,GAAG,CAAC;EACX,IAAIC,IAAI;EAER,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGX,OAAO,CAACK,MAAM,EAAEM,CAAC,EAAE,EAAE;IACvC,IAAI,EAAED,IAAI,GAAGV,OAAO,CAACY,UAAU,CAACD,CAAC,CAAC,CAAC,EAAE;MACnC,MAAM,IAAIP,KAAK,CAAC,kDAAkD,CAAC;IACrE;IAEAG,MAAM,CAACE,GAAG,EAAE,CAAC,GAAGC,IAAI;EACtB;EAEAH,MAAM,CAACE,GAAG,EAAE,CAAC,GAAG,CAAC;EAEjB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,OAAO,CAACI,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACvC,IAAI,EAAEH,IAAI,GAAGT,OAAO,CAACW,UAAU,CAACC,CAAC,CAAC,CAAC,EAAE;MACnC,MAAM,IAAIT,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEAG,MAAM,CAACE,GAAG,EAAE,CAAC,GAAGC,IAAI;EACtB;EAEA,OAAO;IACLI,IAAI,EAAE,MAAM;IACZC,IAAI,EAAER;EACR,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}