{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { getGlobalObject, logger, normalize, uuid4 } from '@sentry/utils';\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nvar localForage = require('localforage');\n/**\n * cache offline errors and send when connected\n */\nvar Offline = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Offline(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Offline.id;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.global = getGlobalObject();\n    this.maxStoredEvents = options.maxStoredEvents || 30; // set a reasonable default\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this.offlineEventStore = localForage.createInstance({\n      name: 'sentry/offlineEventStore'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n  Offline.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    var _this = this;\n    this.hub = getCurrentHub();\n    if ('addEventListener' in this.global) {\n      this.global.addEventListener('online', function () {\n        _this._sendEvents().catch(function () {\n          logger.warn('could not send cached events');\n        });\n      });\n    }\n    addGlobalEventProcessor(function (event) {\n      if (_this.hub && _this.hub.getIntegration(Offline)) {\n        // cache if we are positively offline\n        if ('navigator' in _this.global && 'onLine' in _this.global.navigator && !_this.global.navigator.onLine) {\n          _this._cacheEvent(event).then(function (_event) {\n            return _this._enforceMaxEvents();\n          }).catch(function (_error) {\n            logger.warn('could not cache event while offline');\n          });\n          // return null on success or failure, because being offline will still result in an error\n          return null;\n        }\n      }\n      return event;\n    });\n    // if online now, send any events stored in a previous offline session\n    if ('navigator' in this.global && 'onLine' in this.global.navigator && this.global.navigator.onLine) {\n      this._sendEvents().catch(function () {\n        logger.warn('could not send cached events');\n      });\n    }\n  };\n  /**\n   * cache an event to send later\n   * @param event an event\n   */\n  Offline.prototype._cacheEvent = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.offlineEventStore.setItem(uuid4(), normalize(event))];\n      });\n    });\n  };\n  /**\n   * purge excess events if necessary\n   */\n  Offline.prototype._enforceMaxEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var events;\n      var _this = this;\n      return __generator(this, function (_a) {\n        events = [];\n        return [2 /*return*/, this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n          // aggregate events\n          events.push({\n            cacheKey: cacheKey,\n            event: event\n          });\n        }).then(function () {\n          // this promise resolves when the iteration is finished\n          return _this._purgeEvents(\n          // purge all events past maxStoredEvents in reverse chronological order\n          events.sort(function (a, b) {\n            return (b.event.timestamp || 0) - (a.event.timestamp || 0);\n          }).slice(_this.maxStoredEvents < events.length ? _this.maxStoredEvents : events.length).map(function (event) {\n            return event.cacheKey;\n          }));\n        }).catch(function (_error) {\n          logger.warn('could not enforce max events');\n        })];\n      });\n    });\n  };\n  /**\n   * purge event from cache\n   */\n  Offline.prototype._purgeEvent = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.offlineEventStore.removeItem(cacheKey)];\n      });\n    });\n  };\n  /**\n   * purge events from cache\n   */\n  Offline.prototype._purgeEvents = function (cacheKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        // trail with .then to ensure the return type as void and not void|void[]\n        return [2 /*return*/, Promise.all(cacheKeys.map(function (cacheKey) {\n          return _this._purgeEvent(cacheKey);\n        })).then()];\n      });\n    });\n  };\n  /**\n   * send all events\n   */\n  Offline.prototype._sendEvents = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.offlineEventStore.iterate(function (event, cacheKey, _index) {\n          if (_this.hub) {\n            _this.hub.captureEvent(event);\n            _this._purgeEvent(cacheKey).catch(function (_error) {\n              logger.warn('could not purge event from cache');\n            });\n          } else {\n            logger.warn('no hub found - could not send cached event');\n          }\n        })];\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Offline.id = 'Offline';\n  return Offline;\n}();\nexport { Offline };","map":{"version":3,"names":["getGlobalObject","logger","normalize","uuid4","localForage","require","Offline","options","name","id","global","maxStoredEvents","offlineEventStore","createInstance","prototype","setupOnce","addGlobalEventProcessor","getCurrentHub","_this","hub","addEventListener","_sendEvents","catch","warn","event","getIntegration","navigator","onLine","_cacheEvent","then","_event","_enforceMaxEvents","_error","setItem","events","iterate","cacheKey","_index","push","_purgeEvents","sort","a","b","timestamp","slice","length","map","_purgeEvent","removeItem","cacheKeys","Promise","all","captureEvent"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\offline.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { Event, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, logger, normalize, uuid4 } from '@sentry/utils';\nimport * as localForageType from 'localforage';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst localForage = require('localforage');\n/**\n * cache offline errors and send when connected\n */\nexport class Offline implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Offline';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = Offline.id;\n\n  /**\n   * the global instance\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public global: any;\n\n  /**\n   * the current hub instance\n   */\n  public hub?: Hub;\n\n  /**\n   * maximum number of events to store while offline\n   */\n  public maxStoredEvents: number;\n\n  /**\n   * event cache\n   */\n  public offlineEventStore: typeof localForageType; // type imported from localforage\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { maxStoredEvents?: number } = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.global = getGlobalObject<any>();\n    this.maxStoredEvents = options.maxStoredEvents || 30; // set a reasonable default\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this.offlineEventStore = localForage.createInstance({\n      name: 'sentry/offlineEventStore',\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this.hub = getCurrentHub();\n\n    if ('addEventListener' in this.global) {\n      this.global.addEventListener('online', () => {\n        this._sendEvents().catch(() => {\n          logger.warn('could not send cached events');\n        });\n      });\n    }\n\n    addGlobalEventProcessor((event: Event) => {\n      if (this.hub && this.hub.getIntegration(Offline)) {\n        // cache if we are positively offline\n        if ('navigator' in this.global && 'onLine' in this.global.navigator && !this.global.navigator.onLine) {\n          this._cacheEvent(event)\n            .then((_event: Event): Promise<void> => this._enforceMaxEvents())\n            .catch((_error): void => {\n              logger.warn('could not cache event while offline');\n            });\n\n          // return null on success or failure, because being offline will still result in an error\n          return null;\n        }\n      }\n\n      return event;\n    });\n\n    // if online now, send any events stored in a previous offline session\n    if ('navigator' in this.global && 'onLine' in this.global.navigator && this.global.navigator.onLine) {\n      this._sendEvents().catch(() => {\n        logger.warn('could not send cached events');\n      });\n    }\n  }\n\n  /**\n   * cache an event to send later\n   * @param event an event\n   */\n  private async _cacheEvent(event: Event): Promise<Event> {\n    return this.offlineEventStore.setItem<Event>(uuid4(), normalize(event));\n  }\n\n  /**\n   * purge excess events if necessary\n   */\n  private async _enforceMaxEvents(): Promise<void> {\n    const events: Array<{ event: Event; cacheKey: string }> = [];\n\n    return this.offlineEventStore\n      .iterate<Event, void>((event: Event, cacheKey: string, _index: number): void => {\n        // aggregate events\n        events.push({ cacheKey, event });\n      })\n      .then(\n        (): Promise<void> =>\n          // this promise resolves when the iteration is finished\n          this._purgeEvents(\n            // purge all events past maxStoredEvents in reverse chronological order\n            events\n              .sort((a, b) => (b.event.timestamp || 0) - (a.event.timestamp || 0))\n              .slice(this.maxStoredEvents < events.length ? this.maxStoredEvents : events.length)\n              .map(event => event.cacheKey),\n          ),\n      )\n      .catch((_error): void => {\n        logger.warn('could not enforce max events');\n      });\n  }\n\n  /**\n   * purge event from cache\n   */\n  private async _purgeEvent(cacheKey: string): Promise<void> {\n    return this.offlineEventStore.removeItem(cacheKey);\n  }\n\n  /**\n   * purge events from cache\n   */\n  private async _purgeEvents(cacheKeys: string[]): Promise<void> {\n    // trail with .then to ensure the return type as void and not void|void[]\n    return Promise.all(cacheKeys.map(cacheKey => this._purgeEvent(cacheKey))).then();\n  }\n\n  /**\n   * send all events\n   */\n  private async _sendEvents(): Promise<void> {\n    return this.offlineEventStore.iterate<Event, void>((event: Event, cacheKey: string, _index: number): void => {\n      if (this.hub) {\n        this.hub.captureEvent(event);\n\n        this._purgeEvent(cacheKey).catch((_error): void => {\n          logger.warn('could not purge event from cache');\n        });\n      } else {\n        logger.warn('no hub found - could not send cached event');\n      }\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}