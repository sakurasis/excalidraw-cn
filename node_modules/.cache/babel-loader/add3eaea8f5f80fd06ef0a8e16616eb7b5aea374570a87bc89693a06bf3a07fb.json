{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  var hub = getCurrentHub();\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}","map":{"version":3,"names":["getCurrentHub","logger","initAndBind","clientClass","options","debug","enable","hub","client","bindClient"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\core\\src\\sdk.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  const hub = getCurrentHub();\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,aAAa;AAE3C,SAASC,MAAM,QAAQ,eAAe;AAKtC;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CAAsCC,WAA8B,EAAEC,OAAU;EACzG,IAAIA,OAAO,CAACC,KAAK,KAAK,IAAI,EAAE;IAC1BJ,MAAM,CAACK,MAAM,EAAE;;EAEjB,IAAMC,GAAG,GAAGP,aAAa,EAAE;EAC3B,IAAMQ,MAAM,GAAG,IAAIL,WAAW,CAACC,OAAO,CAAC;EACvCG,GAAG,CAACE,UAAU,CAACD,MAAM,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}