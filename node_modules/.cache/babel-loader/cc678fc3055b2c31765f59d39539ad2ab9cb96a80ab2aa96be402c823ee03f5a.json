{"ast":null,"code":"import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\nimport { BrowserClient } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\nexport var defaultIntegrations = [new CoreIntegrations.InboundFilters(), new CoreIntegrations.FunctionToString(), new TryCatch(), new Breadcrumbs(), new GlobalHandlers(), new LinkedErrors(), new UserAgent()];\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    var window_1 = getGlobalObject();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {\n      options.release = window_1.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n  initAndBind(BrowserClient, options);\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  var client = getCurrentHub().getClient();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId() {\n  return getCurrentHub().lastEventId();\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad() {\n  // Noop\n}\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback) {\n  callback();\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout) {\n  var client = getCurrentHub().getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout) {\n  var client = getCurrentHub().getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn) {\n  return internalWrap(fn)();\n}\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n  var window = getGlobalObject();\n  var document = window.document;\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n  var hub = getCurrentHub();\n  if ('startSession' in hub) {\n    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n    // pinned at the same version in package.json, but there are edge cases where it's possible'. See\n    // https://github.com/getsentry/sentry-javascript/issues/3234 and\n    // https://github.com/getsentry/sentry-javascript/issues/3207.\n    hub.startSession();\n    hub.captureSession();\n    // We want to create a session for every navigation as well\n    addInstrumentationHandler({\n      callback: function callback() {\n        hub.startSession();\n        hub.captureSession();\n      },\n      type: 'history'\n    });\n  }\n}","map":{"version":3,"names":["getCurrentHub","initAndBind","Integrations","CoreIntegrations","addInstrumentationHandler","getGlobalObject","logger","SyncPromise","BrowserClient","wrap","internalWrap","Breadcrumbs","GlobalHandlers","LinkedErrors","TryCatch","UserAgent","defaultIntegrations","InboundFilters","FunctionToString","init","options","undefined","release","window_1","SENTRY_RELEASE","id","autoSessionTracking","startSessionTracking","showReportDialog","eventId","lastEventId","client","getClient","forceLoad","onLoad","callback","flush","timeout","reject","close","fn","window","document","warn","hub","startSession","captureSession","type"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\browser\\src\\sdk.ts"],"sourcesContent":["import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\nimport { addInstrumentationHandler, getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient } from './client';\nimport { ReportDialogOptions, wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  if (options.release === undefined) {\n    const window = getGlobalObject<Window>();\n    // This supports the variable that sentry-webpack-plugin injects\n    if (window.SENTRY_RELEASE && window.SENTRY_RELEASE.id) {\n      options.release = window.SENTRY_RELEASE.id;\n    }\n  }\n  if (options.autoSessionTracking === undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  initAndBind(BrowserClient, options);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): PromiseLike<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return SyncPromise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n *\n * @returns The result of wrapped function call.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function wrap(fn: (...args: any) => any): any {\n  return internalWrap(fn)();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking(): void {\n  const window = getGlobalObject<Window>();\n  const document = window.document;\n\n  if (typeof document === 'undefined') {\n    logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  const hub = getCurrentHub();\n\n  if ('startSession' in hub) {\n    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and\n    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are\n    // pinned at the same version in package.json, but there are edge cases where it's possible'. See\n    // https://github.com/getsentry/sentry-javascript/issues/3234 and\n    // https://github.com/getsentry/sentry-javascript/issues/3207.\n\n    hub.startSession();\n    hub.captureSession();\n\n    // We want to create a session for every navigation as well\n    addInstrumentationHandler({\n      callback: () => {\n        hub.startSession();\n        hub.captureSession();\n      },\n      type: 'history',\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}