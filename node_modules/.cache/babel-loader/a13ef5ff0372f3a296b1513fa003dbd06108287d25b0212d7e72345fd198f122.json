{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport var RoughSVG = /*#__PURE__*/function () {\n  function RoughSVG(svg, config) {\n    _classCallCheck(this, RoughSVG);\n    this.svg = svg;\n    this.gen = new RoughGenerator(config);\n  }\n  _createClass(RoughSVG, [{\n    key: \"draw\",\n    value: function draw(drawable) {\n      var sets = drawable.sets || [];\n      var o = drawable.options || this.getDefaultOptions();\n      var doc = this.svg.ownerDocument || window.document;\n      var g = doc.createElementNS(SVGNS, 'g');\n      var precision = drawable.options.fixedDecimalPlaceDigits;\n      var _iterator = _createForOfIteratorHelper(sets),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var drawing = _step.value;\n          var path = null;\n          switch (drawing.type) {\n            case 'path':\n              {\n                path = doc.createElementNS(SVGNS, 'path');\n                path.setAttribute('d', this.opsToPath(drawing, precision));\n                path.setAttribute('stroke', o.stroke);\n                path.setAttribute('stroke-width', o.strokeWidth + '');\n                path.setAttribute('fill', 'none');\n                if (o.strokeLineDash) {\n                  path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                }\n                if (o.strokeLineDashOffset) {\n                  path.setAttribute('stroke-dashoffset', \"\".concat(o.strokeLineDashOffset));\n                }\n                break;\n              }\n            case 'fillPath':\n              {\n                path = doc.createElementNS(SVGNS, 'path');\n                path.setAttribute('d', this.opsToPath(drawing, precision));\n                path.setAttribute('stroke', 'none');\n                path.setAttribute('stroke-width', '0');\n                path.setAttribute('fill', o.fill || '');\n                if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                  path.setAttribute('fill-rule', 'evenodd');\n                }\n                break;\n              }\n            case 'fillSketch':\n              {\n                path = this.fillSketch(doc, drawing, o);\n                break;\n              }\n          }\n          if (path) {\n            g.appendChild(path);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return g;\n    }\n  }, {\n    key: \"fillSketch\",\n    value: function fillSketch(doc, drawing, o) {\n      var fweight = o.fillWeight;\n      if (fweight < 0) {\n        fweight = o.strokeWidth / 2;\n      }\n      var path = doc.createElementNS(SVGNS, 'path');\n      path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n      path.setAttribute('stroke', o.fill || '');\n      path.setAttribute('stroke-width', fweight + '');\n      path.setAttribute('fill', 'none');\n      if (o.fillLineDash) {\n        path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n      }\n      if (o.fillLineDashOffset) {\n        path.setAttribute('stroke-dashoffset', \"\".concat(o.fillLineDashOffset));\n      }\n      return path;\n    }\n  }, {\n    key: \"generator\",\n    get: function get() {\n      return this.gen;\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return this.gen.defaultOptions;\n    }\n  }, {\n    key: \"opsToPath\",\n    value: function opsToPath(drawing, fixedDecimalPlaceDigits) {\n      return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n    }\n  }, {\n    key: \"line\",\n    value: function line(x1, y1, x2, y2, options) {\n      var d = this.gen.line(x1, y1, x2, y2, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"rectangle\",\n    value: function rectangle(x, y, width, height, options) {\n      var d = this.gen.rectangle(x, y, width, height, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"ellipse\",\n    value: function ellipse(x, y, width, height, options) {\n      var d = this.gen.ellipse(x, y, width, height, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"circle\",\n    value: function circle(x, y, diameter, options) {\n      var d = this.gen.circle(x, y, diameter, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"linearPath\",\n    value: function linearPath(points, options) {\n      var d = this.gen.linearPath(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"polygon\",\n    value: function polygon(points, options) {\n      var d = this.gen.polygon(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(x, y, width, height, start, stop) {\n      var closed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var options = arguments.length > 7 ? arguments[7] : undefined;\n      var d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(points, options) {\n      var d = this.gen.curve(points, options);\n      return this.draw(d);\n    }\n  }, {\n    key: \"path\",\n    value: function path(d, options) {\n      var drawing = this.gen.path(d, options);\n      return this.draw(drawing);\n    }\n  }]);\n  return RoughSVG;\n}();","map":{"version":3,"names":["SVGNS","RoughGenerator","RoughSVG","svg","config","_classCallCheck","gen","_createClass","key","value","draw","drawable","sets","o","options","getDefaultOptions","doc","ownerDocument","window","document","g","createElementNS","precision","fixedDecimalPlaceDigits","_iterator","_createForOfIteratorHelper","_step","s","n","done","drawing","path","type","setAttribute","opsToPath","stroke","strokeWidth","strokeLineDash","join","trim","strokeLineDashOffset","concat","fill","shape","fillSketch","appendChild","err","e","f","fweight","fillWeight","fillLineDash","fillLineDashOffset","get","defaultOptions","line","x1","y1","x2","y2","d","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","arguments","length","undefined","curve"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/svg.js"],"sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        const precision = drawable.options.fixedDecimalPlaceDigits;\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', o.stroke);\n                    path.setAttribute('stroke-width', o.strokeWidth + '');\n                    path.setAttribute('fill', 'none');\n                    if (o.strokeLineDash) {\n                        path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                    }\n                    if (o.strokeLineDashOffset) {\n                        path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n                    }\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing, precision));\n                    path.setAttribute('stroke', 'none');\n                    path.setAttribute('stroke-width', '0');\n                    path.setAttribute('fill', o.fill || '');\n                    if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                        path.setAttribute('fill-rule', 'evenodd');\n                    }\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing, o.fixedDecimalPlaceDigits));\n        path.setAttribute('stroke', o.fill || '');\n        path.setAttribute('stroke-width', fweight + '');\n        path.setAttribute('fill', 'none');\n        if (o.fillLineDash) {\n            path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n        }\n        if (o.fillLineDashOffset) {\n            path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n        }\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing, fixedDecimalPlaceDigits) {\n        return this.gen.opsToPath(drawing, fixedDecimalPlaceDigits);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}