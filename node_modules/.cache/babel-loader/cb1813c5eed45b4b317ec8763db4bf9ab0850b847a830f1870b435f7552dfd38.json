{"ast":null,"code":"import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import*as GA from\"./ga\";import*as GALine from\"./galines\";import{join}from\"./ga\";export var from=function from(_ref){var _ref2=_slicedToArray(_ref,2),x=_ref2[0],y=_ref2[1];return[0,0,0,0,y,x,1,0];};export var toTuple=function toTuple(point){return[point[5],point[4]];};export var abs=function abs(point){return[0,0,0,0,Math.abs(point[4]),Math.abs(point[5]),1,0];};export var intersect=function intersect(line1,line2){return GA.normalized(GA.meet(line1,line2));};// Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\nexport var project=function project(point,line){return intersect(GALine.orthogonal(line,point),line);};export var distance=function distance(point1,point2){return GA.norm(join(point1,point2));};export var distanceToLine=function distanceToLine(point,line){return GA.joinScalar(point,line);};","map":{"version":3,"names":["GA","GALine","join","from","_ref","_ref2","_slicedToArray","x","y","toTuple","point","abs","Math","intersect","line1","line2","normalized","meet","project","line","orthogonal","distance","point1","point2","norm","distanceToLine","joinScalar"],"sources":["D:/project/excalidraw-cn/src/gapoints.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport * as GALine from \"./galines\";\nimport { Point, Line, join } from \"./ga\";\n\nexport const from = ([x, y]: readonly [number, number]): Point => [\n  0,\n  0,\n  0,\n  0,\n  y,\n  x,\n  1,\n  0,\n];\n\nexport const toTuple = (point: Point): [number, number] => [point[5], point[4]];\n\nexport const abs = (point: Point): Point => [\n  0,\n  0,\n  0,\n  0,\n  Math.abs(point[4]),\n  Math.abs(point[5]),\n  1,\n  0,\n];\n\nexport const intersect = (line1: Line, line2: Line): Point =>\n  GA.normalized(GA.meet(line1, line2));\n\n// Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\nexport const project = (point: Point, line: Line): Point =>\n  intersect(GALine.orthogonal(line, point), line);\n\nexport const distance = (point1: Point, point2: Point): number =>\n  GA.norm(join(point1, point2));\n\nexport const distanceToLine = (point: Point, line: Line): number =>\n  GA.joinScalar(point, line);\n"],"mappings":"8GAAA,MAAO,GAAK,CAAAA,EAAE,KAAM,MAAM,CAC1B,MAAO,GAAK,CAAAC,MAAM,KAAM,WAAW,CACnC,OAAsBC,IAAI,KAAQ,MAAM,CAExC,MAAO,IAAM,CAAAC,IAAI,CAAG,QAAP,CAAAA,IAAIA,CAAAC,IAAA,MAAAC,KAAA,CAAAC,cAAA,CAAAF,IAAA,IAAKG,CAAC,CAAAF,KAAA,IAAEG,CAAC,CAAAH,KAAA,UAAwC,CAChE,CAAC,CACD,CAAC,CACD,CAAC,CACD,CAAC,CACDG,CAAC,CACDD,CAAC,CACD,CAAC,CACD,CAAC,CACF,GAED,MAAO,IAAM,CAAAE,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,KAAY,QAAuB,CAACA,KAAK,CAAC,CAAC,CAAC,CAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAE/E,MAAO,IAAM,CAAAC,GAAG,CAAG,QAAN,CAAAA,GAAGA,CAAID,KAAY,QAAY,CAC1C,CAAC,CACD,CAAC,CACD,CAAC,CACD,CAAC,CACDE,IAAI,CAACD,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAClBE,IAAI,CAACD,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC,CAClB,CAAC,CACD,CAAC,CACF,GAED,MAAO,IAAM,CAAAG,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,KAAW,CAAEC,KAAW,QAChD,CAAAf,EAAE,CAACgB,UAAU,CAAChB,EAAE,CAACiB,IAAI,CAACH,KAAK,CAAEC,KAAK,CAAC,CAAC,GAEtC;AACA;AACA,MAAO,IAAM,CAAAG,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIR,KAAY,CAAES,IAAU,QAC9C,CAAAN,SAAS,CAACZ,MAAM,CAACmB,UAAU,CAACD,IAAI,CAAET,KAAK,CAAC,CAAES,IAAI,CAAC,GAEjD,MAAO,IAAM,CAAAE,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,MAAa,CAAEC,MAAa,QACnD,CAAAvB,EAAE,CAACwB,IAAI,CAACtB,IAAI,CAACoB,MAAM,CAAEC,MAAM,CAAC,CAAC,GAE/B,MAAO,IAAM,CAAAE,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIf,KAAY,CAAES,IAAU,QACrD,CAAAnB,EAAE,CAAC0B,UAAU,CAAChB,KAAK,CAAES,IAAI,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}