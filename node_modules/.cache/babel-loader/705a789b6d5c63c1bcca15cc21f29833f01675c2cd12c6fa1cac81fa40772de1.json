{"ast":null,"code":"import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{atom,useAtom}from\"jotai\";import React,{useLayoutEffect,useRef}from\"react\";import{useTunnels}from\"../../context/tunnels\";import{jsx as _jsx}from\"react/jsx-runtime\";export var withInternalFallback=function withInternalFallback(componentName,Component){var renderAtom=atom(0);var WrapperComponent=function WrapperComponent(props){var _useTunnels=useTunnels(),jotaiScope=_useTunnels.jotaiScope;// for rerenders\nvar _useAtom=useAtom(renderAtom,jotaiScope),_useAtom2=_slicedToArray(_useAtom,2),setCounter=_useAtom2[1];// for initial & subsequent renders. Tracked as component state\n// due to excalidraw multi-instance scanerios.\nvar metaRef=useRef({// flag set on initial render to tell the fallback component to skip the\n// render until mount counter are initialized. This is because the counter\n// is initialized in an effect, and thus we could end rendering both\n// components at the same time until counter is initialized.\npreferHost:false,counter:0});useLayoutEffect(function(){var meta=metaRef.current;setCounter(function(c){var next=c+1;meta.counter=next;return next;});return function(){setCounter(function(c){var next=c-1;meta.counter=next;if(!next){meta.preferHost=false;}return next;});};},[setCounter]);if(!props.__fallback){metaRef.current.preferHost=true;}// ensure we don't render fallback and host components at the same time\nif(// either before the counters are initialized\n!metaRef.current.counter&&props.__fallback&&metaRef.current.preferHost||// or after the counters are initialized, and both are rendered\n// (this is the default when host renders as well)\nmetaRef.current.counter>1&&props.__fallback){return null;}return/*#__PURE__*/_jsx(Component,_objectSpread({},props));};WrapperComponent.displayName=componentName;return WrapperComponent;};","map":{"version":3,"names":["atom","useAtom","React","useLayoutEffect","useRef","useTunnels","jsx","_jsx","withInternalFallback","componentName","Component","renderAtom","WrapperComponent","props","_useTunnels","jotaiScope","_useAtom","_useAtom2","_slicedToArray","setCounter","metaRef","preferHost","counter","meta","current","c","next","__fallback","_objectSpread","displayName"],"sources":["D:/project/excalidraw-cn/src/components/hoc/withInternalFallback.tsx"],"sourcesContent":["import { atom, useAtom } from \"jotai\";\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { useTunnels } from \"../../context/tunnels\";\n\nexport const withInternalFallback = <P,>(\n  componentName: string,\n  Component: React.FC<P>,\n) => {\n  const renderAtom = atom(0);\n\n  const WrapperComponent: React.FC<\n    P & {\n      __fallback?: boolean;\n    }\n  > = (props) => {\n    const { jotaiScope } = useTunnels();\n    // for rerenders\n    const [, setCounter] = useAtom(renderAtom, jotaiScope);\n    // for initial & subsequent renders. Tracked as component state\n    // due to excalidraw multi-instance scanerios.\n    const metaRef = useRef({\n      // flag set on initial render to tell the fallback component to skip the\n      // render until mount counter are initialized. This is because the counter\n      // is initialized in an effect, and thus we could end rendering both\n      // components at the same time until counter is initialized.\n      preferHost: false,\n      counter: 0,\n    });\n\n    useLayoutEffect(() => {\n      const meta = metaRef.current;\n      setCounter((c) => {\n        const next = c + 1;\n        meta.counter = next;\n\n        return next;\n      });\n      return () => {\n        setCounter((c) => {\n          const next = c - 1;\n          meta.counter = next;\n          if (!next) {\n            meta.preferHost = false;\n          }\n          return next;\n        });\n      };\n    }, [setCounter]);\n\n    if (!props.__fallback) {\n      metaRef.current.preferHost = true;\n    }\n\n    // ensure we don't render fallback and host components at the same time\n    if (\n      // either before the counters are initialized\n      (!metaRef.current.counter &&\n        props.__fallback &&\n        metaRef.current.preferHost) ||\n      // or after the counters are initialized, and both are rendered\n      // (this is the default when host renders as well)\n      (metaRef.current.counter > 1 && props.__fallback)\n    ) {\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  WrapperComponent.displayName = componentName;\n\n  return WrapperComponent;\n};\n"],"mappings":"2NAAA,OAASA,IAAI,CAAEC,OAAO,KAAQ,OAAO,CACrC,MAAO,CAAAC,KAAK,EAAIC,eAAe,CAAEC,MAAM,KAAQ,OAAO,CACtD,OAASC,UAAU,KAAQ,uBAAuB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEnD,MAAO,IAAM,CAAAC,oBAAoB,CAAG,QAAvB,CAAAA,oBAAoBA,CAC/BC,aAAqB,CACrBC,SAAsB,CACnB,CACH,GAAM,CAAAC,UAAU,CAAGX,IAAI,CAAC,CAAC,CAAC,CAE1B,GAAM,CAAAY,gBAIL,CAAG,QAJE,CAAAA,gBAILA,CAAIC,KAAK,CAAK,CACb,IAAAC,WAAA,CAAuBT,UAAU,EAAE,CAA3BU,UAAU,CAAAD,WAAA,CAAVC,UAAU,CAClB;AACA,IAAAC,QAAA,CAAuBf,OAAO,CAACU,UAAU,CAAEI,UAAU,CAAC,CAAAE,SAAA,CAAAC,cAAA,CAAAF,QAAA,IAA7CG,UAAU,CAAAF,SAAA,IACnB;AACA;AACA,GAAM,CAAAG,OAAO,CAAGhB,MAAM,CAAC,CACrB;AACA;AACA;AACA;AACAiB,UAAU,CAAE,KAAK,CACjBC,OAAO,CAAE,CACX,CAAC,CAAC,CAEFnB,eAAe,CAAC,UAAM,CACpB,GAAM,CAAAoB,IAAI,CAAGH,OAAO,CAACI,OAAO,CAC5BL,UAAU,CAAC,SAACM,CAAC,CAAK,CAChB,GAAM,CAAAC,IAAI,CAAGD,CAAC,CAAG,CAAC,CAClBF,IAAI,CAACD,OAAO,CAAGI,IAAI,CAEnB,MAAO,CAAAA,IAAI,CACb,CAAC,CAAC,CACF,MAAO,WAAM,CACXP,UAAU,CAAC,SAACM,CAAC,CAAK,CAChB,GAAM,CAAAC,IAAI,CAAGD,CAAC,CAAG,CAAC,CAClBF,IAAI,CAACD,OAAO,CAAGI,IAAI,CACnB,GAAI,CAACA,IAAI,CAAE,CACTH,IAAI,CAACF,UAAU,CAAG,KAAK,CACzB,CACA,MAAO,CAAAK,IAAI,CACb,CAAC,CAAC,CACJ,CAAC,CACH,CAAC,CAAE,CAACP,UAAU,CAAC,CAAC,CAEhB,GAAI,CAACN,KAAK,CAACc,UAAU,CAAE,CACrBP,OAAO,CAACI,OAAO,CAACH,UAAU,CAAG,IAAI,CACnC,CAEA;AACA,GACE;AACC,CAACD,OAAO,CAACI,OAAO,CAACF,OAAO,EACvBT,KAAK,CAACc,UAAU,EAChBP,OAAO,CAACI,OAAO,CAACH,UAAU,EAC5B;AACA;AACCD,OAAO,CAACI,OAAO,CAACF,OAAO,CAAG,CAAC,EAAIT,KAAK,CAACc,UAAW,CACjD,CACA,MAAO,KAAI,CACb,CAEA,mBAAOpB,IAAA,CAACG,SAAS,CAAAkB,aAAA,IAAKf,KAAK,EAAI,CACjC,CAAC,CAEDD,gBAAgB,CAACiB,WAAW,CAAGpB,aAAa,CAE5C,MAAO,CAAAG,gBAAgB,CACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}