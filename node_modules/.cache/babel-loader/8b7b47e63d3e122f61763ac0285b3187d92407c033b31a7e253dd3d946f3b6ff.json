{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getGlobalObject, logger } from '@sentry/utils';\n// See https://github.com/angular/angular.js/blob/v1.4.7/src/minErr.js\nvar angularPattern = /^\\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\\] (.*?)\\n?(\\S+)$/;\n/**\n * AngularJS integration\n *\n * Provides an $exceptionHandler for AngularJS\n */\nvar Angular = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Angular(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Angular.id;\n    logger.log('You are still using the Angular integration, consider moving to @sentry/angular');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    this._angular = options.angular || getGlobalObject().angular;\n    if (!this._angular) {\n      logger.error('AngularIntegration is missing an Angular instance');\n      return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module = this._angular.module(Angular.moduleName, []);\n  }\n  /**\n   * @inheritDoc\n   */\n  Angular.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n    if (!this._module) {\n      return;\n    }\n    this._getCurrentHub = getCurrentHub;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module.config(['$provide',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function ($provide) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      $provide.decorator('$exceptionHandler', ['$delegate', _this._$exceptionHandlerDecorator.bind(_this)]);\n    }]);\n  };\n  /**\n   * Angular's exceptionHandler for Sentry integration\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Angular.prototype._$exceptionHandlerDecorator = function ($delegate) {\n    var _this = this;\n    return function (exception, cause) {\n      var hub = _this._getCurrentHub && _this._getCurrentHub();\n      if (hub && hub.getIntegration(Angular)) {\n        hub.withScope(function (scope) {\n          if (cause) {\n            scope.setExtra('cause', cause);\n          }\n          scope.addEventProcessor(function (event) {\n            var ex = event.exception && event.exception.values && event.exception.values[0];\n            if (ex) {\n              var matches = angularPattern.exec(ex.value || '');\n              if (matches) {\n                // This type now becomes something like: $rootScope:inprog\n                ex.type = matches[1];\n                ex.value = matches[2];\n                event.message = ex.type + \": \" + ex.value;\n                // auto set a new tag specifically for the angular error url\n                event.extra = __assign(__assign({}, event.extra), {\n                  angularDocs: matches[3].substr(0, 250)\n                });\n              }\n            }\n            return event;\n          });\n          hub.captureException(exception);\n        });\n      }\n      $delegate(exception, cause);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n  Angular.id = 'AngularJS';\n  /**\n   * moduleName used in Angular's DI resolution algorithm\n   */\n  Angular.moduleName = 'ngSentry';\n  return Angular;\n}();\nexport { Angular };","map":{"version":3,"names":["getGlobalObject","logger","angularPattern","Angular","options","name","id","log","_angular","angular","error","_module","module","moduleName","prototype","setupOnce","_","getCurrentHub","_this","_getCurrentHub","config","$provide","decorator","_$exceptionHandlerDecorator","bind","$delegate","exception","cause","hub","getIntegration","withScope","scope","setExtra","addEventProcessor","event","ex","values","matches","exec","value","type","message","extra","__assign","angularDocs","substr","captureException"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\integrations\\src\\angular.ts"],"sourcesContent":["import { Event, EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\n// See https://github.com/angular/angular.js/blob/v1.4.7/src/minErr.js\nconst angularPattern = /^\\[((?:[$a-zA-Z0-9]+:)?(?:[$a-zA-Z0-9]+))\\] (.*?)\\n?(\\S+)$/;\n\n/**\n * AngularJS integration\n *\n * Provides an $exceptionHandler for AngularJS\n */\nexport class Angular implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'AngularJS';\n\n  /**\n   * moduleName used in Angular's DI resolution algorithm\n   */\n  public static moduleName: string = 'ngSentry';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Angular.id;\n\n  /**\n   * Angular's instance\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly _angular: any;\n\n  /**\n   * ngSentry module instance\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private readonly _module: any;\n\n  /**\n   * Returns current hub.\n   */\n  private _getCurrentHub?: () => Hub;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(options: { angular?: any } = {}) {\n    logger.log('You are still using the Angular integration, consider moving to @sentry/angular');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    this._angular = options.angular || getGlobalObject<any>().angular;\n\n    if (!this._angular) {\n      logger.error('AngularIntegration is missing an Angular instance');\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module = this._angular.module(Angular.moduleName, []);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._module) {\n      return;\n    }\n\n    this._getCurrentHub = getCurrentHub;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    this._module.config([\n      '$provide',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ($provide: any): void => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        $provide.decorator('$exceptionHandler', ['$delegate', this._$exceptionHandlerDecorator.bind(this)]);\n      },\n    ]);\n  }\n\n  /**\n   * Angular's exceptionHandler for Sentry integration\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _$exceptionHandlerDecorator($delegate: any): any {\n    return (exception: Error, cause?: string): void => {\n      const hub = this._getCurrentHub && this._getCurrentHub();\n\n      if (hub && hub.getIntegration(Angular)) {\n        hub.withScope(scope => {\n          if (cause) {\n            scope.setExtra('cause', cause);\n          }\n\n          scope.addEventProcessor((event: Event) => {\n            const ex = event.exception && event.exception.values && event.exception.values[0];\n\n            if (ex) {\n              const matches = angularPattern.exec(ex.value || '');\n\n              if (matches) {\n                // This type now becomes something like: $rootScope:inprog\n                ex.type = matches[1];\n                ex.value = matches[2];\n                event.message = `${ex.type}: ${ex.value}`;\n                // auto set a new tag specifically for the angular error url\n                event.extra = {\n                  ...event.extra,\n                  angularDocs: matches[3].substr(0, 250),\n                };\n              }\n            }\n\n            return event;\n          });\n\n          hub.captureException(exception);\n        });\n      }\n      $delegate(exception, cause);\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}