{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\OverwriteConfirm\\\\OverwriteConfirmActions.tsx\";\nimport React from \"react\";\nimport { FilledButton } from \"../FilledButton\";\nimport { useExcalidrawActionManager, useExcalidrawSetAppState } from \"../App\";\nimport { actionSaveFileToDisk } from \"../../actions\";\nimport { useI18n } from \"../../i18n\";\nimport { actionChangeExportEmbedScene } from \"../../actions/actionExport\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Action = _ref => {\n  let {\n    title,\n    children,\n    actionLabel,\n    onClick\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"OverwriteConfirm__Actions__Action\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"OverwriteConfirm__Actions__Action__content\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilledButton, {\n      variant: \"outlined\",\n      color: \"muted\",\n      label: actionLabel,\n      size: \"large\",\n      fullWidth: true,\n      onClick: onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\nexport const ExportToImage = () => {\n  const {\n    t\n  } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n  const setAppState = useExcalidrawSetAppState();\n  return /*#__PURE__*/_jsxDEV(Action, {\n    title: t(\"overwriteConfirm.action.exportToImage.title\"),\n    actionLabel: t(\"overwriteConfirm.action.exportToImage.button\"),\n    onClick: () => {\n      actionManager.executeAction(actionChangeExportEmbedScene, \"ui\", true);\n      setAppState({\n        openDialog: \"imageExport\"\n      });\n    },\n    children: t(\"overwriteConfirm.action.exportToImage.description\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\nexport const SaveToDisk = () => {\n  const {\n    t\n  } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n  return /*#__PURE__*/_jsxDEV(Action, {\n    title: t(\"overwriteConfirm.action.saveToDisk.title\"),\n    actionLabel: t(\"overwriteConfirm.action.saveToDisk.button\"),\n    onClick: () => {\n      actionManager.executeAction(actionSaveFileToDisk, \"ui\");\n    },\n    children: t(\"overwriteConfirm.action.saveToDisk.description\")\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\nconst Actions = Object.assign(_ref2 => {\n  let {\n    children\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"OverwriteConfirm__Actions\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n}, {\n  ExportToImage,\n  SaveToDisk\n});\nexport { Actions };","map":{"version":3,"names":["React","FilledButton","useExcalidrawActionManager","useExcalidrawSetAppState","actionSaveFileToDisk","useI18n","actionChangeExportEmbedScene","jsxDEV","_jsxDEV","Action","_ref","title","children","actionLabel","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","variant","color","label","size","fullWidth","ExportToImage","t","actionManager","setAppState","executeAction","openDialog","SaveToDisk","Actions","Object","assign","_ref2"],"sources":["D:/project/excalidraw-cn/src/components/OverwriteConfirm/OverwriteConfirmActions.tsx"],"sourcesContent":["import React from \"react\";\nimport { FilledButton } from \"../FilledButton\";\nimport { useExcalidrawActionManager, useExcalidrawSetAppState } from \"../App\";\nimport { actionSaveFileToDisk } from \"../../actions\";\nimport { useI18n } from \"../../i18n\";\nimport { actionChangeExportEmbedScene } from \"../../actions/actionExport\";\n\nexport type ActionProps = {\n  title: string;\n  children: React.ReactNode;\n  actionLabel: string;\n  onClick: () => void;\n};\n\nexport const Action = ({\n  title,\n  children,\n  actionLabel,\n  onClick,\n}: ActionProps) => {\n  return (\n    <div className=\"OverwriteConfirm__Actions__Action\">\n      <h4>{title}</h4>\n      <div className=\"OverwriteConfirm__Actions__Action__content\">\n        {children}\n      </div>\n      <FilledButton\n        variant=\"outlined\"\n        color=\"muted\"\n        label={actionLabel}\n        size=\"large\"\n        fullWidth\n        onClick={onClick}\n      />\n    </div>\n  );\n};\n\nexport const ExportToImage = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n  const setAppState = useExcalidrawSetAppState();\n\n  return (\n    <Action\n      title={t(\"overwriteConfirm.action.exportToImage.title\")}\n      actionLabel={t(\"overwriteConfirm.action.exportToImage.button\")}\n      onClick={() => {\n        actionManager.executeAction(actionChangeExportEmbedScene, \"ui\", true);\n        setAppState({ openDialog: \"imageExport\" });\n      }}\n    >\n      {t(\"overwriteConfirm.action.exportToImage.description\")}\n    </Action>\n  );\n};\n\nexport const SaveToDisk = () => {\n  const { t } = useI18n();\n  const actionManager = useExcalidrawActionManager();\n\n  return (\n    <Action\n      title={t(\"overwriteConfirm.action.saveToDisk.title\")}\n      actionLabel={t(\"overwriteConfirm.action.saveToDisk.button\")}\n      onClick={() => {\n        actionManager.executeAction(actionSaveFileToDisk, \"ui\");\n      }}\n    >\n      {t(\"overwriteConfirm.action.saveToDisk.description\")}\n    </Action>\n  );\n};\n\nconst Actions = Object.assign(\n  ({ children }: { children: React.ReactNode }) => {\n    return <div className=\"OverwriteConfirm__Actions\">{children}</div>;\n  },\n  {\n    ExportToImage,\n    SaveToDisk,\n  },\n);\n\nexport { Actions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}