{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === \"[::1]\" ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport const register = config => {\n  var _process$env$REACT_AP;\n  if ((process.env.NODE_ENV === \"production\" || ((_process$env$REACT_AP = process.env.REACT_APP_DEV_ENABLE_SW) === null || _process$env$REACT_AP === void 0 ? void 0 : _process$env$REACT_AP.toLowerCase()) === \"true\") && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const isWebexLP = window.location.pathname.startsWith(\"/webex\");\n      if (isWebexLP) {\n        unregister(() => {\n          window.location.reload();\n        });\n        return false;\n      }\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\nconst registerValidSW = (swUrl, config) => {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === \"installed\") {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n\n            console.info(\"New content is available and will be used when all tabs for this page are closed.\");\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n\n            console.info(\"Content is cached for offline use.\");\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error(\"Error during service worker registration:\", error);\n  });\n};\nconst checkValidServiceWorker = (swUrl, config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      \"Service-Worker\": \"script\"\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get(\"content-type\");\n    if (response.status === 404 || contentType != null && contentType.indexOf(\"javascript\") === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(error => {\n    console.info(\"No internet connection found. App is running in offline mode.\", error.message);\n  });\n};\nexport const unregister = callback => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      return registration.unregister();\n    }).then(() => {\n      callback === null || callback === void 0 ? void 0 : callback();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n};","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","_process$env$REACT_AP","process","env","NODE_ENV","REACT_APP_DEV_ENABLE_SW","toLowerCase","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","isWebexLP","pathname","startsWith","unregister","reload","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","info","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","message","callback"],"sources":["D:/project/excalidraw-cn/src/serviceWorkerRegistration.ts"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = (config?: Config) => {\n  if (\n    (process.env.NODE_ENV === \"production\" ||\n      process.env.REACT_APP_DEV_ENABLE_SW?.toLowerCase() === \"true\") &&\n    \"serviceWorker\" in navigator\n  ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const isWebexLP = window.location.pathname.startsWith(\"/webex\");\n      if (isWebexLP) {\n        unregister(() => {\n          window.location.reload();\n        });\n        return false;\n      }\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.info(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n\n              console.info(\n                \"New content is available and will be used when all tabs for this page are closed.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              console.info(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch((error) => {\n      console.info(\n        \"No internet connection found. App is running in offline mode.\",\n        error.message,\n      );\n    });\n};\n\nexport const unregister = (callback?: () => void) => {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        return registration.unregister();\n      })\n      .then(() => {\n        callback?.();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}