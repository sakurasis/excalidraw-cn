{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n// TODO: Implement different loggers for different environments\nvar global = getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\nvar Logger = /** @class */function () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n  return Logger;\n}();\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":{"version":3,"names":["consoleSandbox","getGlobalObject","global","PREFIX","Logger","_enabled","prototype","disable","enable","log","args","_i","arguments","length","console","join","warn","error","__SENTRY__","logger"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\logger.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,eAAe,QAAQ,QAAQ;AAExD;AACA,IAAMC,MAAM,GAAGD,eAAe,EAA0B;AAExD;AACA,IAAME,MAAM,GAAG,gBAAgB;AAE/B;AACA,IAAAC,MAAA;EAIE;EACA,SAAAA,OAAA;IACE,IAAI,CAACC,QAAQ,GAAG,KAAK;EACvB;EAEA;EACOD,MAAA,CAAAE,SAAA,CAAAC,OAAO,GAAd;IACE,IAAI,CAACF,QAAQ,GAAG,KAAK;EACvB,CAAC;EAED;EACOD,MAAA,CAAAE,SAAA,CAAAE,MAAM,GAAb;IACE,IAAI,CAACH,QAAQ,GAAG,IAAI;EACtB,CAAC;EAED;EACOD,MAAA,CAAAE,SAAA,CAAAG,GAAG,GAAV;IAAW,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACT,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAClB;;IAEFL,cAAc,CAAC;MACbE,MAAM,CAACY,OAAO,CAACL,GAAG,CAAIN,MAAM,eAAUO,IAAI,CAACK,IAAI,CAAC,GAAG,CAAG,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC;EAED;EACOX,MAAA,CAAAE,SAAA,CAAAU,IAAI,GAAX;IAAY,IAAAN,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACV,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAClB;;IAEFL,cAAc,CAAC;MACbE,MAAM,CAACY,OAAO,CAACE,IAAI,CAAIb,MAAM,gBAAWO,IAAI,CAACK,IAAI,CAAC,GAAG,CAAG,CAAC;IAC3D,CAAC,CAAC;EACJ,CAAC;EAED;EACOX,MAAA,CAAAE,SAAA,CAAAW,KAAK,GAAZ;IAAa,IAAAP,IAAA;SAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;MAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACX,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAClB;;IAEFL,cAAc,CAAC;MACbE,MAAM,CAACY,OAAO,CAACG,KAAK,CAAId,MAAM,iBAAYO,IAAI,CAACK,IAAI,CAAC,GAAG,CAAG,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC;EACH,OAAAX,MAAC;AAAD,CAAC,EAhDD;AAkDA;AACAF,MAAM,CAACgB,UAAU,GAAGhB,MAAM,CAACgB,UAAU,IAAI,EAAE;AAC3C,IAAMC,MAAM,GAAIjB,MAAM,CAACgB,UAAU,CAACC,MAAiB,KAAKjB,MAAM,CAACgB,UAAU,CAACC,MAAM,GAAG,IAAIf,MAAM,EAAE,CAAC;AAEhG,SAASe,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}