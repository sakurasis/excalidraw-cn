{"ast":null,"code":"import{useEffect}from\"react\";import{EVENT}from\"../constants\";export function useOutsideClick(ref,/** if performance is of concern, memoize the callback */callback,/**\n   * Optional callback which is called on every click.\n   *\n   * Should return `true` if click should be considered as inside the container,\n   * and `false` if it falls outside and should call the `callback`.\n   *\n   * Returning `true` overrides the default behavior and `callback` won't be\n   * called.\n   *\n   * Returning `undefined` will fallback to the default behavior.\n   */isInside){useEffect(function(){function onOutsideClick(event){var _event=event;if(!ref.current){return;}var isInsideOverride=isInside===null||isInside===void 0?void 0:isInside(_event,ref.current);if(isInsideOverride===true){return;}else if(isInsideOverride===false){return callback(_event);}// clicked element is in the descenendant of the target container\nif(ref.current.contains(_event.target)||// target is detached from DOM (happens when the element is removed\n// on a pointerup event fired *before* this handler's pointerup is\n// dispatched)\n!document.documentElement.contains(_event.target)){return;}var isClickOnRadixPortal=_event.target.closest(\"[data-radix-portal]\")||// when radix popup is in \"modal\" mode, it disables pointer events on\n// the `body` element, so the target element is going to be the `html`\n// (note: this won't work if we selectively re-enable pointer events on\n// specific elements as we do with navbar or excalidraw UI elements)\n_event.target===document.documentElement&&document.body.style.pointerEvents===\"none\";// if clicking on radix portal, assume it's a popup that\n// should be considered as part of the UI. Obviously this is a terrible\n// hack you can end up click on radix popups that outside the tree,\n// but it works for most cases and the downside is minimal for now\nif(isClickOnRadixPortal){return;}// clicking on a container that ignores outside clicks\nif(_event.target.closest(\"[data-prevent-outside-click]\")){return;}callback(_event);}// note: don't use `click` because it often reports incorrect `event.target`\ndocument.addEventListener(EVENT.POINTER_DOWN,onOutsideClick);document.addEventListener(EVENT.TOUCH_START,onOutsideClick);return function(){document.removeEventListener(EVENT.POINTER_DOWN,onOutsideClick);document.removeEventListener(EVENT.TOUCH_START,onOutsideClick);};},[ref,callback,isInside]);}","map":{"version":3,"names":["useEffect","EVENT","useOutsideClick","ref","callback","isInside","onOutsideClick","event","_event","current","isInsideOverride","contains","target","document","documentElement","isClickOnRadixPortal","closest","body","style","pointerEvents","addEventListener","POINTER_DOWN","TOUCH_START","removeEventListener"],"sources":["D:/project/excalidraw-cn/src/hooks/useOutsideClick.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { EVENT } from \"../constants\";\n\nexport function useOutsideClick<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  /** if performance is of concern, memoize the callback */\n  callback: (event: Event) => void,\n  /**\n   * Optional callback which is called on every click.\n   *\n   * Should return `true` if click should be considered as inside the container,\n   * and `false` if it falls outside and should call the `callback`.\n   *\n   * Returning `true` overrides the default behavior and `callback` won't be\n   * called.\n   *\n   * Returning `undefined` will fallback to the default behavior.\n   */\n  isInside?: (\n    event: Event & { target: HTMLElement },\n    /** the element of the passed ref */\n    container: T,\n  ) => boolean | undefined,\n) {\n  useEffect(() => {\n    function onOutsideClick(event: Event) {\n      const _event = event as Event & { target: T };\n\n      if (!ref.current) {\n        return;\n      }\n\n      const isInsideOverride = isInside?.(_event, ref.current);\n\n      if (isInsideOverride === true) {\n        return;\n      } else if (isInsideOverride === false) {\n        return callback(_event);\n      }\n\n      // clicked element is in the descenendant of the target container\n      if (\n        ref.current.contains(_event.target) ||\n        // target is detached from DOM (happens when the element is removed\n        // on a pointerup event fired *before* this handler's pointerup is\n        // dispatched)\n        !document.documentElement.contains(_event.target)\n      ) {\n        return;\n      }\n\n      const isClickOnRadixPortal =\n        _event.target.closest(\"[data-radix-portal]\") ||\n        // when radix popup is in \"modal\" mode, it disables pointer events on\n        // the `body` element, so the target element is going to be the `html`\n        // (note: this won't work if we selectively re-enable pointer events on\n        // specific elements as we do with navbar or excalidraw UI elements)\n        (_event.target === document.documentElement &&\n          document.body.style.pointerEvents === \"none\");\n\n      // if clicking on radix portal, assume it's a popup that\n      // should be considered as part of the UI. Obviously this is a terrible\n      // hack you can end up click on radix popups that outside the tree,\n      // but it works for most cases and the downside is minimal for now\n      if (isClickOnRadixPortal) {\n        return;\n      }\n\n      // clicking on a container that ignores outside clicks\n      if (_event.target.closest(\"[data-prevent-outside-click]\")) {\n        return;\n      }\n\n      callback(_event);\n    }\n\n    // note: don't use `click` because it often reports incorrect `event.target`\n    document.addEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n    document.addEventListener(EVENT.TOUCH_START, onOutsideClick);\n\n    return () => {\n      document.removeEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n      document.removeEventListener(EVENT.TOUCH_START, onOutsideClick);\n    };\n  }, [ref, callback, isInside]);\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,KAAK,KAAQ,cAAc,CAEpC,MAAO,SAAS,CAAAC,eAAeA,CAC7BC,GAAuB,CACvB,yDACAC,QAAgC,CAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KACEC,QAIwB,CACxB,CACAL,SAAS,CAAC,UAAM,CACd,QAAS,CAAAM,cAAcA,CAACC,KAAY,CAAE,CACpC,GAAM,CAAAC,MAAM,CAAGD,KAA8B,CAE7C,GAAI,CAACJ,GAAG,CAACM,OAAO,CAAE,CAChB,OACF,CAEA,GAAM,CAAAC,gBAAgB,CAAGL,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAGG,MAAM,CAAEL,GAAG,CAACM,OAAO,CAAC,CAExD,GAAIC,gBAAgB,GAAK,IAAI,CAAE,CAC7B,OACF,CAAC,IAAM,IAAIA,gBAAgB,GAAK,KAAK,CAAE,CACrC,MAAO,CAAAN,QAAQ,CAACI,MAAM,CAAC,CACzB,CAEA;AACA,GACEL,GAAG,CAACM,OAAO,CAACE,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAC,EACnC;AACA;AACA;AACA,CAACC,QAAQ,CAACC,eAAe,CAACH,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAC,CACjD,CACA,OACF,CAEA,GAAM,CAAAG,oBAAoB,CACxBP,MAAM,CAACI,MAAM,CAACI,OAAO,CAAC,qBAAqB,CAAC,EAC5C;AACA;AACA;AACA;AACCR,MAAM,CAACI,MAAM,GAAKC,QAAQ,CAACC,eAAe,EACzCD,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,aAAa,GAAK,MAAO,CAEjD;AACA;AACA;AACA;AACA,GAAIJ,oBAAoB,CAAE,CACxB,OACF,CAEA;AACA,GAAIP,MAAM,CAACI,MAAM,CAACI,OAAO,CAAC,8BAA8B,CAAC,CAAE,CACzD,OACF,CAEAZ,QAAQ,CAACI,MAAM,CAAC,CAClB,CAEA;AACAK,QAAQ,CAACO,gBAAgB,CAACnB,KAAK,CAACoB,YAAY,CAAEf,cAAc,CAAC,CAC7DO,QAAQ,CAACO,gBAAgB,CAACnB,KAAK,CAACqB,WAAW,CAAEhB,cAAc,CAAC,CAE5D,MAAO,WAAM,CACXO,QAAQ,CAACU,mBAAmB,CAACtB,KAAK,CAACoB,YAAY,CAAEf,cAAc,CAAC,CAChEO,QAAQ,CAACU,mBAAmB,CAACtB,KAAK,CAACqB,WAAW,CAAEhB,cAAc,CAAC,CACjE,CAAC,CACH,CAAC,CAAE,CAACH,GAAG,CAAEC,QAAQ,CAAEC,QAAQ,CAAC,CAAC,CAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}