{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\UserList.tsx\";\nimport \"./UserList.scss\";\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useExcalidrawActionManager } from \"./App\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserList = _ref => {\n  let {\n    className,\n    mobile,\n    collaborators\n  } = _ref;\n  const actionManager = useExcalidrawActionManager();\n  const uniqueCollaborators = new Map();\n  collaborators.forEach((collaborator, socketId) => {\n    uniqueCollaborators.set(\n    // filter on user id, else fall back on unique socketId\n    collaborator.id || socketId, collaborator);\n  });\n  const avatars = uniqueCollaborators.size > 0 && Array.from(uniqueCollaborators).filter(_ref2 => {\n    let [_, client] = _ref2;\n    return Object.keys(client).length !== 0;\n  }).map(_ref3 => {\n    let [clientId, collaborator] = _ref3;\n    const avatarJSX = actionManager.renderAction(\"goToCollaborator\", [clientId, collaborator]);\n    return mobile ? /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: collaborator.username || \"Unknown user\",\n      children: avatarJSX\n    }, clientId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: avatarJSX\n    }, clientId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(\"UserList\", className, {\n      UserList_mobile: mobile\n    }),\n    children: avatars\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","clsx","Tooltip","useExcalidrawActionManager","jsxDEV","_jsxDEV","UserList","_ref","className","mobile","collaborators","actionManager","uniqueCollaborators","Map","forEach","collaborator","socketId","set","id","avatars","size","Array","from","filter","_ref2","_","client","Object","keys","length","map","_ref3","clientId","avatarJSX","renderAction","label","username","children","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","UserList_mobile"],"sources":["D:/project/excalidraw-cn/src/components/UserList.tsx"],"sourcesContent":["import \"./UserList.scss\";\n\nimport React from \"react\";\nimport clsx from \"clsx\";\nimport { AppState, Collaborator } from \"../types\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useExcalidrawActionManager } from \"./App\";\n\nexport const UserList: React.FC<{\n  className?: string;\n  mobile?: boolean;\n  collaborators: AppState[\"collaborators\"];\n}> = ({ className, mobile, collaborators }) => {\n  const actionManager = useExcalidrawActionManager();\n\n  const uniqueCollaborators = new Map<string, Collaborator>();\n  collaborators.forEach((collaborator, socketId) => {\n    uniqueCollaborators.set(\n      // filter on user id, else fall back on unique socketId\n      collaborator.id || socketId,\n      collaborator,\n    );\n  });\n\n  const avatars =\n    uniqueCollaborators.size > 0 &&\n    Array.from(uniqueCollaborators)\n      .filter(([_, client]) => Object.keys(client).length !== 0)\n      .map(([clientId, collaborator]) => {\n        const avatarJSX = actionManager.renderAction(\"goToCollaborator\", [\n          clientId,\n          collaborator,\n        ]);\n\n        return mobile ? (\n          <Tooltip\n            label={collaborator.username || \"Unknown user\"}\n            key={clientId}\n          >\n            {avatarJSX}\n          </Tooltip>\n        ) : (\n          <React.Fragment key={clientId}>{avatarJSX}</React.Fragment>\n        );\n      });\n\n  return (\n    <div className={clsx(\"UserList\", className, { UserList_mobile: mobile })}>\n      {avatars}\n    </div>\n  );\n};\n"],"mappings":";AAAA,OAAO,iBAAiB;AAExB,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,0BAA0B,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,OAAO,MAAMC,QAIX,GAAGC,IAAA,IAA0C;EAAA,IAAzC;IAAEC,SAAS;IAAEC,MAAM;IAAEC;EAAc,CAAC,GAAAH,IAAA;EACxC,MAAMI,aAAa,GAAGR,0BAA0B,EAAE;EAElD,MAAMS,mBAAmB,GAAG,IAAIC,GAAG,EAAwB;EAC3DH,aAAa,CAACI,OAAO,CAAC,CAACC,YAAY,EAAEC,QAAQ,KAAK;IAChDJ,mBAAmB,CAACK,GAAG;IACrB;IACAF,YAAY,CAACG,EAAE,IAAIF,QAAQ,EAC3BD,YAAY,CACb;EACH,CAAC,CAAC;EAEF,MAAMI,OAAO,GACXP,mBAAmB,CAACQ,IAAI,GAAG,CAAC,IAC5BC,KAAK,CAACC,IAAI,CAACV,mBAAmB,CAAC,CAC5BW,MAAM,CAACC,KAAA;IAAA,IAAC,CAACC,CAAC,EAAEC,MAAM,CAAC,GAAAF,KAAA;IAAA,OAAKG,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,KAAK,CAAC;EAAA,EAAC,CACzDC,GAAG,CAACC,KAAA,IAA8B;IAAA,IAA7B,CAACC,QAAQ,EAAEjB,YAAY,CAAC,GAAAgB,KAAA;IAC5B,MAAME,SAAS,GAAGtB,aAAa,CAACuB,YAAY,CAAC,kBAAkB,EAAE,CAC/DF,QAAQ,EACRjB,YAAY,CACb,CAAC;IAEF,OAAON,MAAM,gBACXJ,OAAA,CAACH,OAAO;MACNiC,KAAK,EAAEpB,YAAY,CAACqB,QAAQ,IAAI,cAAe;MAAAC,QAAA,EAG9CJ;IAAS,GAFLD,QAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAGL,gBAEVpC,OAAA,CAACL,KAAK,CAAC0C,QAAQ;MAAAL,QAAA,EAAiBJ;IAAS,GAApBD,QAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC9B;EACH,CAAC,CAAC;EAEN,oBACEpC,OAAA;IAAKG,SAAS,EAAEP,IAAI,CAAC,UAAU,EAAEO,SAAS,EAAE;MAAEmC,eAAe,EAAElC;IAAO,CAAC,CAAE;IAAA4B,QAAA,EACtElB;EAAO;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACJ;AAEV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}