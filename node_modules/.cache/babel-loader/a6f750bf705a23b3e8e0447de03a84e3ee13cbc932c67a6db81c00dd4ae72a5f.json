{"ast":null,"code":"import*as GA from\"./ga\";import*as GADirection from\"./gadirections\";/**\n * TODO: docs\n */export var rotation=function rotation(pivot,angle){return GA.add(GA.mul(pivot,Math.sin(angle/2)),Math.cos(angle/2));};export var translation=function translation(direction){return[1,0,0,0,-(0.5*direction[5]),0.5*direction[4],0,0];};export var translationOrthogonal=function translationOrthogonal(direction,distance){var scale=0.5*distance;return[1,0,0,0,scale*direction[4],scale*direction[5],0,0];};export var translationAlong=function translationAlong(line,distance){return GA.add(GA.mul(GADirection.orthogonalToLine(line),0.5*distance),1);};export var compose=function compose(motor1,motor2){return GA.mul(motor2,motor1);};export var apply=function apply(motor,nvector){return GA.normalized(GA.mul(GA.mul(motor,nvector),GA.reverse(motor)));};","map":{"version":3,"names":["GA","GADirection","rotation","pivot","angle","add","mul","Math","sin","cos","translation","direction","translationOrthogonal","distance","scale","translationAlong","line","orthogonalToLine","compose","motor1","motor2","apply","motor","nvector","normalized","reverse"],"sources":["D:/project/excalidraw-cn/src/gatransforms.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Direction, Point, Transform } from \"./ga\";\nimport * as GADirection from \"./gadirections\";\n\n/**\n * TODO: docs\n */\n\nexport const rotation = (pivot: Point, angle: number): Transform =>\n  GA.add(GA.mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));\n\nexport const translation = (direction: Direction): Transform => [\n  1,\n  0,\n  0,\n  0,\n  -(0.5 * direction[5]),\n  0.5 * direction[4],\n  0,\n  0,\n];\n\nexport const translationOrthogonal = (\n  direction: Direction,\n  distance: number,\n): Transform => {\n  const scale = 0.5 * distance;\n  return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];\n};\n\nexport const translationAlong = (line: Line, distance: number): Transform =>\n  GA.add(GA.mul(GADirection.orthogonalToLine(line), 0.5 * distance), 1);\n\nexport const compose = (motor1: Transform, motor2: Transform): Transform =>\n  GA.mul(motor2, motor1);\n\nexport const apply = (\n  motor: Transform,\n  nvector: Point | Direction | Line,\n): Point | Direction | Line =>\n  GA.normalized(GA.mul(GA.mul(motor, nvector), GA.reverse(motor)));\n"],"mappings":"AAAA,MAAO,GAAK,CAAAA,EAAE,KAAM,MAAM,CAE1B,MAAO,GAAK,CAAAC,WAAW,KAAM,gBAAgB,CAE7C;AACA;AACA,GAEA,MAAO,IAAM,CAAAC,QAAQ,CAAG,QAAX,CAAAA,QAAQA,CAAIC,KAAY,CAAEC,KAAa,QAClD,CAAAJ,EAAE,CAACK,GAAG,CAACL,EAAE,CAACM,GAAG,CAACH,KAAK,CAAEI,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAG,CAAC,CAAC,CAAC,CAAEG,IAAI,CAACE,GAAG,CAACL,KAAK,CAAG,CAAC,CAAC,CAAC,GAEjE,MAAO,IAAM,CAAAM,WAAW,CAAG,QAAd,CAAAA,WAAWA,CAAIC,SAAoB,QAAgB,CAC9D,CAAC,CACD,CAAC,CACD,CAAC,CACD,CAAC,CACD,EAAE,GAAG,CAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,CACrB,GAAG,CAAGA,SAAS,CAAC,CAAC,CAAC,CAClB,CAAC,CACD,CAAC,CACF,GAED,MAAO,IAAM,CAAAC,qBAAqB,CAAG,QAAxB,CAAAA,qBAAqBA,CAChCD,SAAoB,CACpBE,QAAgB,CACF,CACd,GAAM,CAAAC,KAAK,CAAG,GAAG,CAAGD,QAAQ,CAC5B,MAAO,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAEC,KAAK,CAAGH,SAAS,CAAC,CAAC,CAAC,CAAEG,KAAK,CAAGH,SAAS,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAC,CACvE,CAAC,CAED,MAAO,IAAM,CAAAI,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,IAAU,CAAEH,QAAgB,QAC3D,CAAAb,EAAE,CAACK,GAAG,CAACL,EAAE,CAACM,GAAG,CAACL,WAAW,CAACgB,gBAAgB,CAACD,IAAI,CAAC,CAAE,GAAG,CAAGH,QAAQ,CAAC,CAAE,CAAC,CAAC,GAEvE,MAAO,IAAM,CAAAK,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAIC,MAAiB,CAAEC,MAAiB,QAC1D,CAAApB,EAAE,CAACM,GAAG,CAACc,MAAM,CAAED,MAAM,CAAC,GAExB,MAAO,IAAM,CAAAE,KAAK,CAAG,QAAR,CAAAA,KAAKA,CAChBC,KAAgB,CAChBC,OAAiC,QAEjC,CAAAvB,EAAE,CAACwB,UAAU,CAACxB,EAAE,CAACM,GAAG,CAACN,EAAE,CAACM,GAAG,CAACgB,KAAK,CAAEC,OAAO,CAAC,CAAEvB,EAAE,CAACyB,OAAO,CAACH,KAAK,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}