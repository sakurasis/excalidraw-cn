{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\actions\\\\actionProperties.tsx\";\nimport { DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE, DEFAULT_ELEMENT_BACKGROUND_PICKS, DEFAULT_ELEMENT_STROKE_COLOR_PALETTE, DEFAULT_ELEMENT_STROKE_PICKS } from \"../colors\";\nimport { trackEvent } from \"../analytics\";\nimport { ButtonIconSelect } from \"../components/ButtonIconSelect\";\nimport { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport { IconPicker } from \"../components/IconPicker\";\n// TODO barnabasmolnar/editor-redesign\n// TextAlignTopIcon, TextAlignBottomIcon,TextAlignMiddleIcon,\n// ArrowHead icons\nimport { ArrowheadArrowIcon, ArrowheadBarIcon, ArrowheadDotIcon, ArrowheadTriangleIcon, ArrowheadNoneIcon, StrokeStyleDashedIcon, StrokeStyleDottedIcon, TextAlignTopIcon, TextAlignBottomIcon, TextAlignMiddleIcon, FillHachureIcon, FillCrossHatchIcon, FillSolidIcon, SloppinessArchitectIcon, SloppinessArtistIcon, SloppinessCartoonistIcon, StrokeWidthBaseIcon, StrokeWidthBoldIcon, StrokeWidthExtraBoldIcon, FontSizeSmallIcon, FontSizeMediumIcon, FontSizeLargeIcon, FontSizeExtraLargeIcon, EdgeSharpIcon, EdgeRoundIcon, FreedrawIcon, FontFamilyNormalIcon, FontFamilyCodeIcon, TextAlignLeftIcon, TextAlignCenterIcon, TextAlignRightIcon, FillZigZagIcon } from \"../components/icons\";\nimport { DEFAULT_FONT_FAMILY, DEFAULT_FONT_SIZE, FONT_FAMILY, ROUNDNESS, VERTICAL_ALIGN } from \"../constants\";\nimport { getNonDeletedElements, isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport { getBoundTextElement, getContainerElement, getDefaultLineHeight } from \"../element/textElement\";\nimport { isBoundToContainer, isLinearElement, isUsingAdaptiveRadius } from \"../element/typeChecks\";\nimport { getLanguage, t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { randomInteger } from \"../random\";\nimport { canChangeRoundness, canHaveArrowheads, getCommonAttributeOfSelectedElements, getSelectedElements, getTargetElements, isSomeElementSelected } from \"../scene\";\nimport { hasStrokeColor } from \"../scene/comparisons\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FONT_SIZE_RELATIVE_INCREASE_STEP = 0.1;\nconst changeProperty = function (elements, appState, callback) {\n  let includeBoundText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const selectedElementIds = arrayToMap(getSelectedElements(elements, appState, {\n    includeBoundTextElement: includeBoundText\n  }));\n  return elements.map(element => {\n    var _appState$editingElem;\n    if (selectedElementIds.get(element.id) || element.id === ((_appState$editingElem = appState.editingElement) === null || _appState$editingElem === void 0 ? void 0 : _appState$editingElem.id)) {\n      return callback(element);\n    }\n    return element;\n  });\n};\nconst getFormValue = function (elements, appState, getAttribute, defaultValue) {\n  var _ref, _ref2;\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (_ref = (_ref2 = editingElement && getAttribute(editingElement)) !== null && _ref2 !== void 0 ? _ref2 : isSomeElementSelected(nonDeletedElements, appState) ? getCommonAttributeOfSelectedElements(nonDeletedElements, appState, getAttribute) : defaultValue) !== null && _ref !== void 0 ? _ref : defaultValue;\n};\nconst offsetElementAfterFontResize = (prevElement, nextElement) => {\n  if (isBoundToContainer(nextElement)) {\n    return nextElement;\n  }\n  return mutateElement(nextElement, {\n    x: prevElement.textAlign === \"left\" ? prevElement.x : prevElement.x + (prevElement.width - nextElement.width) / (prevElement.textAlign === \"center\" ? 2 : 1),\n    // centering vertically is non-standard, but for Excalidraw I think\n    // it makes sense\n    y: prevElement.y + (prevElement.height - nextElement.height) / 2\n  }, false);\n};\nconst changeFontSize = (elements, appState, getNewFontSize, fallbackValue) => {\n  const newFontSizes = new Set();\n  return {\n    elements: changeProperty(elements, appState, oldElement => {\n      if (isTextElement(oldElement)) {\n        const newFontSize = getNewFontSize(oldElement);\n        newFontSizes.add(newFontSize);\n        let newElement = newElementWith(oldElement, {\n          fontSize: newFontSize\n        });\n        redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n        newElement = offsetElementAfterFontResize(oldElement, newElement);\n        return newElement;\n      }\n      return oldElement;\n    }, true),\n    appState: {\n      ...appState,\n      // update state only if we've set all select text elements to\n      // the same font size\n      currentItemFontSize: newFontSizes.size === 1 ? [...newFontSizes][0] : fallbackValue !== null && fallbackValue !== void 0 ? fallbackValue : appState.currentItemFontSize\n    },\n    commitToHistory: true\n  };\n};\n\n// -----------------------------------------------------------------------------\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemStrokeColor && {\n        elements: changeProperty(elements, appState, el => {\n          return hasStrokeColor(el.type) ? newElementWith(el, {\n            strokeColor: value.currentItemStrokeColor\n          }) : el;\n        }, true)\n      }),\n      appState: {\n        ...appState,\n        ...value\n      },\n      commitToHistory: !!value.currentItemStrokeColor\n    };\n  },\n  PanelComponent: _ref3 => {\n    let {\n      elements,\n      appState,\n      updateData,\n      appProps\n    } = _ref3;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        \"aria-hidden\": \"true\",\n        children: t(\"labels.stroke\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n        topPicks: DEFAULT_ELEMENT_STROKE_PICKS,\n        palette: DEFAULT_ELEMENT_STROKE_COLOR_PALETTE,\n        type: \"elementStroke\",\n        label: t(\"labels.stroke\"),\n        color: getFormValue(elements, appState, element => element.strokeColor, appState.currentItemStrokeColor),\n        onChange: color => updateData({\n          currentItemStrokeColor: color\n        }),\n        elements: elements,\n        appState: appState,\n        updateData: updateData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n});\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemBackgroundColor && {\n        elements: changeProperty(elements, appState, el => newElementWith(el, {\n          backgroundColor: value.currentItemBackgroundColor\n        }))\n      }),\n      appState: {\n        ...appState,\n        ...value\n      },\n      commitToHistory: !!value.currentItemBackgroundColor\n    };\n  },\n  PanelComponent: _ref4 => {\n    let {\n      elements,\n      appState,\n      updateData,\n      appProps\n    } = _ref4;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        \"aria-hidden\": \"true\",\n        children: t(\"labels.background\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n        topPicks: DEFAULT_ELEMENT_BACKGROUND_PICKS,\n        palette: DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE,\n        type: \"elementBackground\",\n        label: t(\"labels.background\"),\n        color: getFormValue(elements, appState, element => element.backgroundColor, appState.currentItemBackgroundColor),\n        onChange: color => updateData({\n          currentItemBackgroundColor: color\n        }),\n        elements: elements,\n        appState: appState,\n        updateData: updateData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n});\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    trackEvent(\"element\", \"changeFillStyle\", `${value} (${app.device.isMobile ? \"mobile\" : \"desktop\"})`);\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        fillStyle: value\n      })),\n      appState: {\n        ...appState,\n        currentItemFillStyle: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref5 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref5;\n    const selectedElements = getSelectedElements(elements, appState);\n    const allElementsZigZag = selectedElements.length > 0 && selectedElements.every(el => el.fillStyle === \"zigzag\");\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.fill\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        type: \"button\",\n        options: [{\n          value: \"hachure\",\n          text: `${allElementsZigZag ? t(\"labels.zigzag\") : t(\"labels.hachure\")} (${getShortcutKey(\"Alt-Click\")})`,\n          icon: allElementsZigZag ? FillZigZagIcon : FillHachureIcon,\n          active: allElementsZigZag ? true : undefined\n        }, {\n          value: \"cross-hatch\",\n          text: t(\"labels.crossHatch\"),\n          icon: FillCrossHatchIcon\n        }, {\n          value: \"solid\",\n          text: t(\"labels.solid\"),\n          icon: FillSolidIcon\n        }],\n        value: getFormValue(elements, appState, element => element.fillStyle, appState.currentItemFillStyle),\n        onClick: (value, event) => {\n          const nextValue = event.altKey && value === \"hachure\" && selectedElements.every(el => el.fillStyle === \"hachure\") ? \"zigzag\" : value;\n          updateData(nextValue);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeWidth: value\n      })),\n      appState: {\n        ...appState,\n        currentItemStrokeWidth: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref6 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref6;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.strokeWidth\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"stroke-width\",\n        options: [{\n          value: 1,\n          text: t(\"labels.thin\"),\n          icon: StrokeWidthBaseIcon\n        }, {\n          value: 2,\n          text: t(\"labels.bold\"),\n          icon: StrokeWidthBoldIcon\n        }, {\n          value: 4,\n          text: t(\"labels.extraBold\"),\n          icon: StrokeWidthExtraBoldIcon\n        }],\n        value: getFormValue(elements, appState, element => element.strokeWidth, appState.currentItemStrokeWidth),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        seed: randomInteger(),\n        roughness: value\n      })),\n      appState: {\n        ...appState,\n        currentItemRoughness: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref7 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref7;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.sloppiness\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"sloppiness\",\n        options: [{\n          value: 0,\n          text: t(\"labels.architect\"),\n          icon: SloppinessArchitectIcon\n        }, {\n          value: 1,\n          text: t(\"labels.artist\"),\n          icon: SloppinessArtistIcon\n        }, {\n          value: 2,\n          text: t(\"labels.cartoonist\"),\n          icon: SloppinessCartoonistIcon\n        }],\n        value: getFormValue(elements, appState, element => element.roughness, appState.currentItemRoughness),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeStrokeStyle = register({\n  name: \"changeStrokeStyle\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeStyle: value\n      })),\n      appState: {\n        ...appState,\n        currentItemStrokeStyle: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref8 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref8;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.strokeStyle\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"strokeStyle\",\n        options: [{\n          value: \"solid\",\n          text: t(\"labels.strokeStyle_solid\"),\n          icon: StrokeWidthBaseIcon\n        }, {\n          value: \"dashed\",\n          text: t(\"labels.strokeStyle_dashed\"),\n          icon: StrokeStyleDashedIcon\n        }, {\n          value: \"dotted\",\n          text: t(\"labels.strokeStyle_dotted\"),\n          icon: StrokeStyleDottedIcon\n        }],\n        value: getFormValue(elements, appState, element => element.strokeStyle, appState.currentItemStrokeStyle),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        opacity: value\n      }), true),\n      appState: {\n        ...appState,\n        currentItemOpacity: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref9 => {\n    var _getFormValue;\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref9;\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"control-label\",\n      children: [t(\"labels.opacity\"), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        step: \"10\",\n        onChange: event => updateData(+event.target.value),\n        value: (_getFormValue = getFormValue(elements, appState, element => element.opacity, appState.currentItemOpacity)) !== null && _getFormValue !== void 0 ? _getFormValue : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, () => value, value);\n  },\n  PanelComponent: _ref10 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref10;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.fontSize\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"font-size\",\n        options: [{\n          value: 16,\n          text: t(\"labels.small\"),\n          icon: FontSizeSmallIcon,\n          testId: \"fontSize-small\"\n        }, {\n          value: 20,\n          text: t(\"labels.medium\"),\n          icon: FontSizeMediumIcon,\n          testId: \"fontSize-medium\"\n        }, {\n          value: 28,\n          text: t(\"labels.large\"),\n          icon: FontSizeLargeIcon,\n          testId: \"fontSize-large\"\n        }, {\n          value: 36,\n          text: t(\"labels.veryLarge\"),\n          icon: FontSizeExtraLargeIcon,\n          testId: \"fontSize-veryLarge\"\n        }],\n        value: getFormValue(elements, appState, element => {\n          if (isTextElement(element)) {\n            return element.fontSize;\n          }\n          const boundTextElement = getBoundTextElement(element);\n          if (boundTextElement) {\n            return boundTextElement.fontSize;\n          }\n          return null;\n        }, appState.currentItemFontSize || DEFAULT_FONT_SIZE),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionDecreaseFontSize = register({\n  name: \"decreaseFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, element => Math.round(\n    // get previous value before relative increase (doesn't work fully\n    // due to rounding and float precision issues)\n    1 / (1 + FONT_SIZE_RELATIVE_INCREASE_STEP) * element.fontSize));\n  },\n  keyTest: event => {\n    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && (\n    // KEYS.COMMA needed for MacOS\n    event.key === KEYS.CHEVRON_LEFT || event.key === KEYS.COMMA);\n  }\n});\nexport const actionIncreaseFontSize = register({\n  name: \"increaseFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, element => Math.round(element.fontSize * (1 + FONT_SIZE_RELATIVE_INCREASE_STEP)));\n  },\n  keyTest: event => {\n    return event[KEYS.CTRL_OR_CMD] && event.shiftKey && (\n    // KEYS.PERIOD needed for MacOS\n    event.key === KEYS.CHEVRON_RIGHT || event.key === KEYS.PERIOD);\n  }\n});\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, oldElement => {\n        if (isTextElement(oldElement)) {\n          const newElement = newElementWith(oldElement, {\n            fontFamily: value,\n            lineHeight: getDefaultLineHeight(value)\n          });\n          redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n          return newElement;\n        }\n        return oldElement;\n      }, true),\n      appState: {\n        ...appState,\n        currentItemFontFamily: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref11 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref11;\n    const options = [{\n      value: FONT_FAMILY.Handlefront,\n      text: t(\"labels.handDrawn\"),\n      icon: FreedrawIcon\n    }, {\n      value: FONT_FAMILY.Helvetica,\n      text: t(\"labels.normal\"),\n      icon: FontFamilyNormalIcon\n    }, {\n      value: FONT_FAMILY.Cascadia,\n      text: t(\"labels.code\"),\n      icon: FontFamilyCodeIcon\n    }];\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.fontFamily\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"font-family\",\n        options: options,\n        value: getFormValue(elements, appState, element => {\n          if (isTextElement(element)) {\n            return element.fontFamily;\n          }\n          const boundTextElement = getBoundTextElement(element);\n          if (boundTextElement) {\n            return boundTextElement.fontFamily;\n          }\n          return null;\n        }, appState.currentItemFontFamily || DEFAULT_FONT_FAMILY),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, oldElement => {\n        if (isTextElement(oldElement)) {\n          const newElement = newElementWith(oldElement, {\n            textAlign: value\n          });\n          redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n          return newElement;\n        }\n        return oldElement;\n      }, true),\n      appState: {\n        ...appState,\n        currentItemTextAlign: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref12 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref12;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.textAlign\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 773,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"text-align\",\n        options: [{\n          value: \"left\",\n          text: t(\"labels.left\"),\n          icon: TextAlignLeftIcon,\n          testId: \"align-left\"\n        }, {\n          value: \"center\",\n          text: t(\"labels.center\"),\n          icon: TextAlignCenterIcon,\n          testId: \"align-horizontal-center\"\n        }, {\n          value: \"right\",\n          text: t(\"labels.right\"),\n          icon: TextAlignRightIcon,\n          testId: \"align-right\"\n        }],\n        value: getFormValue(elements, appState, element => {\n          if (isTextElement(element)) {\n            return element.textAlign;\n          }\n          const boundTextElement = getBoundTextElement(element);\n          if (boundTextElement) {\n            return boundTextElement.textAlign;\n          }\n          return null;\n        }, appState.currentItemTextAlign),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeVerticalAlign = register({\n  name: \"changeVerticalAlign\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, oldElement => {\n        if (isTextElement(oldElement)) {\n          const newElement = newElementWith(oldElement, {\n            verticalAlign: value\n          });\n          redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n          return newElement;\n        }\n        return oldElement;\n      }, true),\n      appState: {\n        ...appState\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref13 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref13;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"text-align\",\n        options: [{\n          value: VERTICAL_ALIGN.TOP,\n          text: t(\"labels.alignTop\"),\n          icon: /*#__PURE__*/_jsxDEV(TextAlignTopIcon, {\n            theme: appState.theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 856,\n            columnNumber: 21\n          }, this),\n          testId: \"align-top\"\n        }, {\n          value: VERTICAL_ALIGN.MIDDLE,\n          text: t(\"labels.centerVertically\"),\n          icon: /*#__PURE__*/_jsxDEV(TextAlignMiddleIcon, {\n            theme: appState.theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 21\n          }, this),\n          testId: \"align-middle\"\n        }, {\n          value: VERTICAL_ALIGN.BOTTOM,\n          text: t(\"labels.alignBottom\"),\n          icon: /*#__PURE__*/_jsxDEV(TextAlignBottomIcon, {\n            theme: appState.theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 868,\n            columnNumber: 21\n          }, this),\n          testId: \"align-bottom\"\n        }],\n        value: getFormValue(elements, appState, element => {\n          if (isTextElement(element) && element.containerId) {\n            return element.verticalAlign;\n          }\n          const boundTextElement = getBoundTextElement(element);\n          if (boundTextElement) {\n            return boundTextElement.verticalAlign;\n          }\n          return null;\n        }, VERTICAL_ALIGN.MIDDLE),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 849,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeRoundness = register({\n  name: \"changeRoundness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        roundness: value === \"round\" ? {\n          type: isUsingAdaptiveRadius(el.type) ? ROUNDNESS.ADAPTIVE_RADIUS : ROUNDNESS.PROPORTIONAL_RADIUS\n        } : null\n      })),\n      appState: {\n        ...appState,\n        currentItemRoundness: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref14 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref14;\n    const targetElements = getTargetElements(getNonDeletedElements(elements), appState);\n    const hasLegacyRoundness = targetElements.some(el => {\n      var _el$roundness;\n      return ((_el$roundness = el.roundness) === null || _el$roundness === void 0 ? void 0 : _el$roundness.type) === ROUNDNESS.LEGACY;\n    });\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.edges\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n        group: \"edges\",\n        options: [{\n          value: \"sharp\",\n          text: t(\"labels.sharp\"),\n          icon: EdgeSharpIcon\n        }, {\n          value: \"round\",\n          text: t(\"labels.round\"),\n          icon: EdgeRoundIcon\n        }],\n        value: getFormValue(elements, appState, element => hasLegacyRoundness ? null : element.roundness ? \"round\" : \"sharp\", canChangeRoundness(appState.activeTool.type) && appState.currentItemRoundness || null),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 931,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeArrowhead = register({\n  name: \"changeArrowhead\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isLinearElement(el)) {\n          const {\n            position,\n            type\n          } = value;\n          if (position === \"start\") {\n            const element = newElementWith(el, {\n              startArrowhead: type\n            });\n            return element;\n          } else if (position === \"end\") {\n            const element = newElementWith(el, {\n              endArrowhead: type\n            });\n            return element;\n          }\n        }\n        return el;\n      }),\n      appState: {\n        ...appState,\n        [value.position === \"start\" ? \"currentItemStartArrowhead\" : \"currentItemEndArrowhead\"]: value.type\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _ref15 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref15;\n    const isRTL = getLanguage().rtl;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.arrowheads\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"iconSelectList buttonList\",\n        children: [/*#__PURE__*/_jsxDEV(IconPicker, {\n          label: \"arrowhead_start\",\n          options: [{\n            value: null,\n            text: t(\"labels.arrowhead_none\"),\n            icon: ArrowheadNoneIcon,\n            keyBinding: \"q\"\n          }, {\n            value: \"arrow\",\n            text: t(\"labels.arrowhead_arrow\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadArrowIcon, {\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1017,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"w\"\n          }, {\n            value: \"bar\",\n            text: t(\"labels.arrowhead_bar\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadBarIcon, {\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1023,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"e\"\n          }, {\n            value: \"dot\",\n            text: t(\"labels.arrowhead_dot\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadDotIcon, {\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1029,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"r\"\n          }, {\n            value: \"triangle\",\n            text: t(\"labels.arrowhead_triangle\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadTriangleIcon, {\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"t\"\n          }],\n          value: getFormValue(elements, appState, element => isLinearElement(element) && canHaveArrowheads(element.type) ? element.startArrowhead : appState.currentItemStartArrowhead, appState.currentItemStartArrowhead),\n          onChange: value => updateData({\n            position: \"start\",\n            type: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1005,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconPicker, {\n          label: \"arrowhead_end\",\n          group: \"arrowheads\",\n          options: [{\n            value: null,\n            text: t(\"labels.arrowhead_none\"),\n            keyBinding: \"q\",\n            icon: ArrowheadNoneIcon\n          }, {\n            value: \"arrow\",\n            text: t(\"labels.arrowhead_arrow\"),\n            keyBinding: \"w\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadArrowIcon, {\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1064,\n              columnNumber: 23\n            }, this)\n          }, {\n            value: \"bar\",\n            text: t(\"labels.arrowhead_bar\"),\n            keyBinding: \"e\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadBarIcon, {\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1070,\n              columnNumber: 23\n            }, this)\n          }, {\n            value: \"dot\",\n            text: t(\"labels.arrowhead_dot\"),\n            keyBinding: \"r\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadDotIcon, {\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1076,\n              columnNumber: 23\n            }, this)\n          }, {\n            value: \"triangle\",\n            text: t(\"labels.arrowhead_triangle\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadTriangleIcon, {\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1081,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"t\"\n          }],\n          value: getFormValue(elements, appState, element => isLinearElement(element) && canHaveArrowheads(element.type) ? element.endArrowhead : appState.currentItemEndArrowhead, appState.currentItemEndArrowhead),\n          onChange: value => updateData({\n            position: \"end\",\n            type: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 7\n    }, this);\n  }\n});","map":{"version":3,"names":["DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE","DEFAULT_ELEMENT_BACKGROUND_PICKS","DEFAULT_ELEMENT_STROKE_COLOR_PALETTE","DEFAULT_ELEMENT_STROKE_PICKS","trackEvent","ButtonIconSelect","ColorPicker","IconPicker","ArrowheadArrowIcon","ArrowheadBarIcon","ArrowheadDotIcon","ArrowheadTriangleIcon","ArrowheadNoneIcon","StrokeStyleDashedIcon","StrokeStyleDottedIcon","TextAlignTopIcon","TextAlignBottomIcon","TextAlignMiddleIcon","FillHachureIcon","FillCrossHatchIcon","FillSolidIcon","SloppinessArchitectIcon","SloppinessArtistIcon","SloppinessCartoonistIcon","StrokeWidthBaseIcon","StrokeWidthBoldIcon","StrokeWidthExtraBoldIcon","FontSizeSmallIcon","FontSizeMediumIcon","FontSizeLargeIcon","FontSizeExtraLargeIcon","EdgeSharpIcon","EdgeRoundIcon","FreedrawIcon","FontFamilyNormalIcon","FontFamilyCodeIcon","TextAlignLeftIcon","TextAlignCenterIcon","TextAlignRightIcon","FillZigZagIcon","DEFAULT_FONT_FAMILY","DEFAULT_FONT_SIZE","FONT_FAMILY","ROUNDNESS","VERTICAL_ALIGN","getNonDeletedElements","isTextElement","redrawTextBoundingBox","mutateElement","newElementWith","getBoundTextElement","getContainerElement","getDefaultLineHeight","isBoundToContainer","isLinearElement","isUsingAdaptiveRadius","getLanguage","t","KEYS","randomInteger","canChangeRoundness","canHaveArrowheads","getCommonAttributeOfSelectedElements","getSelectedElements","getTargetElements","isSomeElementSelected","hasStrokeColor","arrayToMap","getShortcutKey","register","jsxDEV","_jsxDEV","Fragment","_Fragment","FONT_SIZE_RELATIVE_INCREASE_STEP","changeProperty","elements","appState","callback","includeBoundText","arguments","length","undefined","selectedElementIds","includeBoundTextElement","map","element","_appState$editingElem","get","id","editingElement","getFormValue","getAttribute","defaultValue","_ref","_ref2","nonDeletedElements","offsetElementAfterFontResize","prevElement","nextElement","x","textAlign","width","y","height","changeFontSize","getNewFontSize","fallbackValue","newFontSizes","Set","oldElement","newFontSize","add","newElement","fontSize","currentItemFontSize","size","commitToHistory","actionChangeStrokeColor","name","perform","value","currentItemStrokeColor","el","type","strokeColor","PanelComponent","_ref3","updateData","appProps","children","fileName","_jsxFileName","lineNumber","columnNumber","topPicks","palette","label","color","onChange","actionChangeBackgroundColor","currentItemBackgroundColor","backgroundColor","_ref4","actionChangeFillStyle","app","device","isMobile","fillStyle","currentItemFillStyle","_ref5","selectedElements","allElementsZigZag","every","options","text","icon","active","onClick","event","nextValue","altKey","actionChangeStrokeWidth","strokeWidth","currentItemStrokeWidth","_ref6","group","actionChangeSloppiness","seed","roughness","currentItemRoughness","_ref7","actionChangeStrokeStyle","strokeStyle","currentItemStrokeStyle","_ref8","actionChangeOpacity","opacity","currentItemOpacity","_ref9","_getFormValue","className","min","max","step","target","actionChangeFontSize","_ref10","testId","boundTextElement","actionDecreaseFontSize","Math","round","keyTest","CTRL_OR_CMD","shiftKey","key","CHEVRON_LEFT","COMMA","actionIncreaseFontSize","CHEVRON_RIGHT","PERIOD","actionChangeFontFamily","fontFamily","lineHeight","currentItemFontFamily","_ref11","Handlefront","Helvetica","Cascadia","actionChangeTextAlign","currentItemTextAlign","_ref12","actionChangeVerticalAlign","category","verticalAlign","_ref13","TOP","theme","MIDDLE","BOTTOM","containerId","actionChangeRoundness","roundness","ADAPTIVE_RADIUS","PROPORTIONAL_RADIUS","currentItemRoundness","_ref14","targetElements","hasLegacyRoundness","some","_el$roundness","LEGACY","activeTool","actionChangeArrowhead","position","startArrowhead","endArrowhead","_ref15","isRTL","rtl","keyBinding","flip","currentItemStartArrowhead","currentItemEndArrowhead"],"sources":["D:/project/excalidraw-cn/src/actions/actionProperties.tsx"],"sourcesContent":["import { AppState } from \"../../src/types\";\nimport {\n  DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE,\n  DEFAULT_ELEMENT_BACKGROUND_PICKS,\n  DEFAULT_ELEMENT_STROKE_COLOR_PALETTE,\n  DEFAULT_ELEMENT_STROKE_PICKS,\n} from \"../colors\";\nimport { trackEvent } from \"../analytics\";\nimport { ButtonIconSelect } from \"../components/ButtonIconSelect\";\nimport { ColorPicker } from \"../components/ColorPicker/ColorPicker\";\nimport { IconPicker } from \"../components/IconPicker\";\n// TODO barnabasmolnar/editor-redesign\n// TextAlignTopIcon, TextAlignBottomIcon,TextAlignMiddleIcon,\n// ArrowHead icons\nimport {\n  ArrowheadArrowIcon,\n  ArrowheadBarIcon,\n  ArrowheadDotIcon,\n  ArrowheadTriangleIcon,\n  ArrowheadNoneIcon,\n  StrokeStyleDashedIcon,\n  StrokeStyleDottedIcon,\n  TextAlignTopIcon,\n  TextAlignBottomIcon,\n  TextAlignMiddleIcon,\n  FillHachureIcon,\n  FillCrossHatchIcon,\n  FillSolidIcon,\n  SloppinessArchitectIcon,\n  SloppinessArtistIcon,\n  SloppinessCartoonistIcon,\n  StrokeWidthBaseIcon,\n  StrokeWidthBoldIcon,\n  StrokeWidthExtraBoldIcon,\n  FontSizeSmallIcon,\n  FontSizeMediumIcon,\n  FontSizeLargeIcon,\n  FontSizeExtraLargeIcon,\n  EdgeSharpIcon,\n  EdgeRoundIcon,\n  FreedrawIcon,\n  FontFamilyNormalIcon,\n  FontFamilyCodeIcon,\n  TextAlignLeftIcon,\n  TextAlignCenterIcon,\n  TextAlignRightIcon,\n  FillZigZagIcon,\n} from \"../components/icons\";\nimport {\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_FONT_SIZE,\n  FONT_FAMILY,\n  ROUNDNESS,\n  VERTICAL_ALIGN,\n} from \"../constants\";\nimport {\n  getNonDeletedElements,\n  isTextElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport {\n  getBoundTextElement,\n  getContainerElement,\n  getDefaultLineHeight,\n} from \"../element/textElement\";\nimport {\n  isBoundToContainer,\n  isLinearElement,\n  isUsingAdaptiveRadius,\n} from \"../element/typeChecks\";\nimport {\n  Arrowhead,\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElement,\n  FontFamilyValues,\n  TextAlign,\n  VerticalAlign,\n} from \"../element/types\";\nimport { getLanguage, t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { randomInteger } from \"../random\";\nimport {\n  canChangeRoundness,\n  canHaveArrowheads,\n  getCommonAttributeOfSelectedElements,\n  getSelectedElements,\n  getTargetElements,\n  isSomeElementSelected,\n} from \"../scene\";\nimport { hasStrokeColor } from \"../scene/comparisons\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst FONT_SIZE_RELATIVE_INCREASE_STEP = 0.1;\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\n  includeBoundText = false,\n) => {\n  const selectedElementIds = arrayToMap(\n    getSelectedElements(elements, appState, {\n      includeBoundTextElement: includeBoundText,\n    }),\n  );\n\n  return elements.map((element) => {\n    if (\n      selectedElementIds.get(element.id) ||\n      element.id === appState.editingElement?.id\n    ) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nconst getFormValue = function <T>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n  defaultValue: T,\n): T {\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (\n    (editingElement && getAttribute(editingElement)) ??\n    (isSomeElementSelected(nonDeletedElements, appState)\n      ? getCommonAttributeOfSelectedElements(\n          nonDeletedElements,\n          appState,\n          getAttribute,\n        )\n      : defaultValue) ??\n    defaultValue\n  );\n};\n\nconst offsetElementAfterFontResize = (\n  prevElement: ExcalidrawTextElement,\n  nextElement: ExcalidrawTextElement,\n) => {\n  if (isBoundToContainer(nextElement)) {\n    return nextElement;\n  }\n  return mutateElement(\n    nextElement,\n    {\n      x:\n        prevElement.textAlign === \"left\"\n          ? prevElement.x\n          : prevElement.x +\n            (prevElement.width - nextElement.width) /\n              (prevElement.textAlign === \"center\" ? 2 : 1),\n      // centering vertically is non-standard, but for Excalidraw I think\n      // it makes sense\n      y: prevElement.y + (prevElement.height - nextElement.height) / 2,\n    },\n    false,\n  );\n};\n\nconst changeFontSize = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getNewFontSize: (element: ExcalidrawTextElement) => number,\n  fallbackValue?: ExcalidrawTextElement[\"fontSize\"],\n) => {\n  const newFontSizes = new Set<number>();\n\n  return {\n    elements: changeProperty(\n      elements,\n      appState,\n      (oldElement) => {\n        if (isTextElement(oldElement)) {\n          const newFontSize = getNewFontSize(oldElement);\n          newFontSizes.add(newFontSize);\n\n          let newElement: ExcalidrawTextElement = newElementWith(oldElement, {\n            fontSize: newFontSize,\n          });\n          redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n\n          newElement = offsetElementAfterFontResize(oldElement, newElement);\n\n          return newElement;\n        }\n\n        return oldElement;\n      },\n      true,\n    ),\n    appState: {\n      ...appState,\n      // update state only if we've set all select text elements to\n      // the same font size\n      currentItemFontSize:\n        newFontSizes.size === 1\n          ? [...newFontSizes][0]\n          : fallbackValue ?? appState.currentItemFontSize,\n    },\n    commitToHistory: true,\n  };\n};\n\n// -----------------------------------------------------------------------------\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemStrokeColor && {\n        elements: changeProperty(\n          elements,\n          appState,\n          (el) => {\n            return hasStrokeColor(el.type)\n              ? newElementWith(el, {\n                  strokeColor: value.currentItemStrokeColor,\n                })\n              : el;\n          },\n          true,\n        ),\n      }),\n      appState: {\n        ...appState,\n        ...value,\n      },\n      commitToHistory: !!value.currentItemStrokeColor,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\n      <ColorPicker\n        topPicks={DEFAULT_ELEMENT_STROKE_PICKS}\n        palette={DEFAULT_ELEMENT_STROKE_COLOR_PALETTE}\n        type=\"elementStroke\"\n        label={t(\"labels.stroke\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeColor,\n          appState.currentItemStrokeColor,\n        )}\n        onChange={(color) => updateData({ currentItemStrokeColor: color })}\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      ...(value.currentItemBackgroundColor && {\n        elements: changeProperty(elements, appState, (el) =>\n          newElementWith(el, {\n            backgroundColor: value.currentItemBackgroundColor,\n          }),\n        ),\n      }),\n      appState: {\n        ...appState,\n        ...value,\n      },\n      commitToHistory: !!value.currentItemBackgroundColor,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData, appProps }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\n      <ColorPicker\n        topPicks={DEFAULT_ELEMENT_BACKGROUND_PICKS}\n        palette={DEFAULT_ELEMENT_BACKGROUND_COLOR_PALETTE}\n        type=\"elementBackground\"\n        label={t(\"labels.background\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.backgroundColor,\n          appState.currentItemBackgroundColor,\n        )}\n        onChange={(color) => updateData({ currentItemBackgroundColor: color })}\n        elements={elements}\n        appState={appState}\n        updateData={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  trackEvent: false,\n  perform: (elements, appState, value, app) => {\n    trackEvent(\n      \"element\",\n      \"changeFillStyle\",\n      `${value} (${app.device.isMobile ? \"mobile\" : \"desktop\"})`,\n    );\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          fillStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemFillStyle: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const selectedElements = getSelectedElements(elements, appState);\n    const allElementsZigZag =\n      selectedElements.length > 0 &&\n      selectedElements.every((el) => el.fillStyle === \"zigzag\");\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.fill\")}</legend>\n        <ButtonIconSelect\n          type=\"button\"\n          options={[\n            {\n              value: \"hachure\",\n              text: `${\n                allElementsZigZag ? t(\"labels.zigzag\") : t(\"labels.hachure\")\n              } (${getShortcutKey(\"Alt-Click\")})`,\n              icon: allElementsZigZag ? FillZigZagIcon : FillHachureIcon,\n              active: allElementsZigZag ? true : undefined,\n            },\n            {\n              value: \"cross-hatch\",\n              text: t(\"labels.crossHatch\"),\n              icon: FillCrossHatchIcon,\n            },\n            {\n              value: \"solid\",\n              text: t(\"labels.solid\"),\n              icon: FillSolidIcon,\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => element.fillStyle,\n            appState.currentItemFillStyle,\n          )}\n          onClick={(value, event) => {\n            const nextValue =\n              event.altKey &&\n              value === \"hachure\" &&\n              selectedElements.every((el) => el.fillStyle === \"hachure\")\n                ? \"zigzag\"\n                : value;\n\n            updateData(nextValue);\n          }}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeWidth: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeWidth: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeWidth\")}</legend>\n      <ButtonIconSelect\n        group=\"stroke-width\"\n        options={[\n          {\n            value: 1,\n            text: t(\"labels.thin\"),\n            icon: StrokeWidthBaseIcon,\n          },\n          {\n            value: 2,\n            text: t(\"labels.bold\"),\n            icon: StrokeWidthBoldIcon,\n          },\n          {\n            value: 4,\n            text: t(\"labels.extraBold\"),\n            icon: StrokeWidthExtraBoldIcon,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeWidth,\n          appState.currentItemStrokeWidth,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          seed: randomInteger(),\n          roughness: value,\n        }),\n      ),\n      appState: { ...appState, currentItemRoughness: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.sloppiness\")}</legend>\n      <ButtonIconSelect\n        group=\"sloppiness\"\n        options={[\n          {\n            value: 0,\n            text: t(\"labels.architect\"),\n            icon: SloppinessArchitectIcon,\n          },\n          {\n            value: 1,\n            text: t(\"labels.artist\"),\n            icon: SloppinessArtistIcon,\n          },\n          {\n            value: 2,\n            text: t(\"labels.cartoonist\"),\n            icon: SloppinessCartoonistIcon,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.roughness,\n          appState.currentItemRoughness,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeStyle = register({\n  name: \"changeStrokeStyle\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeStyle: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeStyle\")}</legend>\n      <ButtonIconSelect\n        group=\"strokeStyle\"\n        options={[\n          {\n            value: \"solid\",\n            text: t(\"labels.strokeStyle_solid\"),\n            icon: StrokeWidthBaseIcon,\n          },\n          {\n            value: \"dashed\",\n            text: t(\"labels.strokeStyle_dashed\"),\n            icon: StrokeStyleDashedIcon,\n          },\n          {\n            value: \"dotted\",\n            text: t(\"labels.strokeStyle_dotted\"),\n            icon: StrokeStyleDottedIcon,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeStyle,\n          appState.currentItemStrokeStyle,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (el) =>\n          newElementWith(el, {\n            opacity: value,\n          }),\n        true,\n      ),\n      appState: { ...appState, currentItemOpacity: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <label className=\"control-label\">\n      {t(\"labels.opacity\")}\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"10\"\n        onChange={(event) => updateData(+event.target.value)}\n        value={\n          getFormValue(\n            elements,\n            appState,\n            (element) => element.opacity,\n            appState.currentItemOpacity,\n          ) ?? undefined\n        }\n      />\n    </label>\n  ),\n});\n\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, () => value, value);\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontSize\")}</legend>\n      <ButtonIconSelect\n        group=\"font-size\"\n        options={[\n          {\n            value: 16,\n            text: t(\"labels.small\"),\n            icon: FontSizeSmallIcon,\n            testId: \"fontSize-small\",\n          },\n          {\n            value: 20,\n            text: t(\"labels.medium\"),\n            icon: FontSizeMediumIcon,\n            testId: \"fontSize-medium\",\n          },\n          {\n            value: 28,\n            text: t(\"labels.large\"),\n            icon: FontSizeLargeIcon,\n            testId: \"fontSize-large\",\n          },\n          {\n            value: 36,\n            text: t(\"labels.veryLarge\"),\n            icon: FontSizeExtraLargeIcon,\n            testId: \"fontSize-veryLarge\",\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => {\n            if (isTextElement(element)) {\n              return element.fontSize;\n            }\n            const boundTextElement = getBoundTextElement(element);\n            if (boundTextElement) {\n              return boundTextElement.fontSize;\n            }\n            return null;\n          },\n          appState.currentItemFontSize || DEFAULT_FONT_SIZE,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionDecreaseFontSize = register({\n  name: \"decreaseFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, (element) =>\n      Math.round(\n        // get previous value before relative increase (doesn't work fully\n        // due to rounding and float precision issues)\n        (1 / (1 + FONT_SIZE_RELATIVE_INCREASE_STEP)) * element.fontSize,\n      ),\n    );\n  },\n  keyTest: (event) => {\n    return (\n      event[KEYS.CTRL_OR_CMD] &&\n      event.shiftKey &&\n      // KEYS.COMMA needed for MacOS\n      (event.key === KEYS.CHEVRON_LEFT || event.key === KEYS.COMMA)\n    );\n  },\n});\n\nexport const actionIncreaseFontSize = register({\n  name: \"increaseFontSize\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return changeFontSize(elements, appState, (element) =>\n      Math.round(element.fontSize * (1 + FONT_SIZE_RELATIVE_INCREASE_STEP)),\n    );\n  },\n  keyTest: (event) => {\n    return (\n      event[KEYS.CTRL_OR_CMD] &&\n      event.shiftKey &&\n      // KEYS.PERIOD needed for MacOS\n      (event.key === KEYS.CHEVRON_RIGHT || event.key === KEYS.PERIOD)\n    );\n  },\n});\n\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (oldElement) => {\n          if (isTextElement(oldElement)) {\n            const newElement: ExcalidrawTextElement = newElementWith(\n              oldElement,\n              {\n                fontFamily: value,\n                lineHeight: getDefaultLineHeight(value),\n              },\n            );\n            redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n            return newElement;\n          }\n\n          return oldElement;\n        },\n        true,\n      ),\n      appState: {\n        ...appState,\n        currentItemFontFamily: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const options: {\n      value: FontFamilyValues;\n      text: string;\n      icon: JSX.Element;\n    }[] = [\n      {\n        value: FONT_FAMILY.Handlefront,\n        text: t(\"labels.handDrawn\"),\n        icon: FreedrawIcon,\n      },\n      {\n        value: FONT_FAMILY.Helvetica,\n        text: t(\"labels.normal\"),\n        icon: FontFamilyNormalIcon,\n      },\n      {\n        value: FONT_FAMILY.Cascadia,\n        text: t(\"labels.code\"),\n        icon: FontFamilyCodeIcon,\n      },\n    ];\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.fontFamily\")}</legend>\n        <ButtonIconSelect<FontFamilyValues | false>\n          group=\"font-family\"\n          options={options}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isTextElement(element)) {\n                return element.fontFamily;\n              }\n              const boundTextElement = getBoundTextElement(element);\n              if (boundTextElement) {\n                return boundTextElement.fontFamily;\n              }\n              return null;\n            },\n            appState.currentItemFontFamily || DEFAULT_FONT_FAMILY,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (oldElement) => {\n          if (isTextElement(oldElement)) {\n            const newElement: ExcalidrawTextElement = newElementWith(\n              oldElement,\n              { textAlign: value },\n            );\n            redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n            return newElement;\n          }\n\n          return oldElement;\n        },\n        true,\n      ),\n      appState: {\n        ...appState,\n        currentItemTextAlign: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    return (\n      <fieldset>\n        <legend>{t(\"labels.textAlign\")}</legend>\n        <ButtonIconSelect<TextAlign | false>\n          group=\"text-align\"\n          options={[\n            {\n              value: \"left\",\n              text: t(\"labels.left\"),\n              icon: TextAlignLeftIcon,\n              testId: \"align-left\",\n            },\n            {\n              value: \"center\",\n              text: t(\"labels.center\"),\n              icon: TextAlignCenterIcon,\n              testId: \"align-horizontal-center\",\n            },\n            {\n              value: \"right\",\n              text: t(\"labels.right\"),\n              icon: TextAlignRightIcon,\n              testId: \"align-right\",\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isTextElement(element)) {\n                return element.textAlign;\n              }\n              const boundTextElement = getBoundTextElement(element);\n              if (boundTextElement) {\n                return boundTextElement.textAlign;\n              }\n              return null;\n            },\n            appState.currentItemTextAlign,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeVerticalAlign = register({\n  name: \"changeVerticalAlign\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(\n        elements,\n        appState,\n        (oldElement) => {\n          if (isTextElement(oldElement)) {\n            const newElement: ExcalidrawTextElement = newElementWith(\n              oldElement,\n              { verticalAlign: value },\n            );\n\n            redrawTextBoundingBox(newElement, getContainerElement(oldElement));\n            return newElement;\n          }\n\n          return oldElement;\n        },\n        true,\n      ),\n      appState: {\n        ...appState,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    return (\n      <fieldset>\n        <ButtonIconSelect<VerticalAlign | false>\n          group=\"text-align\"\n          options={[\n            {\n              value: VERTICAL_ALIGN.TOP,\n              text: t(\"labels.alignTop\"),\n              icon: <TextAlignTopIcon theme={appState.theme} />,\n              testId: \"align-top\",\n            },\n            {\n              value: VERTICAL_ALIGN.MIDDLE,\n              text: t(\"labels.centerVertically\"),\n              icon: <TextAlignMiddleIcon theme={appState.theme} />,\n              testId: \"align-middle\",\n            },\n            {\n              value: VERTICAL_ALIGN.BOTTOM,\n              text: t(\"labels.alignBottom\"),\n              icon: <TextAlignBottomIcon theme={appState.theme} />,\n              testId: \"align-bottom\",\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => {\n              if (isTextElement(element) && element.containerId) {\n                return element.verticalAlign;\n              }\n              const boundTextElement = getBoundTextElement(element);\n              if (boundTextElement) {\n                return boundTextElement.verticalAlign;\n              }\n              return null;\n            },\n            VERTICAL_ALIGN.MIDDLE,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeRoundness = register({\n  name: \"changeRoundness\",\n  trackEvent: false,\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          roundness:\n            value === \"round\"\n              ? {\n                  type: isUsingAdaptiveRadius(el.type)\n                    ? ROUNDNESS.ADAPTIVE_RADIUS\n                    : ROUNDNESS.PROPORTIONAL_RADIUS,\n                }\n              : null,\n        }),\n      ),\n      appState: {\n        ...appState,\n        currentItemRoundness: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const targetElements = getTargetElements(\n      getNonDeletedElements(elements),\n      appState,\n    );\n\n    const hasLegacyRoundness = targetElements.some(\n      (el) => el.roundness?.type === ROUNDNESS.LEGACY,\n    );\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.edges\")}</legend>\n        <ButtonIconSelect\n          group=\"edges\"\n          options={[\n            {\n              value: \"sharp\",\n              text: t(\"labels.sharp\"),\n              icon: EdgeSharpIcon,\n            },\n            {\n              value: \"round\",\n              text: t(\"labels.round\"),\n              icon: EdgeRoundIcon,\n            },\n          ]}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) =>\n              hasLegacyRoundness ? null : element.roundness ? \"round\" : \"sharp\",\n            (canChangeRoundness(appState.activeTool.type) &&\n              appState.currentItemRoundness) ||\n              null,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeArrowhead = register({\n  name: \"changeArrowhead\",\n  trackEvent: false,\n  perform: (\n    elements,\n    appState,\n    value: { position: \"start\" | \"end\"; type: Arrowhead },\n  ) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isLinearElement(el)) {\n          const { position, type } = value;\n\n          if (position === \"start\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              startArrowhead: type,\n            });\n            return element;\n          } else if (position === \"end\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              endArrowhead: type,\n            });\n            return element;\n          }\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        [value.position === \"start\"\n          ? \"currentItemStartArrowhead\"\n          : \"currentItemEndArrowhead\"]: value.type,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const isRTL = getLanguage().rtl;\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.arrowheads\")}</legend>\n        <div className=\"iconSelectList buttonList\">\n          <IconPicker\n            label=\"arrowhead_start\"\n            options={[\n              {\n                value: null,\n                text: t(\"labels.arrowhead_none\"),\n                icon: ArrowheadNoneIcon,\n                keyBinding: \"q\",\n              },\n              {\n                value: \"arrow\",\n                text: t(\"labels.arrowhead_arrow\"),\n                icon: <ArrowheadArrowIcon flip={!isRTL} />,\n                keyBinding: \"w\",\n              },\n              {\n                value: \"bar\",\n                text: t(\"labels.arrowhead_bar\"),\n                icon: <ArrowheadBarIcon flip={!isRTL} />,\n                keyBinding: \"e\",\n              },\n              {\n                value: \"dot\",\n                text: t(\"labels.arrowhead_dot\"),\n                icon: <ArrowheadDotIcon flip={!isRTL} />,\n                keyBinding: \"r\",\n              },\n              {\n                value: \"triangle\",\n                text: t(\"labels.arrowhead_triangle\"),\n                icon: <ArrowheadTriangleIcon flip={!isRTL} />,\n                keyBinding: \"t\",\n              },\n            ]}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.startArrowhead\n                  : appState.currentItemStartArrowhead,\n              appState.currentItemStartArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"start\", type: value })}\n          />\n          <IconPicker\n            label=\"arrowhead_end\"\n            group=\"arrowheads\"\n            options={[\n              {\n                value: null,\n                text: t(\"labels.arrowhead_none\"),\n                keyBinding: \"q\",\n                icon: ArrowheadNoneIcon,\n              },\n              {\n                value: \"arrow\",\n                text: t(\"labels.arrowhead_arrow\"),\n                keyBinding: \"w\",\n                icon: <ArrowheadArrowIcon flip={isRTL} />,\n              },\n              {\n                value: \"bar\",\n                text: t(\"labels.arrowhead_bar\"),\n                keyBinding: \"e\",\n                icon: <ArrowheadBarIcon flip={isRTL} />,\n              },\n              {\n                value: \"dot\",\n                text: t(\"labels.arrowhead_dot\"),\n                keyBinding: \"r\",\n                icon: <ArrowheadDotIcon flip={isRTL} />,\n              },\n              {\n                value: \"triangle\",\n                text: t(\"labels.arrowhead_triangle\"),\n                icon: <ArrowheadTriangleIcon flip={isRTL} />,\n                keyBinding: \"t\",\n              },\n            ]}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.endArrowhead\n                  : appState.currentItemEndArrowhead,\n              appState.currentItemEndArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"end\", type: value })}\n          />\n        </div>\n      </fieldset>\n    );\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}