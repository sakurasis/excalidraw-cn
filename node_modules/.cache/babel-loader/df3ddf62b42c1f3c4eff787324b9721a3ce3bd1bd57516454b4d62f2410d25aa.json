{"ast":null,"code":"import _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport var ZigZagLineFiller = /*#__PURE__*/function () {\n  function ZigZagLineFiller(helper) {\n    _classCallCheck(this, ZigZagLineFiller);\n    this.helper = helper;\n  }\n  _createClass(ZigZagLineFiller, [{\n    key: \"fillPolygons\",\n    value: function fillPolygons(polygonList, o) {\n      var gap = o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap;\n      var zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n      o = Object.assign({}, o, {\n        hachureGap: gap + zo\n      });\n      var lines = polygonHachureLines(polygonList, o);\n      return {\n        type: 'fillSketch',\n        ops: this.zigzagLines(lines, zo, o)\n      };\n    }\n  }, {\n    key: \"zigzagLines\",\n    value: function zigzagLines(lines, zo, o) {\n      var _this = this;\n      var ops = [];\n      lines.forEach(function (line) {\n        var length = lineLength(line);\n        var count = Math.round(length / (2 * zo));\n        var p1 = line[0];\n        var p2 = line[1];\n        if (p1[0] > p2[0]) {\n          p1 = line[1];\n          p2 = line[0];\n        }\n        var alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n        for (var i = 0; i < count; i++) {\n          var lstart = i * 2 * zo;\n          var lend = (i + 1) * 2 * zo;\n          var dz = Math.sqrt(2 * Math.pow(zo, 2));\n          var start = [p1[0] + lstart * Math.cos(alpha), p1[1] + lstart * Math.sin(alpha)];\n          var end = [p1[0] + lend * Math.cos(alpha), p1[1] + lend * Math.sin(alpha)];\n          var middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n          ops.push.apply(ops, _toConsumableArray(_this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o)).concat(_toConsumableArray(_this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o))));\n        }\n      });\n      return ops;\n    }\n  }]);\n  return ZigZagLineFiller;\n}();","map":{"version":3,"names":["lineLength","polygonHachureLines","ZigZagLineFiller","helper","_classCallCheck","_createClass","key","value","fillPolygons","polygonList","o","gap","hachureGap","strokeWidth","zo","zigzagOffset","Object","assign","lines","type","ops","zigzagLines","_this","forEach","line","length","count","Math","round","p1","p2","alpha","atan","i","lstart","lend","dz","sqrt","pow","start","cos","sin","end","middle","PI","push","apply","_toConsumableArray","doubleLineOps","concat"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/zigzag-line-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class ZigZagLineFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const gap = o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap;\n        const zo = o.zigzagOffset < 0 ? gap : o.zigzagOffset;\n        o = Object.assign({}, o, { hachureGap: gap + zo });\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.zigzagLines(lines, zo, o) };\n    }\n    zigzagLines(lines, zo, o) {\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.round(length / (2 * zo));\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * 2 * zo;\n                const lend = (i + 1) * 2 * zo;\n                const dz = Math.sqrt(2 * Math.pow(zo, 2));\n                const start = [p1[0] + (lstart * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha)];\n                const end = [p1[0] + (lend * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha))];\n                const middle = [start[0] + dz * Math.cos(alpha + Math.PI / 4), start[1] + dz * Math.sin(alpha + Math.PI / 4)];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], middle[0], middle[1], o), ...this.helper.doubleLineOps(middle[0], middle[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}