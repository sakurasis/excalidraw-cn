{"ast":null,"code":"import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DashedFiller {\n  constructor(helper) {\n    this.helper = helper;\n  }\n  fillPolygons(polygonList, o) {\n    const lines = polygonHachureLines(polygonList, o);\n    return {\n      type: 'fillSketch',\n      ops: this.dashedLine(lines, o)\n    };\n  }\n  dashedLine(lines, o) {\n    const offset = o.dashOffset < 0 ? o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap : o.dashOffset;\n    const gap = o.dashGap < 0 ? o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap : o.dashGap;\n    const ops = [];\n    lines.forEach(line => {\n      const length = lineLength(line);\n      const count = Math.floor(length / (offset + gap));\n      const startOffset = (length + gap - count * (offset + gap)) / 2;\n      let p1 = line[0];\n      let p2 = line[1];\n      if (p1[0] > p2[0]) {\n        p1 = line[1];\n        p2 = line[0];\n      }\n      const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n      for (let i = 0; i < count; i++) {\n        const lstart = i * (offset + gap);\n        const lend = lstart + offset;\n        const start = [p1[0] + lstart * Math.cos(alpha) + startOffset * Math.cos(alpha), p1[1] + lstart * Math.sin(alpha) + startOffset * Math.sin(alpha)];\n        const end = [p1[0] + lend * Math.cos(alpha) + startOffset * Math.cos(alpha), p1[1] + lend * Math.sin(alpha) + startOffset * Math.sin(alpha)];\n        ops.push(...this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o));\n      }\n    });\n    return ops;\n  }\n}","map":{"version":3,"names":["lineLength","polygonHachureLines","DashedFiller","constructor","helper","fillPolygons","polygonList","o","lines","type","ops","dashedLine","offset","dashOffset","hachureGap","strokeWidth","gap","dashGap","forEach","line","length","count","Math","floor","startOffset","p1","p2","alpha","atan","i","lstart","lend","start","cos","sin","end","push","doubleLineOps"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/dashed-filler.js"],"sourcesContent":["import { lineLength } from '../geometry';\nimport { polygonHachureLines } from './scan-line-hachure';\nexport class DashedFiller {\n    constructor(helper) {\n        this.helper = helper;\n    }\n    fillPolygons(polygonList, o) {\n        const lines = polygonHachureLines(polygonList, o);\n        return { type: 'fillSketch', ops: this.dashedLine(lines, o) };\n    }\n    dashedLine(lines, o) {\n        const offset = o.dashOffset < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashOffset;\n        const gap = o.dashGap < 0 ? (o.hachureGap < 0 ? (o.strokeWidth * 4) : o.hachureGap) : o.dashGap;\n        const ops = [];\n        lines.forEach((line) => {\n            const length = lineLength(line);\n            const count = Math.floor(length / (offset + gap));\n            const startOffset = (length + gap - (count * (offset + gap))) / 2;\n            let p1 = line[0];\n            let p2 = line[1];\n            if (p1[0] > p2[0]) {\n                p1 = line[1];\n                p2 = line[0];\n            }\n            const alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));\n            for (let i = 0; i < count; i++) {\n                const lstart = i * (offset + gap);\n                const lend = lstart + offset;\n                const start = [p1[0] + (lstart * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + lstart * Math.sin(alpha) + (startOffset * Math.sin(alpha))];\n                const end = [p1[0] + (lend * Math.cos(alpha)) + (startOffset * Math.cos(alpha)), p1[1] + (lend * Math.sin(alpha)) + (startOffset * Math.sin(alpha))];\n                ops.push(...this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o));\n            }\n        });\n        return ops;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}