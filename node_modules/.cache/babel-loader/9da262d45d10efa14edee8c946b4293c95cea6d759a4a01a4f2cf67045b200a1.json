{"ast":null,"code":"import { ROUNDNESS } from \"../constants\";\nexport const isGenericElement = element => {\n  return element != null && (element.type === \"selection\" || element.type === \"rectangle\" || element.type === \"diamond\" || element.type === \"ellipse\");\n};\nexport const isInitializedImageElement = element => {\n  return !!element && element.type === \"image\" && !!element.fileId;\n};\nexport const isImageElement = element => {\n  return !!element && element.type === \"image\";\n};\nexport const isTextElement = element => {\n  return element != null && element.type === \"text\";\n};\nexport const isFrameElement = element => {\n  return element != null && element.type === \"frame\";\n};\nexport const isFreeDrawElement = element => {\n  return element != null && isFreeDrawElementType(element.type);\n};\nexport const isFreeDrawElementType = elementType => {\n  return elementType === \"freedraw\";\n};\nexport const isLinearElement = element => {\n  return element != null && isLinearElementType(element.type);\n};\nexport const isArrowElement = element => {\n  return element != null && element.type === \"arrow\";\n};\nexport const isLinearElementType = elementType => {\n  return elementType === \"arrow\" || elementType === \"line\" // || elementType === \"freedraw\"\n  ;\n};\n\nexport const isBindingElement = function (element) {\n  let includeLocked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return element != null && (!element.locked || includeLocked === true) && isBindingElementType(element.type);\n};\nexport const isBindingElementType = elementType => {\n  return elementType === \"arrow\";\n};\nexport const isBindableElement = function (element) {\n  let includeLocked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return element != null && (!element.locked || includeLocked === true) && (element.type === \"rectangle\" || element.type === \"diamond\" || element.type === \"ellipse\" || element.type === \"image\" || element.type === \"text\" && !element.containerId);\n};\nexport const isTextBindableContainer = function (element) {\n  let includeLocked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return element != null && (!element.locked || includeLocked === true) && (element.type === \"rectangle\" || element.type === \"diamond\" || element.type === \"ellipse\" || isArrowElement(element));\n};\nexport const isExcalidrawElement = element => {\n  return (element === null || element === void 0 ? void 0 : element.type) === \"text\" || (element === null || element === void 0 ? void 0 : element.type) === \"diamond\" || (element === null || element === void 0 ? void 0 : element.type) === \"rectangle\" || (element === null || element === void 0 ? void 0 : element.type) === \"ellipse\" || (element === null || element === void 0 ? void 0 : element.type) === \"arrow\" || (element === null || element === void 0 ? void 0 : element.type) === \"freedraw\" || (element === null || element === void 0 ? void 0 : element.type) === \"line\";\n};\nexport const hasBoundTextElement = element => {\n  var _element$boundElement;\n  return isTextBindableContainer(element) && !!((_element$boundElement = element.boundElements) !== null && _element$boundElement !== void 0 && _element$boundElement.some(_ref => {\n    let {\n      type\n    } = _ref;\n    return type === \"text\";\n  }));\n};\nexport const isBoundToContainer = element => {\n  return element !== null && \"containerId\" in element && element.containerId !== null && isTextElement(element);\n};\nexport const isUsingAdaptiveRadius = type => type === \"rectangle\";\nexport const isUsingProportionalRadius = type => type === \"line\" || type === \"arrow\" || type === \"diamond\";\nexport const canApplyRoundnessTypeToElement = (roundnessType, element) => {\n  if ((roundnessType === ROUNDNESS.ADAPTIVE_RADIUS ||\n  // if legacy roundness, it can be applied to elements that currently\n  // use adaptive radius\n  roundnessType === ROUNDNESS.LEGACY) && isUsingAdaptiveRadius(element.type)) {\n    return true;\n  }\n  if (roundnessType === ROUNDNESS.PROPORTIONAL_RADIUS && isUsingProportionalRadius(element.type)) {\n    return true;\n  }\n  return false;\n};\nexport const getDefaultRoundnessTypeForElement = element => {\n  if (element.type === \"arrow\" || element.type === \"line\" || element.type === \"diamond\") {\n    return {\n      type: ROUNDNESS.PROPORTIONAL_RADIUS\n    };\n  }\n  if (element.type === \"rectangle\") {\n    return {\n      type: ROUNDNESS.ADAPTIVE_RADIUS\n    };\n  }\n  return null;\n};","map":{"version":3,"names":["ROUNDNESS","isGenericElement","element","type","isInitializedImageElement","fileId","isImageElement","isTextElement","isFrameElement","isFreeDrawElement","isFreeDrawElementType","elementType","isLinearElement","isLinearElementType","isArrowElement","isBindingElement","includeLocked","arguments","length","undefined","locked","isBindingElementType","isBindableElement","containerId","isTextBindableContainer","isExcalidrawElement","hasBoundTextElement","_element$boundElement","boundElements","some","_ref","isBoundToContainer","isUsingAdaptiveRadius","isUsingProportionalRadius","canApplyRoundnessTypeToElement","roundnessType","ADAPTIVE_RADIUS","LEGACY","PROPORTIONAL_RADIUS","getDefaultRoundnessTypeForElement"],"sources":["D:/project/excalidraw-cn/src/element/typeChecks.ts"],"sourcesContent":["import { ROUNDNESS } from \"../constants\";\nimport { AppState } from \"../types\";\nimport { MarkNonNullable } from \"../utility-types\";\nimport {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawBindableElement,\n  ExcalidrawGenericElement,\n  ExcalidrawFreeDrawElement,\n  InitializedExcalidrawImageElement,\n  ExcalidrawImageElement,\n  ExcalidrawTextElementWithContainer,\n  ExcalidrawTextContainer,\n  ExcalidrawFrameElement,\n  RoundnessType,\n} from \"./types\";\n\nexport const isGenericElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawGenericElement => {\n  return (\n    element != null &&\n    (element.type === \"selection\" ||\n      element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\")\n  );\n};\n\nexport const isInitializedImageElement = (\n  element: ExcalidrawElement | null,\n): element is InitializedExcalidrawImageElement => {\n  return !!element && element.type === \"image\" && !!element.fileId;\n};\n\nexport const isImageElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawImageElement => {\n  return !!element && element.type === \"image\";\n};\n\nexport const isTextElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElement => {\n  return element != null && element.type === \"text\";\n};\n\nexport const isFrameElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawFrameElement => {\n  return element != null && element.type === \"frame\";\n};\n\nexport const isFreeDrawElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawFreeDrawElement => {\n  return element != null && isFreeDrawElementType(element.type);\n};\n\nexport const isFreeDrawElementType = (\n  elementType: ExcalidrawElement[\"type\"],\n): boolean => {\n  return elementType === \"freedraw\";\n};\n\nexport const isLinearElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return element != null && isLinearElementType(element.type);\n};\n\nexport const isArrowElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return element != null && element.type === \"arrow\";\n};\n\nexport const isLinearElementType = (\n  elementType: AppState[\"activeTool\"][\"type\"],\n): boolean => {\n  return (\n    elementType === \"arrow\" || elementType === \"line\" // || elementType === \"freedraw\"\n  );\n};\n\nexport const isBindingElement = (\n  element?: ExcalidrawElement | null,\n  includeLocked = true,\n): element is ExcalidrawLinearElement => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    isBindingElementType(element.type)\n  );\n};\n\nexport const isBindingElementType = (\n  elementType: AppState[\"activeTool\"][\"type\"],\n): boolean => {\n  return elementType === \"arrow\";\n};\n\nexport const isBindableElement = (\n  element: ExcalidrawElement | null,\n  includeLocked = true,\n): element is ExcalidrawBindableElement => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\" ||\n      element.type === \"image\" ||\n      (element.type === \"text\" && !element.containerId))\n  );\n};\n\nexport const isTextBindableContainer = (\n  element: ExcalidrawElement | null,\n  includeLocked = true,\n): element is ExcalidrawTextContainer => {\n  return (\n    element != null &&\n    (!element.locked || includeLocked === true) &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\" ||\n      isArrowElement(element))\n  );\n};\n\nexport const isExcalidrawElement = (element: any): boolean => {\n  return (\n    element?.type === \"text\" ||\n    element?.type === \"diamond\" ||\n    element?.type === \"rectangle\" ||\n    element?.type === \"ellipse\" ||\n    element?.type === \"arrow\" ||\n    element?.type === \"freedraw\" ||\n    element?.type === \"line\"\n  );\n};\n\nexport const hasBoundTextElement = (\n  element: ExcalidrawElement | null,\n): element is MarkNonNullable<ExcalidrawBindableElement, \"boundElements\"> => {\n  return (\n    isTextBindableContainer(element) &&\n    !!element.boundElements?.some(({ type }) => type === \"text\")\n  );\n};\n\nexport const isBoundToContainer = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElementWithContainer => {\n  return (\n    element !== null &&\n    \"containerId\" in element &&\n    element.containerId !== null &&\n    isTextElement(element)\n  );\n};\n\nexport const isUsingAdaptiveRadius = (type: string) => type === \"rectangle\";\n\nexport const isUsingProportionalRadius = (type: string) =>\n  type === \"line\" || type === \"arrow\" || type === \"diamond\";\n\nexport const canApplyRoundnessTypeToElement = (\n  roundnessType: RoundnessType,\n  element: ExcalidrawElement,\n) => {\n  if (\n    (roundnessType === ROUNDNESS.ADAPTIVE_RADIUS ||\n      // if legacy roundness, it can be applied to elements that currently\n      // use adaptive radius\n      roundnessType === ROUNDNESS.LEGACY) &&\n    isUsingAdaptiveRadius(element.type)\n  ) {\n    return true;\n  }\n  if (\n    roundnessType === ROUNDNESS.PROPORTIONAL_RADIUS &&\n    isUsingProportionalRadius(element.type)\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getDefaultRoundnessTypeForElement = (\n  element: ExcalidrawElement,\n) => {\n  if (\n    element.type === \"arrow\" ||\n    element.type === \"line\" ||\n    element.type === \"diamond\"\n  ) {\n    return {\n      type: ROUNDNESS.PROPORTIONAL_RADIUS,\n    };\n  }\n\n  if (element.type === \"rectangle\") {\n    return {\n      type: ROUNDNESS.ADAPTIVE_RADIUS,\n    };\n  }\n\n  return null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}