{"ast":null,"code":"import { newElementWith } from \"./element/mutateElement\";\nimport { getCommonBoundingBox } from \"./element/bounds\";\nimport { getMaximumGroups } from \"./groups\";\nexport const alignElements = (selectedElements, alignment) => {\n  const groups = getMaximumGroups(selectedElements);\n  const selectionBoundingBox = getCommonBoundingBox(selectedElements);\n  return groups.flatMap(group => {\n    const translation = calculateTranslation(group, selectionBoundingBox, alignment);\n    return group.map(element => newElementWith(element, {\n      x: element.x + translation.x,\n      y: element.y + translation.y\n    }));\n  });\n};\nconst calculateTranslation = (group, selectionBoundingBox, _ref) => {\n  let {\n    axis,\n    position\n  } = _ref;\n  const groupBoundingBox = getCommonBoundingBox(group);\n  const [min, max] = axis === \"x\" ? [\"minX\", \"maxX\"] : [\"minY\", \"maxY\"];\n  const noTranslation = {\n    x: 0,\n    y: 0\n  };\n  if (position === \"start\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[min] - groupBoundingBox[min]\n    };\n  } else if (position === \"end\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[max] - groupBoundingBox[max]\n    };\n  } // else if (position === \"center\") {\n  return {\n    ...noTranslation,\n    [axis]: (selectionBoundingBox[min] + selectionBoundingBox[max]) / 2 - (groupBoundingBox[min] + groupBoundingBox[max]) / 2\n  };\n};","map":{"version":3,"names":["newElementWith","getCommonBoundingBox","getMaximumGroups","alignElements","selectedElements","alignment","groups","selectionBoundingBox","flatMap","group","translation","calculateTranslation","map","element","x","y","_ref","axis","position","groupBoundingBox","min","max","noTranslation"],"sources":["D:/project/excalidraw-cn/src/align.ts"],"sourcesContent":["import { ExcalidrawElement } from \"./element/types\";\nimport { newElementWith } from \"./element/mutateElement\";\nimport { BoundingBox, getCommonBoundingBox } from \"./element/bounds\";\nimport { getMaximumGroups } from \"./groups\";\n\nexport interface Alignment {\n  position: \"start\" | \"center\" | \"end\";\n  axis: \"x\" | \"y\";\n}\n\nexport const alignElements = (\n  selectedElements: ExcalidrawElement[],\n  alignment: Alignment,\n): ExcalidrawElement[] => {\n  const groups: ExcalidrawElement[][] = getMaximumGroups(selectedElements);\n\n  const selectionBoundingBox = getCommonBoundingBox(selectedElements);\n\n  return groups.flatMap((group) => {\n    const translation = calculateTranslation(\n      group,\n      selectionBoundingBox,\n      alignment,\n    );\n    return group.map((element) =>\n      newElementWith(element, {\n        x: element.x + translation.x,\n        y: element.y + translation.y,\n      }),\n    );\n  });\n};\n\nconst calculateTranslation = (\n  group: ExcalidrawElement[],\n  selectionBoundingBox: BoundingBox,\n  { axis, position }: Alignment,\n): { x: number; y: number } => {\n  const groupBoundingBox = getCommonBoundingBox(group);\n\n  const [min, max]: [\"minX\" | \"minY\", \"maxX\" | \"maxY\"] =\n    axis === \"x\" ? [\"minX\", \"maxX\"] : [\"minY\", \"maxY\"];\n\n  const noTranslation = { x: 0, y: 0 };\n  if (position === \"start\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[min] - groupBoundingBox[min],\n    };\n  } else if (position === \"end\") {\n    return {\n      ...noTranslation,\n      [axis]: selectionBoundingBox[max] - groupBoundingBox[max],\n    };\n  } // else if (position === \"center\") {\n  return {\n    ...noTranslation,\n    [axis]:\n      (selectionBoundingBox[min] + selectionBoundingBox[max]) / 2 -\n      (groupBoundingBox[min] + groupBoundingBox[max]) / 2,\n  };\n};\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,yBAAyB;AACxD,SAAsBC,oBAAoB,QAAQ,kBAAkB;AACpE,SAASC,gBAAgB,QAAQ,UAAU;AAO3C,OAAO,MAAMC,aAAa,GAAGA,CAC3BC,gBAAqC,EACrCC,SAAoB,KACI;EACxB,MAAMC,MAA6B,GAAGJ,gBAAgB,CAACE,gBAAgB,CAAC;EAExE,MAAMG,oBAAoB,GAAGN,oBAAoB,CAACG,gBAAgB,CAAC;EAEnE,OAAOE,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAK;IAC/B,MAAMC,WAAW,GAAGC,oBAAoB,CACtCF,KAAK,EACLF,oBAAoB,EACpBF,SAAS,CACV;IACD,OAAOI,KAAK,CAACG,GAAG,CAAEC,OAAO,IACvBb,cAAc,CAACa,OAAO,EAAE;MACtBC,CAAC,EAAED,OAAO,CAACC,CAAC,GAAGJ,WAAW,CAACI,CAAC;MAC5BC,CAAC,EAAEF,OAAO,CAACE,CAAC,GAAGL,WAAW,CAACK;IAC7B,CAAC,CAAC,CACH;EACH,CAAC,CAAC;AACJ,CAAC;AAED,MAAMJ,oBAAoB,GAAGA,CAC3BF,KAA0B,EAC1BF,oBAAiC,EAAAS,IAAA,KAEJ;EAAA,IAD7B;IAAEC,IAAI;IAAEC;EAAoB,CAAC,GAAAF,IAAA;EAE7B,MAAMG,gBAAgB,GAAGlB,oBAAoB,CAACQ,KAAK,CAAC;EAEpD,MAAM,CAACW,GAAG,EAAEC,GAAG,CAAqC,GAClDJ,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC;EAEpD,MAAMK,aAAa,GAAG;IAAER,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC;EACpC,IAAIG,QAAQ,KAAK,OAAO,EAAE;IACxB,OAAO;MACL,GAAGI,aAAa;MAChB,CAACL,IAAI,GAAGV,oBAAoB,CAACa,GAAG,CAAC,GAAGD,gBAAgB,CAACC,GAAG;IAC1D,CAAC;EACH,CAAC,MAAM,IAAIF,QAAQ,KAAK,KAAK,EAAE;IAC7B,OAAO;MACL,GAAGI,aAAa;MAChB,CAACL,IAAI,GAAGV,oBAAoB,CAACc,GAAG,CAAC,GAAGF,gBAAgB,CAACE,GAAG;IAC1D,CAAC;EACH,CAAC,CAAC;EACF,OAAO;IACL,GAAGC,aAAa;IAChB,CAACL,IAAI,GACH,CAACV,oBAAoB,CAACa,GAAG,CAAC,GAAGb,oBAAoB,CAACc,GAAG,CAAC,IAAI,CAAC,GAC3D,CAACF,gBAAgB,CAACC,GAAG,CAAC,GAAGD,gBAAgB,CAACE,GAAG,CAAC,IAAI;EACtD,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}