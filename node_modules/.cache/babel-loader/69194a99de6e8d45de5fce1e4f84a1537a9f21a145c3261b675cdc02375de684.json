{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\hoc\\\\withInternalFallback.tsx\";\nimport { atom, useAtom } from \"jotai\";\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { useTunnels } from \"../../context/tunnels\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const withInternalFallback = (componentName, Component) => {\n  const renderAtom = atom(0);\n  const WrapperComponent = props => {\n    const {\n      jotaiScope\n    } = useTunnels();\n    // for rerenders\n    const [, setCounter] = useAtom(renderAtom, jotaiScope);\n    // for initial & subsequent renders. Tracked as component state\n    // due to excalidraw multi-instance scanerios.\n    const metaRef = useRef({\n      // flag set on initial render to tell the fallback component to skip the\n      // render until mount counter are initialized. This is because the counter\n      // is initialized in an effect, and thus we could end rendering both\n      // components at the same time until counter is initialized.\n      preferHost: false,\n      counter: 0\n    });\n    useLayoutEffect(() => {\n      const meta = metaRef.current;\n      setCounter(c => {\n        const next = c + 1;\n        meta.counter = next;\n        return next;\n      });\n      return () => {\n        setCounter(c => {\n          const next = c - 1;\n          meta.counter = next;\n          if (!next) {\n            meta.preferHost = false;\n          }\n          return next;\n        });\n      };\n    }, [setCounter]);\n    if (!props.__fallback) {\n      metaRef.current.preferHost = true;\n    }\n\n    // ensure we don't render fallback and host components at the same time\n    if (\n    // either before the counters are initialized\n    !metaRef.current.counter && props.__fallback && metaRef.current.preferHost ||\n    // or after the counters are initialized, and both are rendered\n    // (this is the default when host renders as well)\n    metaRef.current.counter > 1 && props.__fallback) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  };\n  WrapperComponent.displayName = componentName;\n  return WrapperComponent;\n};","map":{"version":3,"names":["atom","useAtom","React","useLayoutEffect","useRef","useTunnels","jsxDEV","_jsxDEV","withInternalFallback","componentName","Component","renderAtom","WrapperComponent","props","jotaiScope","setCounter","metaRef","preferHost","counter","meta","current","c","next","__fallback","fileName","_jsxFileName","lineNumber","columnNumber","displayName"],"sources":["D:/project/excalidraw-cn/src/components/hoc/withInternalFallback.tsx"],"sourcesContent":["import { atom, useAtom } from \"jotai\";\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { useTunnels } from \"../../context/tunnels\";\n\nexport const withInternalFallback = <P,>(\n  componentName: string,\n  Component: React.FC<P>,\n) => {\n  const renderAtom = atom(0);\n\n  const WrapperComponent: React.FC<\n    P & {\n      __fallback?: boolean;\n    }\n  > = (props) => {\n    const { jotaiScope } = useTunnels();\n    // for rerenders\n    const [, setCounter] = useAtom(renderAtom, jotaiScope);\n    // for initial & subsequent renders. Tracked as component state\n    // due to excalidraw multi-instance scanerios.\n    const metaRef = useRef({\n      // flag set on initial render to tell the fallback component to skip the\n      // render until mount counter are initialized. This is because the counter\n      // is initialized in an effect, and thus we could end rendering both\n      // components at the same time until counter is initialized.\n      preferHost: false,\n      counter: 0,\n    });\n\n    useLayoutEffect(() => {\n      const meta = metaRef.current;\n      setCounter((c) => {\n        const next = c + 1;\n        meta.counter = next;\n\n        return next;\n      });\n      return () => {\n        setCounter((c) => {\n          const next = c - 1;\n          meta.counter = next;\n          if (!next) {\n            meta.preferHost = false;\n          }\n          return next;\n        });\n      };\n    }, [setCounter]);\n\n    if (!props.__fallback) {\n      metaRef.current.preferHost = true;\n    }\n\n    // ensure we don't render fallback and host components at the same time\n    if (\n      // either before the counters are initialized\n      (!metaRef.current.counter &&\n        props.__fallback &&\n        metaRef.current.preferHost) ||\n      // or after the counters are initialized, and both are rendered\n      // (this is the default when host renders as well)\n      (metaRef.current.counter > 1 && props.__fallback)\n    ) {\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n\n  WrapperComponent.displayName = componentName;\n\n  return WrapperComponent;\n};\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,OAAO,QAAQ,OAAO;AACrC,OAAOC,KAAK,IAAIC,eAAe,EAAEC,MAAM,QAAQ,OAAO;AACtD,SAASC,UAAU,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,aAAqB,EACrBC,SAAsB,KACnB;EACH,MAAMC,UAAU,GAAGX,IAAI,CAAC,CAAC,CAAC;EAE1B,MAAMY,gBAIL,GAAIC,KAAK,IAAK;IACb,MAAM;MAAEC;IAAW,CAAC,GAAGT,UAAU,EAAE;IACnC;IACA,MAAM,GAAGU,UAAU,CAAC,GAAGd,OAAO,CAACU,UAAU,EAAEG,UAAU,CAAC;IACtD;IACA;IACA,MAAME,OAAO,GAAGZ,MAAM,CAAC;MACrB;MACA;MACA;MACA;MACAa,UAAU,EAAE,KAAK;MACjBC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFf,eAAe,CAAC,MAAM;MACpB,MAAMgB,IAAI,GAAGH,OAAO,CAACI,OAAO;MAC5BL,UAAU,CAAEM,CAAC,IAAK;QAChB,MAAMC,IAAI,GAAGD,CAAC,GAAG,CAAC;QAClBF,IAAI,CAACD,OAAO,GAAGI,IAAI;QAEnB,OAAOA,IAAI;MACb,CAAC,CAAC;MACF,OAAO,MAAM;QACXP,UAAU,CAAEM,CAAC,IAAK;UAChB,MAAMC,IAAI,GAAGD,CAAC,GAAG,CAAC;UAClBF,IAAI,CAACD,OAAO,GAAGI,IAAI;UACnB,IAAI,CAACA,IAAI,EAAE;YACTH,IAAI,CAACF,UAAU,GAAG,KAAK;UACzB;UACA,OAAOK,IAAI;QACb,CAAC,CAAC;MACJ,CAAC;IACH,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;IAEhB,IAAI,CAACF,KAAK,CAACU,UAAU,EAAE;MACrBP,OAAO,CAACI,OAAO,CAACH,UAAU,GAAG,IAAI;IACnC;;IAEA;IACA;IACE;IACC,CAACD,OAAO,CAACI,OAAO,CAACF,OAAO,IACvBL,KAAK,CAACU,UAAU,IAChBP,OAAO,CAACI,OAAO,CAACH,UAAU;IAC5B;IACA;IACCD,OAAO,CAACI,OAAO,CAACF,OAAO,GAAG,CAAC,IAAIL,KAAK,CAACU,UAAW,EACjD;MACA,OAAO,IAAI;IACb;IAEA,oBAAOhB,OAAA,CAACG,SAAS;MAAA,GAAKG;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EACjC,CAAC;EAEDf,gBAAgB,CAACgB,WAAW,GAAGnB,aAAa;EAE5C,OAAOG,gBAAgB;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}