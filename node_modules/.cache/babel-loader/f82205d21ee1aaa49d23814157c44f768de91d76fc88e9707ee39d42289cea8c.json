{"ast":null,"code":"import { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { selectGroupsForSelectedElements } from \"../groups\";\nimport { getNonDeletedElements, isTextElement } from \"../element\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { excludeElementsInFramesFromSelection } from \"../scene/selection\";\nexport const actionSelectAll = register({\n  name: \"selectAll\",\n  trackEvent: {\n    category: \"canvas\"\n  },\n  perform: (elements, appState, value, app) => {\n    if (appState.editingLinearElement) {\n      return false;\n    }\n    const selectedElementIds = excludeElementsInFramesFromSelection(elements.filter(element => !element.isDeleted && !(isTextElement(element) && element.containerId) && !element.locked)).reduce((map, element) => {\n      map[element.id] = true;\n      return map;\n    }, {});\n    return {\n      appState: selectGroupsForSelectedElements({\n        ...appState,\n        selectedLinearElement:\n        // single linear element selected\n        Object.keys(selectedElementIds).length === 1 && isLinearElement(elements[0]) ? new LinearElementEditor(elements[0], app.scene) : null,\n        editingGroupId: null,\n        selectedElementIds\n      }, getNonDeletedElements(elements), appState, app),\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.selectAll\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.A\n});","map":{"version":3,"names":["KEYS","register","selectGroupsForSelectedElements","getNonDeletedElements","isTextElement","isLinearElement","LinearElementEditor","excludeElementsInFramesFromSelection","actionSelectAll","name","trackEvent","category","perform","elements","appState","value","app","editingLinearElement","selectedElementIds","filter","element","isDeleted","containerId","locked","reduce","map","id","selectedLinearElement","Object","keys","length","scene","editingGroupId","commitToHistory","contextItemLabel","keyTest","event","CTRL_OR_CMD","key","A"],"sources":["D:/project/excalidraw-cn/src/actions/actionSelectAll.ts"],"sourcesContent":["import { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nimport { selectGroupsForSelectedElements } from \"../groups\";\nimport { getNonDeletedElements, isTextElement } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { LinearElementEditor } from \"../element/linearElementEditor\";\nimport { excludeElementsInFramesFromSelection } from \"../scene/selection\";\n\nexport const actionSelectAll = register({\n  name: \"selectAll\",\n  trackEvent: { category: \"canvas\" },\n  perform: (elements, appState, value, app) => {\n    if (appState.editingLinearElement) {\n      return false;\n    }\n\n    const selectedElementIds = excludeElementsInFramesFromSelection(\n      elements.filter(\n        (element) =>\n          !element.isDeleted &&\n          !(isTextElement(element) && element.containerId) &&\n          !element.locked,\n      ),\n    ).reduce((map: Record<ExcalidrawElement[\"id\"], true>, element) => {\n      map[element.id] = true;\n      return map;\n    }, {});\n\n    return {\n      appState: selectGroupsForSelectedElements(\n        {\n          ...appState,\n          selectedLinearElement:\n            // single linear element selected\n            Object.keys(selectedElementIds).length === 1 &&\n            isLinearElement(elements[0])\n              ? new LinearElementEditor(elements[0], app.scene)\n              : null,\n          editingGroupId: null,\n          selectedElementIds,\n        },\n        getNonDeletedElements(elements),\n        appState,\n        app,\n      ),\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.selectAll\",\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.A,\n});\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,SAAS;AAC9B,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,+BAA+B,QAAQ,WAAW;AAC3D,SAASC,qBAAqB,EAAEC,aAAa,QAAQ,YAAY;AAEjE,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,oCAAoC,QAAQ,oBAAoB;AAEzE,OAAO,MAAMC,eAAe,GAAGP,QAAQ,CAAC;EACtCQ,IAAI,EAAE,WAAW;EACjBC,UAAU,EAAE;IAAEC,QAAQ,EAAE;EAAS,CAAC;EAClCC,OAAO,EAAEA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,GAAG,KAAK;IAC3C,IAAIF,QAAQ,CAACG,oBAAoB,EAAE;MACjC,OAAO,KAAK;IACd;IAEA,MAAMC,kBAAkB,GAAGX,oCAAoC,CAC7DM,QAAQ,CAACM,MAAM,CACZC,OAAO,IACN,CAACA,OAAO,CAACC,SAAS,IAClB,EAAEjB,aAAa,CAACgB,OAAO,CAAC,IAAIA,OAAO,CAACE,WAAW,CAAC,IAChD,CAACF,OAAO,CAACG,MAAM,CAClB,CACF,CAACC,MAAM,CAAC,CAACC,GAA0C,EAAEL,OAAO,KAAK;MAChEK,GAAG,CAACL,OAAO,CAACM,EAAE,CAAC,GAAG,IAAI;MACtB,OAAOD,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAO;MACLX,QAAQ,EAAEZ,+BAA+B,CACvC;QACE,GAAGY,QAAQ;QACXa,qBAAqB;QACnB;QACAC,MAAM,CAACC,IAAI,CAACX,kBAAkB,CAAC,CAACY,MAAM,KAAK,CAAC,IAC5CzB,eAAe,CAACQ,QAAQ,CAAC,CAAC,CAAC,CAAC,GACxB,IAAIP,mBAAmB,CAACO,QAAQ,CAAC,CAAC,CAAC,EAAEG,GAAG,CAACe,KAAK,CAAC,GAC/C,IAAI;QACVC,cAAc,EAAE,IAAI;QACpBd;MACF,CAAC,EACDf,qBAAqB,CAACU,QAAQ,CAAC,EAC/BC,QAAQ,EACRE,GAAG,CACJ;MACDiB,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EACDC,gBAAgB,EAAE,kBAAkB;EACpCC,OAAO,EAAGC,KAAK,IAAKA,KAAK,CAACpC,IAAI,CAACqC,WAAW,CAAC,IAAID,KAAK,CAACE,GAAG,KAAKtC,IAAI,CAACuC;AACpE,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}