{"ast":null,"code":"import { __assign, __values } from \"tslib\";\n/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { SessionStatus } from '@sentry/types';\nimport { dateTimestampInSeconds, Dsn, isPrimitive, isThenable, logger, normalize, SentryError, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /** @class */function () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of call being processed */\n    this._processing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n    var eventId = hint && hint.event_id;\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n    var eventId = hint && hint.event_id;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var eventId = hint && hint.event_id;\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureSession = function (session) {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to inidcate it's not the first occurence\n      session.update({\n        init: false\n      });\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n    return this._isClientProcessing(timeout).then(function (ready) {\n      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {\n        return ready && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n    var crashed = false;\n    var errored = false;\n    var userAgent;\n    var exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      try {\n        for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    var user = event.user;\n    if (!session.userAgent) {\n      var headers = event.request ? event.request.headers : {};\n      for (var key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n    session.update(__assign(__assign({}, crashed && {\n      status: SessionStatus.Crashed\n    }), {\n      user: user,\n      userAgent: userAgent,\n      errors: session.errors + Number(errored || crashed)\n    }));\n    this.captureSession(session);\n  };\n  /** Deliver captured session to Sentry */\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /** Waits for the client to be done with processing. */\n  BaseClient.prototype._isClientProcessing = function (timeout) {\n    var _this = this;\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n    var _a = this.getOptions().normalizeDepth,\n      normalizeDepth = _a === void 0 ? 3 : _a;\n    var prepared = __assign(__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds()\n    });\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    var finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n    // We prepare the result here with a resolved Event.\n    var result = SyncPromise.resolve(prepared);\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n    return result.then(function (evt) {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  BaseClient.prototype._normalizeEvent = function (event, depth) {\n    if (!event) {\n      return null;\n    }\n    var normalized = __assign(__assign(__assign(__assign(__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return __assign(__assign({}, b), b.data && {\n          data: normalize(b.data, depth)\n        });\n      })\n    }), event.user && {\n      user: normalize(event.user, depth)\n    }), event.contexts && {\n      contexts: normalize(event.contexts, depth)\n    }), event.extra && {\n      extra: normalize(event.extra, depth)\n    });\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n      release = options.release,\n      dist = options.dist,\n      _a = options.maxValueLength,\n      maxValueLength = _a === void 0 ? 250 : _a;\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    var request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var sdkInfo = event.sdk;\n    var integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.getOptions(),\n      beforeSend = _a.beforeSend,\n      sampleRate = _a.sampleRate;\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n    var isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n    }\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      if (prepared === null) {\n        throw new SentryError('An event processor returned null, will not send event.');\n      }\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n      var beforeSendResult = beforeSend(prepared, hint);\n      if (typeof beforeSendResult === 'undefined') {\n        throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n      } else if (isThenable(beforeSendResult)) {\n        return beforeSendResult.then(function (event) {\n          return event;\n        }, function (e) {\n          throw new SentryError(\"beforeSend rejected with \" + e);\n        });\n      }\n      return beforeSendResult;\n    }).then(function (processedEvent) {\n      if (processedEvent === null) {\n        throw new SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n      var session = scope && scope.getSession && scope.getSession();\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n      _this._sendEvent(processedEvent);\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n    this._processing += 1;\n    promise.then(function (value) {\n      _this._processing -= 1;\n      return value;\n    }, function (reason) {\n      _this._processing -= 1;\n      return reason;\n    });\n  };\n  return BaseClient;\n}();\nexport { BaseClient };","map":{"version":3,"names":["Scope","SessionStatus","dateTimestampInSeconds","Dsn","isPrimitive","isThenable","logger","normalize","SentryError","SyncPromise","truncate","uuid4","setupIntegrations","BaseClient","backendClass","options","_integrations","_processing","_backend","_options","dsn","_dsn","prototype","captureException","exception","hint","scope","_this","eventId","event_id","_process","_getBackend","eventFromException","then","event","_captureEvent","result","captureMessage","message","level","promisedEvent","eventFromMessage","String","captureEvent","captureSession","session","release","warn","_sendSession","update","init","getDsn","getOptions","flush","timeout","_isClientProcessing","ready","getTransport","close","transportFlushed","enabled","_isEnabled","getIntegration","integration","id","_oO","_updateSessionFromEvent","crashed","errored","userAgent","exceptions","values","exceptions_1","__values","exceptions_1_1","next","done","ex","value","mechanism","handled","user","headers","request","key","toLowerCase","__assign","status","Crashed","errors","Number","sendSession","resolve","ticked","tick","interval","setInterval","clearInterval","undefined","_prepareEvent","_a","normalizeDepth","prepared","timestamp","_applyClientOptions","_applyIntegrationsMetadata","finalScope","captureContext","clone","applyToEvent","evt","_normalizeEvent","depth","normalized","breadcrumbs","map","b","data","contexts","extra","trace","environment","dist","maxValueLength","url","sdkInfo","sdk","integrationsArray","Object","keys","length","integrations","_sendEvent","sendEvent","_processEvent","finalEvent","reason","error","beforeSend","sampleRate","reject","isTransaction","type","Math","random","isInternalException","__sentry__","beforeSendResult","e","processedEvent","getSession","originalException","promise"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\core\\src\\baseclient.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  SessionStatus,\n  Severity,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of call being processed */\n  protected _processing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n      // After sending, we set init false to inidcate it's not the first occurence\n      session.update({ init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(ready => {\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    let userAgent;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    const user = event.user;\n    if (!session.userAgent) {\n      const headers = event.request ? event.request.headers : {};\n      for (const key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update({\n      ...(crashed && { status: SessionStatus.Crashed }),\n      user,\n      userAgent,\n      errors: session.errors + Number(errored || crashed),\n    });\n    this.captureSession(session);\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param event The event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        if (typeof beforeSendResult === 'undefined') {\n          throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n        } else if (isThenable(beforeSendResult)) {\n          return (beforeSendResult as PromiseLike<Event | null>).then(\n            event => event,\n            e => {\n              throw new SentryError(`beforeSend rejected with ${e}`);\n            },\n          );\n        }\n        return beforeSendResult;\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._processing += 1;\n    promise.then(\n      value => {\n        this._processing -= 1;\n        return value;\n      },\n      reason => {\n        this._processing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}