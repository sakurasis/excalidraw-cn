{"ast":null,"code":"function hashToInteger(id) {\n  let hash = 0;\n  if (id.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < id.length; i++) {\n    const char = id.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n  }\n  return hash;\n}\nexport const getClientColor = id => {\n  // to get more even distribution in case `id` is not uniformly distributed to\n  // begin with, we hash it\n  const hash = Math.abs(hashToInteger(id));\n  // we want to get a multiple of 10 number in the range of 0-360 (in other\n  // words a hue value of step size 10). There are 37 such values including 0.\n  const hue = hash % 37 * 10;\n  const saturation = 100;\n  const lightness = 83;\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n};\n\n/**\n * returns first char, capitalized\n */\nexport const getNameInitial = name => {\n  var _name$trim;\n  // first char can be a surrogate pair, hence using codePointAt\n  const firstCodePoint = name === null || name === void 0 ? void 0 : (_name$trim = name.trim()) === null || _name$trim === void 0 ? void 0 : _name$trim.codePointAt(0);\n  return (firstCodePoint ? String.fromCodePoint(firstCodePoint) : \"?\").toUpperCase();\n};","map":{"version":3,"names":["hashToInteger","id","hash","length","i","char","charCodeAt","getClientColor","Math","abs","hue","saturation","lightness","getNameInitial","name","_name$trim","firstCodePoint","trim","codePointAt","String","fromCodePoint","toUpperCase"],"sources":["D:/project/excalidraw-cn/src/clients.ts"],"sourcesContent":["function hashToInteger(id: string) {\n  let hash = 0;\n  if (id.length === 0) {\n    return hash;\n  }\n  for (let i = 0; i < id.length; i++) {\n    const char = id.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n  }\n  return hash;\n}\n\nexport const getClientColor = (\n  /**\n   * any uniquely identifying key, such as user id or socket id\n   */\n  id: string,\n) => {\n  // to get more even distribution in case `id` is not uniformly distributed to\n  // begin with, we hash it\n  const hash = Math.abs(hashToInteger(id));\n  // we want to get a multiple of 10 number in the range of 0-360 (in other\n  // words a hue value of step size 10). There are 37 such values including 0.\n  const hue = (hash % 37) * 10;\n  const saturation = 100;\n  const lightness = 83;\n\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n};\n\n/**\n * returns first char, capitalized\n */\nexport const getNameInitial = (name?: string | null) => {\n  // first char can be a surrogate pair, hence using codePointAt\n  const firstCodePoint = name?.trim()?.codePointAt(0);\n  return (\n    firstCodePoint ? String.fromCodePoint(firstCodePoint) : \"?\"\n  ).toUpperCase();\n};\n"],"mappings":"AAAA,SAASA,aAAaA,CAACC,EAAU,EAAE;EACjC,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAID,EAAE,CAACE,MAAM,KAAK,CAAC,EAAE;IACnB,OAAOD,IAAI;EACb;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;IAClC,MAAMC,IAAI,GAAGJ,EAAE,CAACK,UAAU,CAACF,CAAC,CAAC;IAC7BF,IAAI,GAAG,CAACA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAGG,IAAI;EAClC;EACA,OAAOH,IAAI;AACb;AAEA,OAAO,MAAMK,cAAc,GAIzBN,EAAU,IACP;EACH;EACA;EACA,MAAMC,IAAI,GAAGM,IAAI,CAACC,GAAG,CAACT,aAAa,CAACC,EAAE,CAAC,CAAC;EACxC;EACA;EACA,MAAMS,GAAG,GAAIR,IAAI,GAAG,EAAE,GAAI,EAAE;EAC5B,MAAMS,UAAU,GAAG,GAAG;EACtB,MAAMC,SAAS,GAAG,EAAE;EAEpB,OAAQ,OAAMF,GAAI,KAAIC,UAAW,MAAKC,SAAU,IAAG;AACrD,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,IAAoB,IAAK;EAAA,IAAAC,UAAA;EACtD;EACA,MAAMC,cAAc,GAAGF,IAAI,aAAJA,IAAI,wBAAAC,UAAA,GAAJD,IAAI,CAAEG,IAAI,EAAE,cAAAF,UAAA,uBAAZA,UAAA,CAAcG,WAAW,CAAC,CAAC,CAAC;EACnD,OAAO,CACLF,cAAc,GAAGG,MAAM,CAACC,aAAa,CAACJ,cAAc,CAAC,GAAG,GAAG,EAC3DK,WAAW,EAAE;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}