{"ast":null,"code":"import _regeneratorRuntime from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{exportToCanvas as _exportToCanvas,exportToSvg as _exportToSvg}from\"../scene/export\";import{getDefaultAppState}from\"../appState\";import{restore}from\"../data/restore\";import{MIME_TYPES}from\"../constants\";import{encodePngMetadata}from\"../data/image\";import{serializeAsJSON as _serializeAsJSON}from\"../data/json\";import{copyBlobToClipboardAsPng,copyTextToSystemClipboard,copyToClipboard}from\"../clipboard\";import Scene from\"../scene/Scene\";import{duplicateElements}from\"../element/newElement\";// getContainerElement and getBoundTextElement and potentially other helpers\n// depend on `Scene` which will not be available when these pure utils are\n// called outside initialized Excalidraw editor instance or even if called\n// from inside Excalidraw if the elements were never cached by Scene (e.g.\n// for library elements).\n//\n// As such, before passing the elements down, we need to initialize a custom\n// Scene instance and assign them to it.\n//\n// FIXME This is a super hacky workaround and we'll need to rewrite this soon.\nvar passElementsSafely=function passElementsSafely(elements){var scene=new Scene();scene.replaceAllElements(duplicateElements(elements));return scene.getNonDeletedElements();};export{MIME_TYPES};export var exportToCanvas=function exportToCanvas(_ref){var elements=_ref.elements,appState=_ref.appState,files=_ref.files,maxWidthOrHeight=_ref.maxWidthOrHeight,getDimensions=_ref.getDimensions,exportPadding=_ref.exportPadding;var _restore=restore({elements:elements,appState:appState},null,null),restoredElements=_restore.elements,restoredAppState=_restore.appState;var exportBackground=restoredAppState.exportBackground,viewBackgroundColor=restoredAppState.viewBackgroundColor;return _exportToCanvas(passElementsSafely(restoredElements),_objectSpread(_objectSpread({},restoredAppState),{},{offsetTop:0,offsetLeft:0,width:0,height:0}),files||{},{exportBackground:exportBackground,exportPadding:exportPadding,viewBackgroundColor:viewBackgroundColor},function(width,height){var _ret$scale;var canvas=document.createElement(\"canvas\");if(maxWidthOrHeight){var _appState$exportScale;if(typeof getDimensions===\"function\"){console.warn(\"`getDimensions()` is ignored when `maxWidthOrHeight` is supplied.\");}var max=Math.max(width,height);// if content is less then maxWidthOrHeight, fallback on supplied scale\nvar scale=maxWidthOrHeight<max?maxWidthOrHeight/max:(_appState$exportScale=appState===null||appState===void 0?void 0:appState.exportScale)!==null&&_appState$exportScale!==void 0?_appState$exportScale:1;canvas.width=width*scale;canvas.height=height*scale;return{canvas:canvas,scale:scale};}var ret=(getDimensions===null||getDimensions===void 0?void 0:getDimensions(width,height))||{width:width,height:height};canvas.width=ret.width;canvas.height=ret.height;return{canvas:canvas,scale:(_ret$scale=ret.scale)!==null&&_ret$scale!==void 0?_ret$scale:1};});};export var exportToBlob=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opts){var _opts$appState;var _opts,_opts$mimeType,mimeType,quality,canvas;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_opts=opts,_opts$mimeType=_opts.mimeType,mimeType=_opts$mimeType===void 0?MIME_TYPES.png:_opts$mimeType,quality=_opts.quality;if(mimeType===MIME_TYPES.png&&typeof quality===\"number\"){console.warn(\"\\\"quality\\\" will be ignored for \\\"\".concat(MIME_TYPES.png,\"\\\" mimeType\"));}// typo in MIME type (should be \"jpeg\")\nif(mimeType===\"image/jpg\"){mimeType=MIME_TYPES.jpg;}if(mimeType===MIME_TYPES.jpg&&!((_opts$appState=opts.appState)!==null&&_opts$appState!==void 0&&_opts$appState.exportBackground)){console.warn(\"Defaulting \\\"exportBackground\\\" to \\\"true\\\" for \\\"\".concat(MIME_TYPES.jpg,\"\\\" mimeType\"));opts=_objectSpread(_objectSpread({},opts),{},{appState:_objectSpread(_objectSpread({},opts.appState),{},{exportBackground:true})});}_context2.next=6;return exportToCanvas(_objectSpread(_objectSpread({},opts),{},{elements:passElementsSafely(opts.elements)}));case 6:canvas=_context2.sent;quality=quality?quality:/image\\/jpe?g/.test(mimeType)?0.92:0.8;return _context2.abrupt(\"return\",new Promise(function(resolve,reject){canvas.toBlob(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(blob){var _opts$appState2;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:if(blob){_context.next=2;break;}return _context.abrupt(\"return\",reject(new Error(\"couldn't export to blob\")));case 2:if(!(blob&&mimeType===MIME_TYPES.png&&(_opts$appState2=opts.appState)!==null&&_opts$appState2!==void 0&&_opts$appState2.exportEmbedScene)){_context.next=6;break;}_context.next=5;return encodePngMetadata({blob:blob,metadata:_serializeAsJSON(// NOTE as long as we're using the Scene hack, we need to ensure\n// we pass the original, uncloned elements when serializing\n// so that we keep ids stable\nopts.elements,opts.appState,opts.files||{},\"local\")});case 5:blob=_context.sent;case 6:resolve(blob);case 7:case\"end\":return _context.stop();}},_callee);}));return function(_x2){return _ref3.apply(this,arguments);};}(),mimeType,quality);}));case 9:case\"end\":return _context2.stop();}},_callee2);}));return function exportToBlob(_x){return _ref2.apply(this,arguments);};}();export var exportToSvg=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref4){var elements,_ref4$appState,appState,_ref4$files,files,exportPadding,_restore2,restoredElements,restoredAppState,exportAppState;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:elements=_ref4.elements,_ref4$appState=_ref4.appState,appState=_ref4$appState===void 0?getDefaultAppState():_ref4$appState,_ref4$files=_ref4.files,files=_ref4$files===void 0?{}:_ref4$files,exportPadding=_ref4.exportPadding;_restore2=restore({elements:elements,appState:appState},null,null),restoredElements=_restore2.elements,restoredAppState=_restore2.appState;exportAppState=_objectSpread(_objectSpread({},restoredAppState),{},{exportPadding:exportPadding});return _context3.abrupt(\"return\",_exportToSvg(passElementsSafely(restoredElements),exportAppState,files,{// NOTE as long as we're using the Scene hack, we need to ensure\n// we pass the original, uncloned elements when serializing\n// so that we keep ids stable. Hence adding the serializeAsJSON helper\n// support into the downstream exportToSvg function.\nserializeAsJSON:function serializeAsJSON(){return _serializeAsJSON(restoredElements,exportAppState,files||{},\"local\");}}));case 4:case\"end\":return _context3.stop();}},_callee3);}));return function exportToSvg(_x3){return _ref5.apply(this,arguments);};}();export var exportToClipboard=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(opts){var svg;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:if(!(opts.type===\"svg\")){_context4.next=8;break;}_context4.next=3;return exportToSvg(opts);case 3:svg=_context4.sent;_context4.next=6;return copyTextToSystemClipboard(svg.outerHTML);case 6:_context4.next=19;break;case 8:if(!(opts.type===\"png\")){_context4.next=13;break;}_context4.next=11;return copyBlobToClipboardAsPng(exportToBlob(opts));case 11:_context4.next=19;break;case 13:if(!(opts.type===\"json\")){_context4.next=18;break;}_context4.next=16;return copyToClipboard(opts.elements,opts.files);case 16:_context4.next=19;break;case 18:throw new Error(\"Invalid export type\");case 19:case\"end\":return _context4.stop();}},_callee4);}));return function exportToClipboard(_x4){return _ref6.apply(this,arguments);};}();export{serializeAsJSON,serializeLibraryAsJSON}from\"../data/json\";export{loadFromBlob,loadSceneOrLibraryFromBlob,loadLibraryFromBlob}from\"../data/blob\";export{getFreeDrawSvgPath}from\"../renderer/renderElement\";export{mergeLibraryItems}from\"../data/library\";","map":{"version":3,"names":["exportToCanvas","_exportToCanvas","exportToSvg","_exportToSvg","getDefaultAppState","restore","MIME_TYPES","encodePngMetadata","serializeAsJSON","copyBlobToClipboardAsPng","copyTextToSystemClipboard","copyToClipboard","Scene","duplicateElements","passElementsSafely","elements","scene","replaceAllElements","getNonDeletedElements","_ref","appState","files","maxWidthOrHeight","getDimensions","exportPadding","_restore","restoredElements","restoredAppState","exportBackground","viewBackgroundColor","_objectSpread","offsetTop","offsetLeft","width","height","_ret$scale","canvas","document","createElement","_appState$exportScale","console","warn","max","Math","scale","exportScale","ret","exportToBlob","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","opts","_opts$appState","_opts","_opts$mimeType","mimeType","quality","wrap","_callee2$","_context2","prev","next","png","concat","jpg","sent","test","abrupt","Promise","resolve","reject","toBlob","_ref3","_callee","blob","_opts$appState2","_callee$","_context","Error","exportEmbedScene","metadata","stop","_x2","apply","arguments","_x","_ref5","_callee3","_ref4","_ref4$appState","_ref4$files","_restore2","exportAppState","_callee3$","_context3","_x3","exportToClipboard","_ref6","_callee4","svg","_callee4$","_context4","type","outerHTML","_x4","serializeLibraryAsJSON","loadFromBlob","loadSceneOrLibraryFromBlob","loadLibraryFromBlob","getFreeDrawSvgPath","mergeLibraryItems"],"sources":["D:/project/excalidraw-cn/src/packages/utils.ts"],"sourcesContent":["import {\n  exportToCanvas as _exportToCanvas,\n  exportToSvg as _exportToSvg,\n} from \"../scene/export\";\nimport { getDefaultAppState } from \"../appState\";\nimport { AppState, BinaryFiles } from \"../types\";\nimport { ExcalidrawElement, NonDeleted } from \"../element/types\";\nimport { restore } from \"../data/restore\";\nimport { MIME_TYPES } from \"../constants\";\nimport { encodePngMetadata } from \"../data/image\";\nimport { serializeAsJSON } from \"../data/json\";\nimport {\n  copyBlobToClipboardAsPng,\n  copyTextToSystemClipboard,\n  copyToClipboard,\n} from \"../clipboard\";\nimport Scene from \"../scene/Scene\";\nimport { duplicateElements } from \"../element/newElement\";\n\n// getContainerElement and getBoundTextElement and potentially other helpers\n// depend on `Scene` which will not be available when these pure utils are\n// called outside initialized Excalidraw editor instance or even if called\n// from inside Excalidraw if the elements were never cached by Scene (e.g.\n// for library elements).\n//\n// As such, before passing the elements down, we need to initialize a custom\n// Scene instance and assign them to it.\n//\n// FIXME This is a super hacky workaround and we'll need to rewrite this soon.\nconst passElementsSafely = (elements: readonly ExcalidrawElement[]) => {\n  const scene = new Scene();\n  scene.replaceAllElements(duplicateElements(elements));\n  return scene.getNonDeletedElements();\n};\n\nexport { MIME_TYPES };\n\ntype ExportOpts = {\n  elements: readonly NonDeleted<ExcalidrawElement>[];\n  appState?: Partial<Omit<AppState, \"offsetTop\" | \"offsetLeft\">>;\n  files: BinaryFiles | null;\n  maxWidthOrHeight?: number;\n  getDimensions?: (\n    width: number,\n    height: number,\n  ) => { width: number; height: number; scale?: number };\n};\n\nexport const exportToCanvas = ({\n  elements,\n  appState,\n  files,\n  maxWidthOrHeight,\n  getDimensions,\n  exportPadding,\n}: ExportOpts & {\n  exportPadding?: number;\n}) => {\n  const { elements: restoredElements, appState: restoredAppState } = restore(\n    { elements, appState },\n    null,\n    null,\n  );\n  const { exportBackground, viewBackgroundColor } = restoredAppState;\n  return _exportToCanvas(\n    passElementsSafely(restoredElements),\n    { ...restoredAppState, offsetTop: 0, offsetLeft: 0, width: 0, height: 0 },\n    files || {},\n    { exportBackground, exportPadding, viewBackgroundColor },\n    (width: number, height: number) => {\n      const canvas = document.createElement(\"canvas\");\n\n      if (maxWidthOrHeight) {\n        if (typeof getDimensions === \"function\") {\n          console.warn(\n            \"`getDimensions()` is ignored when `maxWidthOrHeight` is supplied.\",\n          );\n        }\n\n        const max = Math.max(width, height);\n\n        // if content is less then maxWidthOrHeight, fallback on supplied scale\n        const scale =\n          maxWidthOrHeight < max\n            ? maxWidthOrHeight / max\n            : appState?.exportScale ?? 1;\n\n        canvas.width = width * scale;\n        canvas.height = height * scale;\n\n        return {\n          canvas,\n          scale,\n        };\n      }\n\n      const ret = getDimensions?.(width, height) || { width, height };\n\n      canvas.width = ret.width;\n      canvas.height = ret.height;\n\n      return {\n        canvas,\n        scale: ret.scale ?? 1,\n      };\n    },\n  );\n};\n\nexport const exportToBlob = async (\n  opts: ExportOpts & {\n    mimeType?: string;\n    quality?: number;\n    exportPadding?: number;\n  },\n): Promise<Blob> => {\n  let { mimeType = MIME_TYPES.png, quality } = opts;\n\n  if (mimeType === MIME_TYPES.png && typeof quality === \"number\") {\n    console.warn(`\"quality\" will be ignored for \"${MIME_TYPES.png}\" mimeType`);\n  }\n\n  // typo in MIME type (should be \"jpeg\")\n  if (mimeType === \"image/jpg\") {\n    mimeType = MIME_TYPES.jpg;\n  }\n\n  if (mimeType === MIME_TYPES.jpg && !opts.appState?.exportBackground) {\n    console.warn(\n      `Defaulting \"exportBackground\" to \"true\" for \"${MIME_TYPES.jpg}\" mimeType`,\n    );\n    opts = {\n      ...opts,\n      appState: { ...opts.appState, exportBackground: true },\n    };\n  }\n\n  const canvas = await exportToCanvas({\n    ...opts,\n    elements: passElementsSafely(opts.elements),\n  });\n  quality = quality ? quality : /image\\/jpe?g/.test(mimeType) ? 0.92 : 0.8;\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(\n      async (blob) => {\n        if (!blob) {\n          return reject(new Error(\"couldn't export to blob\"));\n        }\n        if (\n          blob &&\n          mimeType === MIME_TYPES.png &&\n          opts.appState?.exportEmbedScene\n        ) {\n          blob = await encodePngMetadata({\n            blob,\n            metadata: serializeAsJSON(\n              // NOTE as long as we're using the Scene hack, we need to ensure\n              // we pass the original, uncloned elements when serializing\n              // so that we keep ids stable\n              opts.elements,\n              opts.appState,\n              opts.files || {},\n              \"local\",\n            ),\n          });\n        }\n        resolve(blob);\n      },\n      mimeType,\n      quality,\n    );\n  });\n};\n\nexport const exportToSvg = async ({\n  elements,\n  appState = getDefaultAppState(),\n  files = {},\n  exportPadding,\n}: Omit<ExportOpts, \"getDimensions\"> & {\n  exportPadding?: number;\n}): Promise<SVGSVGElement> => {\n  const { elements: restoredElements, appState: restoredAppState } = restore(\n    { elements, appState },\n    null,\n    null,\n  );\n\n  const exportAppState = {\n    ...restoredAppState,\n    exportPadding,\n  };\n\n  return _exportToSvg(\n    passElementsSafely(restoredElements),\n    exportAppState,\n    files,\n    {\n      // NOTE as long as we're using the Scene hack, we need to ensure\n      // we pass the original, uncloned elements when serializing\n      // so that we keep ids stable. Hence adding the serializeAsJSON helper\n      // support into the downstream exportToSvg function.\n      serializeAsJSON: () =>\n        serializeAsJSON(restoredElements, exportAppState, files || {}, \"local\"),\n    },\n  );\n};\n\nexport const exportToClipboard = async (\n  opts: ExportOpts & {\n    mimeType?: string;\n    quality?: number;\n    type: \"png\" | \"svg\" | \"json\";\n  },\n) => {\n  if (opts.type === \"svg\") {\n    const svg = await exportToSvg(opts);\n    await copyTextToSystemClipboard(svg.outerHTML);\n  } else if (opts.type === \"png\") {\n    await copyBlobToClipboardAsPng(exportToBlob(opts));\n  } else if (opts.type === \"json\") {\n    await copyToClipboard(opts.elements, opts.files);\n  } else {\n    throw new Error(\"Invalid export type\");\n  }\n};\n\nexport { serializeAsJSON, serializeLibraryAsJSON } from \"../data/json\";\nexport {\n  loadFromBlob,\n  loadSceneOrLibraryFromBlob,\n  loadLibraryFromBlob,\n} from \"../data/blob\";\nexport { getFreeDrawSvgPath } from \"../renderer/renderElement\";\nexport { mergeLibraryItems } from \"../data/library\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}