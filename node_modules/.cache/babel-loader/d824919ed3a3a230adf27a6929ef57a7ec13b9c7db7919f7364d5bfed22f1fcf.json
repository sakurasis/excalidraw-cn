{"ast":null,"code":"import _toConsumableArray from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { rotatePoints, rotateLines } from '../geometry';\nexport function polygonHachureLines(polygonList, o) {\n  var angle = o.hachureAngle + 90;\n  var gap = o.hachureGap;\n  if (gap < 0) {\n    gap = o.strokeWidth * 4;\n  }\n  gap = Math.max(gap, 0.1);\n  var rotationCenter = [0, 0];\n  if (angle) {\n    var _iterator = _createForOfIteratorHelper(polygonList),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var polygon = _step.value;\n        rotatePoints(polygon, rotationCenter, angle);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  var lines = straightHachureLines(polygonList, gap);\n  if (angle) {\n    var _iterator2 = _createForOfIteratorHelper(polygonList),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _polygon = _step2.value;\n        rotatePoints(_polygon, rotationCenter, -angle);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    rotateLines(lines, rotationCenter, -angle);\n  }\n  return lines;\n}\nfunction straightHachureLines(polygonList, gap) {\n  var vertexArray = [];\n  var _iterator3 = _createForOfIteratorHelper(polygonList),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var polygon = _step3.value;\n      var _vertices = _toConsumableArray(polygon);\n      if (_vertices[0].join(',') !== _vertices[_vertices.length - 1].join(',')) {\n        _vertices.push([_vertices[0][0], _vertices[0][1]]);\n      }\n      if (_vertices.length > 2) {\n        vertexArray.push(_vertices);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var lines = [];\n  gap = Math.max(gap, 0.1);\n  // Create sorted edges table\n  var edges = [];\n  for (var _i = 0, _vertexArray = vertexArray; _i < _vertexArray.length; _i++) {\n    var vertices = _vertexArray[_i];\n    for (var i = 0; i < vertices.length - 1; i++) {\n      var p1 = vertices[i];\n      var p2 = vertices[i + 1];\n      if (p1[1] !== p2[1]) {\n        var ymin = Math.min(p1[1], p2[1]);\n        edges.push({\n          ymin: ymin,\n          ymax: Math.max(p1[1], p2[1]),\n          x: ymin === p1[1] ? p1[0] : p2[0],\n          islope: (p2[0] - p1[0]) / (p2[1] - p1[1])\n        });\n      }\n    }\n  }\n  edges.sort(function (e1, e2) {\n    if (e1.ymin < e2.ymin) {\n      return -1;\n    }\n    if (e1.ymin > e2.ymin) {\n      return 1;\n    }\n    if (e1.x < e2.x) {\n      return -1;\n    }\n    if (e1.x > e2.x) {\n      return 1;\n    }\n    if (e1.ymax === e2.ymax) {\n      return 0;\n    }\n    return (e1.ymax - e2.ymax) / Math.abs(e1.ymax - e2.ymax);\n  });\n  if (!edges.length) {\n    return lines;\n  }\n  // Start scanning\n  var activeEdges = [];\n  var y = edges[0].ymin;\n  while (activeEdges.length || edges.length) {\n    if (edges.length) {\n      var ix = -1;\n      for (var _i2 = 0; _i2 < edges.length; _i2++) {\n        if (edges[_i2].ymin > y) {\n          break;\n        }\n        ix = _i2;\n      }\n      var removed = edges.splice(0, ix + 1);\n      removed.forEach(function (edge) {\n        activeEdges.push({\n          s: y,\n          edge: edge\n        });\n      });\n    }\n    activeEdges = activeEdges.filter(function (ae) {\n      if (ae.edge.ymax <= y) {\n        return false;\n      }\n      return true;\n    });\n    activeEdges.sort(function (ae1, ae2) {\n      if (ae1.edge.x === ae2.edge.x) {\n        return 0;\n      }\n      return (ae1.edge.x - ae2.edge.x) / Math.abs(ae1.edge.x - ae2.edge.x);\n    });\n    // fill between the edges\n    if (activeEdges.length > 1) {\n      for (var _i3 = 0; _i3 < activeEdges.length; _i3 = _i3 + 2) {\n        var nexti = _i3 + 1;\n        if (nexti >= activeEdges.length) {\n          break;\n        }\n        var ce = activeEdges[_i3].edge;\n        var ne = activeEdges[nexti].edge;\n        lines.push([[Math.round(ce.x), y], [Math.round(ne.x), y]]);\n      }\n    }\n    y += gap;\n    activeEdges.forEach(function (ae) {\n      ae.edge.x = ae.edge.x + gap * ae.edge.islope;\n    });\n  }\n  return lines;\n}","map":{"version":3,"names":["rotatePoints","rotateLines","polygonHachureLines","polygonList","o","angle","hachureAngle","gap","hachureGap","strokeWidth","Math","max","rotationCenter","_iterator","_createForOfIteratorHelper","_step","s","n","done","polygon","value","err","e","f","lines","straightHachureLines","_iterator2","_step2","vertexArray","_iterator3","_step3","vertices","_toConsumableArray","join","length","push","edges","_i","_vertexArray","i","p1","p2","ymin","min","ymax","x","islope","sort","e1","e2","abs","activeEdges","y","ix","removed","splice","forEach","edge","filter","ae","ae1","ae2","nexti","ce","ne","round"],"sources":["D:/project/excalidraw-cn/node_modules/roughjs/bin/fillers/scan-line-hachure.js"],"sourcesContent":["import { rotatePoints, rotateLines } from '../geometry';\nexport function polygonHachureLines(polygonList, o) {\n    const angle = o.hachureAngle + 90;\n    let gap = o.hachureGap;\n    if (gap < 0) {\n        gap = o.strokeWidth * 4;\n    }\n    gap = Math.max(gap, 0.1);\n    const rotationCenter = [0, 0];\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, angle);\n        }\n    }\n    const lines = straightHachureLines(polygonList, gap);\n    if (angle) {\n        for (const polygon of polygonList) {\n            rotatePoints(polygon, rotationCenter, -angle);\n        }\n        rotateLines(lines, rotationCenter, -angle);\n    }\n    return lines;\n}\nfunction straightHachureLines(polygonList, gap) {\n    const vertexArray = [];\n    for (const polygon of polygonList) {\n        const vertices = [...polygon];\n        if (vertices[0].join(',') !== vertices[vertices.length - 1].join(',')) {\n            vertices.push([vertices[0][0], vertices[0][1]]);\n        }\n        if (vertices.length > 2) {\n            vertexArray.push(vertices);\n        }\n    }\n    const lines = [];\n    gap = Math.max(gap, 0.1);\n    // Create sorted edges table\n    const edges = [];\n    for (const vertices of vertexArray) {\n        for (let i = 0; i < vertices.length - 1; i++) {\n            const p1 = vertices[i];\n            const p2 = vertices[i + 1];\n            if (p1[1] !== p2[1]) {\n                const ymin = Math.min(p1[1], p2[1]);\n                edges.push({\n                    ymin,\n                    ymax: Math.max(p1[1], p2[1]),\n                    x: ymin === p1[1] ? p1[0] : p2[0],\n                    islope: (p2[0] - p1[0]) / (p2[1] - p1[1]),\n                });\n            }\n        }\n    }\n    edges.sort((e1, e2) => {\n        if (e1.ymin < e2.ymin) {\n            return -1;\n        }\n        if (e1.ymin > e2.ymin) {\n            return 1;\n        }\n        if (e1.x < e2.x) {\n            return -1;\n        }\n        if (e1.x > e2.x) {\n            return 1;\n        }\n        if (e1.ymax === e2.ymax) {\n            return 0;\n        }\n        return (e1.ymax - e2.ymax) / Math.abs((e1.ymax - e2.ymax));\n    });\n    if (!edges.length) {\n        return lines;\n    }\n    // Start scanning\n    let activeEdges = [];\n    let y = edges[0].ymin;\n    while (activeEdges.length || edges.length) {\n        if (edges.length) {\n            let ix = -1;\n            for (let i = 0; i < edges.length; i++) {\n                if (edges[i].ymin > y) {\n                    break;\n                }\n                ix = i;\n            }\n            const removed = edges.splice(0, ix + 1);\n            removed.forEach((edge) => {\n                activeEdges.push({ s: y, edge });\n            });\n        }\n        activeEdges = activeEdges.filter((ae) => {\n            if (ae.edge.ymax <= y) {\n                return false;\n            }\n            return true;\n        });\n        activeEdges.sort((ae1, ae2) => {\n            if (ae1.edge.x === ae2.edge.x) {\n                return 0;\n            }\n            return (ae1.edge.x - ae2.edge.x) / Math.abs((ae1.edge.x - ae2.edge.x));\n        });\n        // fill between the edges\n        if (activeEdges.length > 1) {\n            for (let i = 0; i < activeEdges.length; i = i + 2) {\n                const nexti = i + 1;\n                if (nexti >= activeEdges.length) {\n                    break;\n                }\n                const ce = activeEdges[i].edge;\n                const ne = activeEdges[nexti].edge;\n                lines.push([\n                    [Math.round(ce.x), y],\n                    [Math.round(ne.x), y],\n                ]);\n            }\n        }\n        y += gap;\n        activeEdges.forEach((ae) => {\n            ae.edge.x = ae.edge.x + (gap * ae.edge.islope);\n        });\n    }\n    return lines;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}