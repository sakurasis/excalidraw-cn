{"ast":null,"code":"/**\n * This is a 2D Projective Geometric Algebra implementation.\n *\n * For wider context on geometric algebra visit see https://bivector.net.\n *\n * For this specific algebra see cheatsheet https://bivector.net/2DPGA.pdf.\n *\n * Converted from generator written by enki, with a ton of added on top.\n *\n * This library uses 8-vectors to represent points, directions and lines\n * in 2D space.\n *\n * An array `[a, b, c, d, e, f, g, h]` represents a n(8)vector:\n *   a + b*e0 + c*e1 + d*e2 + e*e01 + f*e20 + g*e12 + h*e012\n *\n * See GAPoint, GALine, GADirection and GATransform modules for common\n * operations.\n */export var point=function point(x,y){return[0,0,0,0,y,x,1,0];};export var origin=function origin(){return[0,0,0,0,0,0,1,0];};export var direction=function direction(x,y){var norm=Math.hypot(x,y);// same as `inorm(direction(x, y))`\nreturn[0,0,0,0,y/norm,x/norm,0,0];};export var offset=function offset(x,y){return[0,0,0,0,y,x,0,0];};/// This is the \"implementation\" part of the library\n// These are labels for what each number in an nvector represents\nvar NVECTOR_BASE=[\"1\",\"e0\",\"e1\",\"e2\",\"e01\",\"e20\",\"e12\",\"e012\"];// Used to represent points, lines and transformations\nexport var nvector=function nvector(){var value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var result=[0,0,0,0,0,0,0,0];if(index<0||index>7){throw new Error(\"Expected `index` between 0 and 7, got `\".concat(index,\"`\"));}if(value!==0){result[index]=value;}return result;};var STRING_EPSILON=0.000001;export var toString=function toString(nvector){var result=nvector.map(function(value,index){return Math.abs(value)>STRING_EPSILON?value.toFixed(7).replace(/(\\.|0+)$/,\"\")+(index>0?NVECTOR_BASE[index]:\"\"):null;}).filter(function(representation){return representation!=null;}).join(\" + \");return result===\"\"?\"0\":result;};// Reverse the order of the basis blades.\nexport var reverse=function reverse(nvector){return[nvector[0],nvector[1],nvector[2],nvector[3],-nvector[4],-nvector[5],-nvector[6],-nvector[7]];};// Poincare duality operator.\nexport var dual=function dual(nvector){return[nvector[7],nvector[6],nvector[5],nvector[4],nvector[3],nvector[2],nvector[1],nvector[0]];};// Clifford Conjugation\nexport var conjugate=function conjugate(nvector){return[nvector[0],-nvector[1],-nvector[2],-nvector[3],-nvector[4],-nvector[5],-nvector[6],nvector[7]];};// Main involution\nexport var involute=function involute(nvector){return[nvector[0],-nvector[1],-nvector[2],-nvector[3],nvector[4],nvector[5],nvector[6],-nvector[7]];};// Multivector addition\nexport var add=function add(a,b){if(isNumber(b)){return[a[0]+b,a[1],a[2],a[3],a[4],a[5],a[6],a[7]];}return[a[0]+b[0],a[1]+b[1],a[2]+b[2],a[3]+b[3],a[4]+b[4],a[5]+b[5],a[6]+b[6],a[7]+b[7]];};// Multivector subtraction\nexport var sub=function sub(a,b){if(isNumber(b)){return[a[0]-b,a[1],a[2],a[3],a[4],a[5],a[6],a[7]];}return[a[0]-b[0],a[1]-b[1],a[2]-b[2],a[3]-b[3],a[4]-b[4],a[5]-b[5],a[6]-b[6],a[7]-b[7]];};// The geometric product.\nexport var mul=function mul(a,b){if(isNumber(b)){return[a[0]*b,a[1]*b,a[2]*b,a[3]*b,a[4]*b,a[5]*b,a[6]*b,a[7]*b];}return[mulScalar(a,b),b[1]*a[0]+b[0]*a[1]-b[4]*a[2]+b[5]*a[3]+b[2]*a[4]-b[3]*a[5]-b[7]*a[6]-b[6]*a[7],b[2]*a[0]+b[0]*a[2]-b[6]*a[3]+b[3]*a[6],b[3]*a[0]+b[6]*a[2]+b[0]*a[3]-b[2]*a[6],b[4]*a[0]+b[2]*a[1]-b[1]*a[2]+b[7]*a[3]+b[0]*a[4]+b[6]*a[5]-b[5]*a[6]+b[3]*a[7],b[5]*a[0]-b[3]*a[1]+b[7]*a[2]+b[1]*a[3]-b[6]*a[4]+b[0]*a[5]+b[4]*a[6]+b[2]*a[7],b[6]*a[0]+b[3]*a[2]-b[2]*a[3]+b[0]*a[6],b[7]*a[0]+b[6]*a[1]+b[5]*a[2]+b[4]*a[3]+b[3]*a[4]+b[2]*a[5]+b[1]*a[6]+b[0]*a[7]];};export var mulScalar=function mulScalar(a,b){return b[0]*a[0]+b[2]*a[2]+b[3]*a[3]-b[6]*a[6];};// The outer/exterior/wedge product.\nexport var meet=function meet(a,b){return[b[0]*a[0],b[1]*a[0]+b[0]*a[1],b[2]*a[0]+b[0]*a[2],b[3]*a[0]+b[0]*a[3],b[4]*a[0]+b[2]*a[1]-b[1]*a[2]+b[0]*a[4],b[5]*a[0]-b[3]*a[1]+b[1]*a[3]+b[0]*a[5],b[6]*a[0]+b[3]*a[2]-b[2]*a[3]+b[0]*a[6],b[7]*a[0]+b[6]*a[1]+b[5]*a[2]+b[4]*a[3]+b[3]*a[4]+b[2]*a[5]+b[1]*a[6]];};// The regressive product.\nexport var join=function join(a,b){return[joinScalar(a,b),a[1]*b[7]+a[4]*b[5]-a[5]*b[4]+a[7]*b[1],a[2]*b[7]-a[4]*b[6]+a[6]*b[4]+a[7]*b[2],a[3]*b[7]+a[5]*b[6]-a[6]*b[5]+a[7]*b[3],a[4]*b[7]+a[7]*b[4],a[5]*b[7]+a[7]*b[5],a[6]*b[7]+a[7]*b[6],a[7]*b[7]];};export var joinScalar=function joinScalar(a,b){return a[0]*b[7]+a[1]*b[6]+a[2]*b[5]+a[3]*b[4]+a[4]*b[3]+a[5]*b[2]+a[6]*b[1]+a[7]*b[0];};// The inner product.\nexport var dot=function dot(a,b){return[b[0]*a[0]+b[2]*a[2]+b[3]*a[3]-b[6]*a[6],b[1]*a[0]+b[0]*a[1]-b[4]*a[2]+b[5]*a[3]+b[2]*a[4]-b[3]*a[5]-b[7]*a[6]-b[6]*a[7],b[2]*a[0]+b[0]*a[2]-b[6]*a[3]+b[3]*a[6],b[3]*a[0]+b[6]*a[2]+b[0]*a[3]-b[2]*a[6],b[4]*a[0]+b[7]*a[3]+b[0]*a[4]+b[3]*a[7],b[5]*a[0]+b[7]*a[2]+b[0]*a[5]+b[2]*a[7],b[6]*a[0]+b[0]*a[6],b[7]*a[0]+b[0]*a[7]];};export var norm=function norm(a){return Math.sqrt(Math.abs(a[0]*a[0]-a[2]*a[2]-a[3]*a[3]+a[6]*a[6]));};export var inorm=function inorm(a){return Math.sqrt(Math.abs(a[7]*a[7]-a[5]*a[5]-a[4]*a[4]+a[1]*a[1]));};export var normalized=function normalized(a){var n=norm(a);if(n===0||n===1){return a;}var sign=a[6]<0?-1:1;return mul(a,sign/n);};export var inormalized=function inormalized(a){var n=inorm(a);if(n===0||n===1){return a;}return mul(a,1/n);};var isNumber=function isNumber(a){return typeof a===\"number\";};export var E0=nvector(1,1);export var E1=nvector(1,2);export var E2=nvector(1,3);export var E01=nvector(1,4);export var E20=nvector(1,5);export var E12=nvector(1,6);export var E012=nvector(1,7);export var I=E012;","map":{"version":3,"names":["point","x","y","origin","direction","norm","Math","hypot","offset","NVECTOR_BASE","nvector","value","arguments","length","undefined","index","result","Error","concat","STRING_EPSILON","toString","map","abs","toFixed","replace","filter","representation","join","reverse","dual","conjugate","involute","add","a","b","isNumber","sub","mul","mulScalar","meet","joinScalar","dot","sqrt","inorm","normalized","n","sign","inormalized","E0","E1","E2","E01","E20","E12","E012","I"],"sources":["D:/project/excalidraw-cn/src/ga.ts"],"sourcesContent":["/**\n * This is a 2D Projective Geometric Algebra implementation.\n *\n * For wider context on geometric algebra visit see https://bivector.net.\n *\n * For this specific algebra see cheatsheet https://bivector.net/2DPGA.pdf.\n *\n * Converted from generator written by enki, with a ton of added on top.\n *\n * This library uses 8-vectors to represent points, directions and lines\n * in 2D space.\n *\n * An array `[a, b, c, d, e, f, g, h]` represents a n(8)vector:\n *   a + b*e0 + c*e1 + d*e2 + e*e01 + f*e20 + g*e12 + h*e012\n *\n * See GAPoint, GALine, GADirection and GATransform modules for common\n * operations.\n */\n\nexport type Point = NVector;\nexport type Direction = NVector;\nexport type Line = NVector;\nexport type Transform = NVector;\n\nexport const point = (x: number, y: number): Point => [0, 0, 0, 0, y, x, 1, 0];\n\nexport const origin = (): Point => [0, 0, 0, 0, 0, 0, 1, 0];\n\nexport const direction = (x: number, y: number): Direction => {\n  const norm = Math.hypot(x, y); // same as `inorm(direction(x, y))`\n  return [0, 0, 0, 0, y / norm, x / norm, 0, 0];\n};\n\nexport const offset = (x: number, y: number): Direction => [\n  0,\n  0,\n  0,\n  0,\n  y,\n  x,\n  0,\n  0,\n];\n\n/// This is the \"implementation\" part of the library\n\ntype NVector = readonly [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n];\n\n// These are labels for what each number in an nvector represents\nconst NVECTOR_BASE = [\"1\", \"e0\", \"e1\", \"e2\", \"e01\", \"e20\", \"e12\", \"e012\"];\n\n// Used to represent points, lines and transformations\nexport const nvector = (value: number = 0, index: number = 0): NVector => {\n  const result = [0, 0, 0, 0, 0, 0, 0, 0];\n  if (index < 0 || index > 7) {\n    throw new Error(`Expected \\`index\\` between 0 and 7, got \\`${index}\\``);\n  }\n  if (value !== 0) {\n    result[index] = value;\n  }\n  return result as unknown as NVector;\n};\n\nconst STRING_EPSILON = 0.000001;\nexport const toString = (nvector: NVector): string => {\n  const result = nvector\n    .map((value, index) =>\n      Math.abs(value) > STRING_EPSILON\n        ? value.toFixed(7).replace(/(\\.|0+)$/, \"\") +\n          (index > 0 ? NVECTOR_BASE[index] : \"\")\n        : null,\n    )\n    .filter((representation) => representation != null)\n    .join(\" + \");\n  return result === \"\" ? \"0\" : result;\n};\n\n// Reverse the order of the basis blades.\nexport const reverse = (nvector: NVector): NVector => [\n  nvector[0],\n  nvector[1],\n  nvector[2],\n  nvector[3],\n  -nvector[4],\n  -nvector[5],\n  -nvector[6],\n  -nvector[7],\n];\n\n// Poincare duality operator.\nexport const dual = (nvector: NVector): NVector => [\n  nvector[7],\n  nvector[6],\n  nvector[5],\n  nvector[4],\n  nvector[3],\n  nvector[2],\n  nvector[1],\n  nvector[0],\n];\n\n// Clifford Conjugation\nexport const conjugate = (nvector: NVector): NVector => [\n  nvector[0],\n  -nvector[1],\n  -nvector[2],\n  -nvector[3],\n  -nvector[4],\n  -nvector[5],\n  -nvector[6],\n  nvector[7],\n];\n\n// Main involution\nexport const involute = (nvector: NVector): NVector => [\n  nvector[0],\n  -nvector[1],\n  -nvector[2],\n  -nvector[3],\n  nvector[4],\n  nvector[5],\n  nvector[6],\n  -nvector[7],\n];\n\n// Multivector addition\nexport const add = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [a[0] + b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n  return [\n    a[0] + b[0],\n    a[1] + b[1],\n    a[2] + b[2],\n    a[3] + b[3],\n    a[4] + b[4],\n    a[5] + b[5],\n    a[6] + b[6],\n    a[7] + b[7],\n  ];\n};\n\n// Multivector subtraction\nexport const sub = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [a[0] - b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n  return [\n    a[0] - b[0],\n    a[1] - b[1],\n    a[2] - b[2],\n    a[3] - b[3],\n    a[4] - b[4],\n    a[5] - b[5],\n    a[6] - b[6],\n    a[7] - b[7],\n  ];\n};\n\n// The geometric product.\nexport const mul = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [\n      a[0] * b,\n      a[1] * b,\n      a[2] * b,\n      a[3] * b,\n      a[4] * b,\n      a[5] * b,\n      a[6] * b,\n      a[7] * b,\n    ];\n  }\n  return [\n    mulScalar(a, b),\n    b[1] * a[0] +\n      b[0] * a[1] -\n      b[4] * a[2] +\n      b[5] * a[3] +\n      b[2] * a[4] -\n      b[3] * a[5] -\n      b[7] * a[6] -\n      b[6] * a[7],\n    b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],\n    b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],\n    b[4] * a[0] +\n      b[2] * a[1] -\n      b[1] * a[2] +\n      b[7] * a[3] +\n      b[0] * a[4] +\n      b[6] * a[5] -\n      b[5] * a[6] +\n      b[3] * a[7],\n    b[5] * a[0] -\n      b[3] * a[1] +\n      b[7] * a[2] +\n      b[1] * a[3] -\n      b[6] * a[4] +\n      b[0] * a[5] +\n      b[4] * a[6] +\n      b[2] * a[7],\n    b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],\n    b[7] * a[0] +\n      b[6] * a[1] +\n      b[5] * a[2] +\n      b[4] * a[3] +\n      b[3] * a[4] +\n      b[2] * a[5] +\n      b[1] * a[6] +\n      b[0] * a[7],\n  ];\n};\n\nexport const mulScalar = (a: NVector, b: NVector): number =>\n  b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6];\n\n// The outer/exterior/wedge product.\nexport const meet = (a: NVector, b: NVector): NVector => [\n  b[0] * a[0],\n  b[1] * a[0] + b[0] * a[1],\n  b[2] * a[0] + b[0] * a[2],\n  b[3] * a[0] + b[0] * a[3],\n  b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[0] * a[4],\n  b[5] * a[0] - b[3] * a[1] + b[1] * a[3] + b[0] * a[5],\n  b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],\n  b[7] * a[0] +\n    b[6] * a[1] +\n    b[5] * a[2] +\n    b[4] * a[3] +\n    b[3] * a[4] +\n    b[2] * a[5] +\n    b[1] * a[6],\n];\n\n// The regressive product.\nexport const join = (a: NVector, b: NVector): NVector => [\n  joinScalar(a, b),\n  a[1] * b[7] + a[4] * b[5] - a[5] * b[4] + a[7] * b[1],\n  a[2] * b[7] - a[4] * b[6] + a[6] * b[4] + a[7] * b[2],\n  a[3] * b[7] + a[5] * b[6] - a[6] * b[5] + a[7] * b[3],\n  a[4] * b[7] + a[7] * b[4],\n  a[5] * b[7] + a[7] * b[5],\n  a[6] * b[7] + a[7] * b[6],\n  a[7] * b[7],\n];\n\nexport const joinScalar = (a: NVector, b: NVector): number =>\n  a[0] * b[7] +\n  a[1] * b[6] +\n  a[2] * b[5] +\n  a[3] * b[4] +\n  a[4] * b[3] +\n  a[5] * b[2] +\n  a[6] * b[1] +\n  a[7] * b[0];\n\n// The inner product.\nexport const dot = (a: NVector, b: NVector): NVector => [\n  b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6],\n  b[1] * a[0] +\n    b[0] * a[1] -\n    b[4] * a[2] +\n    b[5] * a[3] +\n    b[2] * a[4] -\n    b[3] * a[5] -\n    b[7] * a[6] -\n    b[6] * a[7],\n  b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],\n  b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],\n  b[4] * a[0] + b[7] * a[3] + b[0] * a[4] + b[3] * a[7],\n  b[5] * a[0] + b[7] * a[2] + b[0] * a[5] + b[2] * a[7],\n  b[6] * a[0] + b[0] * a[6],\n  b[7] * a[0] + b[0] * a[7],\n];\n\nexport const norm = (a: NVector): number =>\n  Math.sqrt(Math.abs(a[0] * a[0] - a[2] * a[2] - a[3] * a[3] + a[6] * a[6]));\n\nexport const inorm = (a: NVector): number =>\n  Math.sqrt(Math.abs(a[7] * a[7] - a[5] * a[5] - a[4] * a[4] + a[1] * a[1]));\n\nexport const normalized = (a: NVector): NVector => {\n  const n = norm(a);\n  if (n === 0 || n === 1) {\n    return a;\n  }\n  const sign = a[6] < 0 ? -1 : 1;\n  return mul(a, sign / n);\n};\n\nexport const inormalized = (a: NVector): NVector => {\n  const n = inorm(a);\n  if (n === 0 || n === 1) {\n    return a;\n  }\n  return mul(a, 1 / n);\n};\n\nconst isNumber = (a: any): a is number => typeof a === \"number\";\n\nexport const E0: NVector = nvector(1, 1);\nexport const E1: NVector = nvector(1, 2);\nexport const E2: NVector = nvector(1, 3);\nexport const E01: NVector = nvector(1, 4);\nexport const E20: NVector = nvector(1, 5);\nexport const E12: NVector = nvector(1, 6);\nexport const E012: NVector = nvector(1, 7);\nexport const I = E012;\n"],"mappings":"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C,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACrDC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACTC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACbC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACTC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACXC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CACbC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,CAAGD,CAAC,CAAC,CAAC,CAAC,CAAGC,CAAC,CAAC,CAAC,CAAC,C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"},"metadata":{},"sourceType":"module","externalDependencies":[]}