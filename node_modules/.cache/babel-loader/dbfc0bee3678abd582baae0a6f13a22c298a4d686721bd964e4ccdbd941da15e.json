{"ast":null,"code":"import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{getCommonBounds}from\"../element\";import{getGlobalCSSVariable}from\"../utils\";import{getLanguage}from\"../i18n\";export var SCROLLBAR_MARGIN=4;export var SCROLLBAR_WIDTH=6;export var SCROLLBAR_COLOR=\"rgba(0,0,0,0.3)\";export var getScrollBars=function getScrollBars(elements,viewportWidth,viewportHeight,_ref){var scrollX=_ref.scrollX,scrollY=_ref.scrollY,zoom=_ref.zoom;if(elements.length===0){return{horizontal:null,vertical:null};}// This is the bounding box of all the elements\nvar _getCommonBounds=getCommonBounds(elements),_getCommonBounds2=_slicedToArray(_getCommonBounds,4),elementsMinX=_getCommonBounds2[0],elementsMinY=_getCommonBounds2[1],elementsMaxX=_getCommonBounds2[2],elementsMaxY=_getCommonBounds2[3];// Apply zoom\nvar viewportWidthWithZoom=viewportWidth/zoom.value;var viewportHeightWithZoom=viewportHeight/zoom.value;var viewportWidthDiff=viewportWidth-viewportWidthWithZoom;var viewportHeightDiff=viewportHeight-viewportHeightWithZoom;var safeArea={top:parseInt(getGlobalCSSVariable(\"sat\"))||0,bottom:parseInt(getGlobalCSSVariable(\"sab\"))||0,left:parseInt(getGlobalCSSVariable(\"sal\"))||0,right:parseInt(getGlobalCSSVariable(\"sar\"))||0};var isRTL=getLanguage().rtl;// The viewport is the rectangle currently visible for the user\nvar viewportMinX=-scrollX+viewportWidthDiff/2+safeArea.left;var viewportMinY=-scrollY+viewportHeightDiff/2+safeArea.top;var viewportMaxX=viewportMinX+viewportWidthWithZoom-safeArea.right;var viewportMaxY=viewportMinY+viewportHeightWithZoom-safeArea.bottom;// The scene is the bounding box of both the elements and viewport\nvar sceneMinX=Math.min(elementsMinX,viewportMinX);var sceneMinY=Math.min(elementsMinY,viewportMinY);var sceneMaxX=Math.max(elementsMaxX,viewportMaxX);var sceneMaxY=Math.max(elementsMaxY,viewportMaxY);// The scrollbar represents where the viewport is in relationship to the scene\nreturn{horizontal:viewportMinX===sceneMinX&&viewportMaxX===sceneMaxX?null:{x:Math.max(safeArea.left,SCROLLBAR_MARGIN)+(viewportMinX-sceneMinX)/(sceneMaxX-sceneMinX)*viewportWidth,y:viewportHeight-SCROLLBAR_WIDTH-Math.max(SCROLLBAR_MARGIN,safeArea.bottom),width:(viewportMaxX-viewportMinX)/(sceneMaxX-sceneMinX)*viewportWidth-Math.max(SCROLLBAR_MARGIN*2,safeArea.left+safeArea.right),height:SCROLLBAR_WIDTH},vertical:viewportMinY===sceneMinY&&viewportMaxY===sceneMaxY?null:{x:isRTL?Math.max(safeArea.left,SCROLLBAR_MARGIN):viewportWidth-SCROLLBAR_WIDTH-Math.max(safeArea.right,SCROLLBAR_MARGIN),y:(viewportMinY-sceneMinY)/(sceneMaxY-sceneMinY)*viewportHeight+Math.max(safeArea.top,SCROLLBAR_MARGIN),width:SCROLLBAR_WIDTH,height:(viewportMaxY-viewportMinY)/(sceneMaxY-sceneMinY)*viewportHeight-Math.max(SCROLLBAR_MARGIN*2,safeArea.top+safeArea.bottom)}};};export var isOverScrollBars=function isOverScrollBars(scrollBars,x,y){var _map=[scrollBars.horizontal,scrollBars.vertical].map(function(scrollBar){return scrollBar!=null&&scrollBar.x<=x&&x<=scrollBar.x+scrollBar.width&&scrollBar.y<=y&&y<=scrollBar.y+scrollBar.height;}),_map2=_slicedToArray(_map,2),isOverHorizontal=_map2[0],isOverVertical=_map2[1];var isOverEither=isOverHorizontal||isOverVertical;return{isOverEither:isOverEither,isOverHorizontal:isOverHorizontal,isOverVertical:isOverVertical};};","map":{"version":3,"names":["getCommonBounds","getGlobalCSSVariable","getLanguage","SCROLLBAR_MARGIN","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","elements","viewportWidth","viewportHeight","_ref","scrollX","scrollY","zoom","length","horizontal","vertical","_getCommonBounds","_getCommonBounds2","_slicedToArray","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","value","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","safeArea","top","parseInt","bottom","left","right","isRTL","rtl","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","Math","min","sceneMinY","sceneMaxX","max","sceneMaxY","x","y","width","height","isOverScrollBars","scrollBars","_map","map","scrollBar","_map2","isOverHorizontal","isOverVertical","isOverEither"],"sources":["D:/project/excalidraw-cn/src/scene/scrollbars.ts"],"sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { Zoom } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: number;\n    scrollY: number;\n    zoom: Zoom;\n  },\n): ScrollBars => {\n  if (elements.length === 0) {\n    return {\n      horizontal: null,\n      vertical: null,\n    };\n  }\n  // This is the bounding box of all the elements\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] =\n    getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom.value;\n  const viewportHeightWithZoom = viewportHeight / zoom.value;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")) || 0,\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")) || 0,\n    left: parseInt(getGlobalCSSVariable(\"sal\")) || 0,\n    right: parseInt(getGlobalCSSVariable(\"sar\")) || 0,\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n): {\n  isOverEither: boolean;\n  isOverHorizontal: boolean;\n  isOverVertical: boolean;\n} => {\n  const [isOverHorizontal, isOverVertical] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar != null &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return { isOverEither, isOverHorizontal, isOverVertical };\n};\n"],"mappings":"8GACA,OAASA,eAAe,KAAQ,YAAY,CAG5C,OAASC,oBAAoB,KAAQ,UAAU,CAC/C,OAASC,WAAW,KAAQ,SAAS,CAErC,MAAO,IAAM,CAAAC,gBAAgB,CAAG,CAAC,CACjC,MAAO,IAAM,CAAAC,eAAe,CAAG,CAAC,CAChC,MAAO,IAAM,CAAAC,eAAe,CAAG,iBAAiB,CAEhD,MAAO,IAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CACxBC,QAAsC,CACtCC,aAAqB,CACrBC,cAAsB,CAAAC,IAAA,CAUP,IARb,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CACPC,OAAO,CAAAF,IAAA,CAAPE,OAAO,CACPC,IAAI,CAAAH,IAAA,CAAJG,IAAI,CAON,GAAIN,QAAQ,CAACO,MAAM,GAAK,CAAC,CAAE,CACzB,MAAO,CACLC,UAAU,CAAE,IAAI,CAChBC,QAAQ,CAAE,IACZ,CAAC,CACH,CACA;AACA,IAAAC,gBAAA,CACEjB,eAAe,CAACO,QAAQ,CAAC,CAAAW,iBAAA,CAAAC,cAAA,CAAAF,gBAAA,IADpBG,YAAY,CAAAF,iBAAA,IAAEG,YAAY,CAAAH,iBAAA,IAAEI,YAAY,CAAAJ,iBAAA,IAAEK,YAAY,CAAAL,iBAAA,IAG7D;AACA,GAAM,CAAAM,qBAAqB,CAAGhB,aAAa,CAAGK,IAAI,CAACY,KAAK,CACxD,GAAM,CAAAC,sBAAsB,CAAGjB,cAAc,CAAGI,IAAI,CAACY,KAAK,CAE1D,GAAM,CAAAE,iBAAiB,CAAGnB,aAAa,CAAGgB,qBAAqB,CAC/D,GAAM,CAAAI,kBAAkB,CAAGnB,cAAc,CAAGiB,sBAAsB,CAElE,GAAM,CAAAG,QAAQ,CAAG,CACfC,GAAG,CAAEC,QAAQ,CAAC9B,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAI,CAAC,CAC/C+B,MAAM,CAAED,QAAQ,CAAC9B,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAI,CAAC,CAClDgC,IAAI,CAAEF,QAAQ,CAAC9B,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAI,CAAC,CAChDiC,KAAK,CAAEH,QAAQ,CAAC9B,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAI,CAClD,CAAC,CAED,GAAM,CAAAkC,KAAK,CAAGjC,WAAW,EAAE,CAACkC,GAAG,CAE/B;AACA,GAAM,CAAAC,YAAY,CAAG,CAAC1B,OAAO,CAAGgB,iBAAiB,CAAG,CAAC,CAAGE,QAAQ,CAACI,IAAI,CACrE,GAAM,CAAAK,YAAY,CAAG,CAAC1B,OAAO,CAAGgB,kBAAkB,CAAG,CAAC,CAAGC,QAAQ,CAACC,GAAG,CACrE,GAAM,CAAAS,YAAY,CAAGF,YAAY,CAAGb,qBAAqB,CAAGK,QAAQ,CAACK,KAAK,CAC1E,GAAM,CAAAM,YAAY,CAAGF,YAAY,CAAGZ,sBAAsB,CAAGG,QAAQ,CAACG,MAAM,CAE5E;AACA,GAAM,CAAAS,SAAS,CAAGC,IAAI,CAACC,GAAG,CAACvB,YAAY,CAAEiB,YAAY,CAAC,CACtD,GAAM,CAAAO,SAAS,CAAGF,IAAI,CAACC,GAAG,CAACtB,YAAY,CAAEiB,YAAY,CAAC,CACtD,GAAM,CAAAO,SAAS,CAAGH,IAAI,CAACI,GAAG,CAACxB,YAAY,CAAEiB,YAAY,CAAC,CACtD,GAAM,CAAAQ,SAAS,CAAGL,IAAI,CAACI,GAAG,CAACvB,YAAY,CAAEiB,YAAY,CAAC,CAEtD;AAEA,MAAO,CACLzB,UAAU,CACRsB,YAAY,GAAKI,SAAS,EAAIF,YAAY,GAAKM,SAAS,CACpD,IAAI,CACJ,CACEG,CAAC,CACCN,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACI,IAAI,CAAE9B,gBAAgB,CAAC,CACxC,CAACkC,YAAY,CAAGI,SAAS,GAAKI,SAAS,CAAGJ,SAAS,CAAC,CACnDjC,aAAa,CACjByC,CAAC,CACCxC,cAAc,CACdL,eAAe,CACfsC,IAAI,CAACI,GAAG,CAAC3C,gBAAgB,CAAE0B,QAAQ,CAACG,MAAM,CAAC,CAC7CkB,KAAK,CACF,CAACX,YAAY,CAAGF,YAAY,GAAKQ,SAAS,CAAGJ,SAAS,CAAC,CACtDjC,aAAa,CACfkC,IAAI,CAACI,GAAG,CAAC3C,gBAAgB,CAAG,CAAC,CAAE0B,QAAQ,CAACI,IAAI,CAAGJ,QAAQ,CAACK,KAAK,CAAC,CAChEiB,MAAM,CAAE/C,eACV,CAAC,CACPY,QAAQ,CACNsB,YAAY,GAAKM,SAAS,EAAIJ,YAAY,GAAKO,SAAS,CACpD,IAAI,CACJ,CACEC,CAAC,CAAEb,KAAK,CACJO,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACI,IAAI,CAAE9B,gBAAgB,CAAC,CACzCK,aAAa,CACbJ,eAAe,CACfsC,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACK,KAAK,CAAE/B,gBAAgB,CAAC,CAC9C8C,CAAC,CACE,CAACX,YAAY,CAAGM,SAAS,GAAKG,SAAS,CAAGH,SAAS,CAAC,CACnDnC,cAAc,CAChBiC,IAAI,CAACI,GAAG,CAACjB,QAAQ,CAACC,GAAG,CAAE3B,gBAAgB,CAAC,CAC1C+C,KAAK,CAAE9C,eAAe,CACtB+C,MAAM,CACH,CAACX,YAAY,CAAGF,YAAY,GAAKS,SAAS,CAAGH,SAAS,CAAC,CACtDnC,cAAc,CAChBiC,IAAI,CAACI,GAAG,CAAC3C,gBAAgB,CAAG,CAAC,CAAE0B,QAAQ,CAACC,GAAG,CAAGD,QAAQ,CAACG,MAAM,CACjE,CACR,CAAC,CACH,CAAC,CAED,MAAO,IAAM,CAAAoB,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAC3BC,UAAsB,CACtBL,CAAS,CACTC,CAAS,CAKN,CACH,IAAAK,IAAA,CAA2C,CACzCD,UAAU,CAACtC,UAAU,CACrBsC,UAAU,CAACrC,QAAQ,CACpB,CAACuC,GAAG,CAAC,SAACC,SAAS,CAAK,CACnB,MACE,CAAAA,SAAS,EAAI,IAAI,EACjBA,SAAS,CAACR,CAAC,EAAIA,CAAC,EAChBA,CAAC,EAAIQ,SAAS,CAACR,CAAC,CAAGQ,SAAS,CAACN,KAAK,EAClCM,SAAS,CAACP,CAAC,EAAIA,CAAC,EAChBA,CAAC,EAAIO,SAAS,CAACP,CAAC,CAAGO,SAAS,CAACL,MAAM,CAEvC,CAAC,CAAC,CAAAM,KAAA,CAAAtC,cAAA,CAAAmC,IAAA,IAXKI,gBAAgB,CAAAD,KAAA,IAAEE,cAAc,CAAAF,KAAA,IAYvC,GAAM,CAAAG,YAAY,CAAGF,gBAAgB,EAAIC,cAAc,CACvD,MAAO,CAAEC,YAAY,CAAZA,YAAY,CAAEF,gBAAgB,CAAhBA,gBAAgB,CAAEC,cAAc,CAAdA,cAAe,CAAC,CAC3D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}