{"ast":null,"code":"import { __values } from \"tslib\";\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacementFactory A function that should be used to wrap a given method, returning the wrapped method which\n * will be substituted in for `source[name]`.\n * @returns void\n */\nexport function fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  var original = source[name];\n  var wrapped = replacementFactory(original);\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original\n        }\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n  source[name] = wrapped;\n}\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object) {\n  return Object.keys(object).map(function (key) {\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(object[key]);\n  }).join('&');\n}\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(value) {\n  if (isError(value)) {\n    var error = value;\n    var err = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack\n    };\n    for (var i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n    return err;\n  }\n  if (isEvent(value)) {\n    var event_1 = value;\n    var source = {};\n    source.type = event_1.type;\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event_1.target) ? htmlTreeAsString(event_1.target) : Object.prototype.toString.call(event_1.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n    try {\n      source.currentTarget = isElement(event_1.currentTarget) ? htmlTreeAsString(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event_1.detail;\n    }\n    for (var i in event_1) {\n      if (Object.prototype.hasOwnProperty.call(event_1, i)) {\n        source[i] = event_1;\n      }\n    }\n    return source;\n  }\n  return value;\n}\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n/** JSDoc */\nexport function normalizeToSize(object,\n// Default Node.js REPL depth\ndepth,\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize) {\n  if (depth === void 0) {\n    depth = 3;\n  }\n  if (maxSize === void 0) {\n    maxSize = 100 * 1024;\n  }\n  var serialized = normalize(object, depth);\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return serialized;\n}\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value) {\n  var type = Object.prototype.toString.call(value);\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n  var normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue(value, key) {\n  if (key === 'domain' && value && typeof value === 'object' && value._events) {\n    return '[Domain]';\n  }\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n  if (typeof global !== 'undefined' && value === global) {\n    return '[Global]';\n  }\n  if (typeof window !== 'undefined' && value === window) {\n    return '[Window]';\n  }\n  if (typeof document !== 'undefined' && value === document) {\n    return '[Document]';\n  }\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n  if (value === void 0) {\n    return '[undefined]';\n  }\n  if (typeof value === 'function') {\n    return \"[Function: \" + getFunctionName(value) + \"]\";\n  }\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n  if (typeof value === 'symbol') {\n    return \"[\" + String(value) + \"]\";\n  }\n  if (typeof value === 'bigint') {\n    return \"[BigInt: \" + String(value) + \"]\";\n  }\n  return value;\n}\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key, value, depth, memo) {\n  if (depth === void 0) {\n    depth = +Infinity;\n  }\n  if (memo === void 0) {\n    memo = new Memo();\n  }\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  var normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  var source = getWalkSource(value);\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  var acc = Array.isArray(value) ? [] : {};\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n  // Walk all keys of the source\n  for (var innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n  // Return accumulated values\n  return acc;\n}\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input, depth) {\n  try {\n    return JSON.parse(JSON.stringify(input, function (key, value) {\n      return walk(key, value, depth);\n    }));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception, maxLength) {\n  if (maxLength === void 0) {\n    maxLength = 40;\n  }\n  var keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n  for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    var serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n  return '';\n}\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys(val) {\n  var e_1, _a;\n  if (isPlainObject(val)) {\n    var obj = val;\n    var rv = {};\n    try {\n      for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        if (typeof obj[key] !== 'undefined') {\n          rv[key] = dropUndefinedKeys(obj[key]);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return rv;\n  }\n  if (Array.isArray(val)) {\n    return val.map(dropUndefinedKeys);\n  }\n  return val;\n}","map":{"version":3,"names":["htmlTreeAsString","isElement","isError","isEvent","isInstanceOf","isPlainObject","isPrimitive","isSyntheticEvent","Memo","getFunctionName","truncate","fill","source","name","replacementFactory","original","wrapped","prototype","Object","defineProperties","__sentry_original__","enumerable","value","_Oo","urlEncode","object","keys","map","key","encodeURIComponent","join","getWalkSource","error","err","message","stack","i","hasOwnProperty","call","event_1","type","target","toString","_oO","currentTarget","CustomEvent","detail","utf8Length","encodeURI","split","length","jsonSize","JSON","stringify","normalizeToSize","depth","maxSize","serialized","normalize","serializeValue","normalized","normalizeValue","_events","global","window","document","String","walk","memo","Infinity","undefined","toJSON","acc","Array","isArray","memoize","innerKey","unmemoize","input","parse","extractExceptionKeysForMessage","exception","maxLength","sort","includedKeys","slice","dropUndefinedKeys","val","obj","rv","_b","__values","_c","next","done"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\object.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\nimport { getFunctionName } from './stacktrace';\nimport { truncate } from './string';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacementFactory A function that should be used to wrap a given method, returning the wrapped method which\n * will be substituted in for `source[name]`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any object into an object literal with all its attributes\n * attached to it.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n */\nfunction getWalkSource(\n  value: any,\n): {\n  [key: string]: any;\n} {\n  if (isError(value)) {\n    const error = value as ExtendedError;\n    const err: {\n      [key: string]: any;\n      stack: string | undefined;\n      message: string;\n      name: string;\n    } = {\n      message: error.message,\n      name: error.name,\n      stack: error.stack,\n    };\n\n    for (const i in error) {\n      if (Object.prototype.hasOwnProperty.call(error, i)) {\n        err[i] = error[i];\n      }\n    }\n\n    return err;\n  }\n\n  if (isEvent(value)) {\n    /**\n     * Event-like interface that's usable in browser and node\n     */\n    interface SimpleEvent {\n      [key: string]: unknown;\n      type: string;\n      target?: unknown;\n      currentTarget?: unknown;\n    }\n\n    const event = value as SimpleEvent;\n\n    const source: {\n      [key: string]: any;\n    } = {};\n\n    source.type = event.type;\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      source.target = isElement(event.target)\n        ? htmlTreeAsString(event.target)\n        : Object.prototype.toString.call(event.target);\n    } catch (_oO) {\n      source.target = '<unknown>';\n    }\n\n    try {\n      source.currentTarget = isElement(event.currentTarget)\n        ? htmlTreeAsString(event.currentTarget)\n        : Object.prototype.toString.call(event.currentTarget);\n    } catch (_oO) {\n      source.currentTarget = '<unknown>';\n    }\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      source.detail = event.detail;\n    }\n\n    for (const i in event) {\n      if (Object.prototype.hasOwnProperty.call(event, i)) {\n        source[i] = event;\n      }\n    }\n\n    return source;\n  }\n\n  return value as {\n    [key: string]: any;\n  };\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/**\n * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,\n * booleans, null, and undefined.\n *\n * @param value The value to stringify\n * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or\n *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,\n *  unchanged.\n */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && value && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (typeof value === 'number' && value !== value) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${getFunctionName(value)}]`;\n  }\n\n  // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable\n\n  if (typeof value === 'symbol') {\n    return `[${String(value)}]`;\n  }\n\n  if (typeof value === 'bigint') {\n    return `[BigInt: ${String(value)}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // If value implements `toJSON` method, call it and return early\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = getWalkSource(value);\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function normalize(input: any, depth?: number): any {\n  try {\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function extractExceptionKeysForMessage(exception: any, maxLength: number = 40): string {\n  const keys = Object.keys(getWalkSource(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return the new object with removed keys that value was `undefined`.\n * Works recursively on objects and arrays.\n */\nexport function dropUndefinedKeys<T>(val: T): T {\n  if (isPlainObject(val)) {\n    const obj = val as { [key: string]: any };\n    const rv: { [key: string]: any } = {};\n    for (const key of Object.keys(obj)) {\n      if (typeof obj[key] !== 'undefined') {\n        rv[key] = dropUndefinedKeys(obj[key]);\n      }\n    }\n    return rv as T;\n  }\n\n  if (Array.isArray(val)) {\n    return (val as any[]).map(dropUndefinedKeys) as any;\n  }\n\n  return val;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}