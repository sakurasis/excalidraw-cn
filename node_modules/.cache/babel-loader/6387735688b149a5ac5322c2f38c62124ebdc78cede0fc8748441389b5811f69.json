{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\actions\\\\actionGroup.tsx\";\nimport { KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { UngroupIcon, GroupIcon } from \"../components/icons\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isSomeElementSelected } from \"../scene\";\nimport { getSelectedGroupIds, selectGroup, selectGroupsForSelectedElements, getElementsInGroup, addToGroup, removeFromSelectedGroups, isElementInGroup } from \"../groups\";\nimport { getNonDeletedElements } from \"../element\";\nimport { randomId } from \"../random\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { isBoundToContainer } from \"../element/typeChecks\";\nimport { getElementsInResizingFrame, groupByFrames, removeElementsFromFrame, replaceAllElementsInFrame } from \"../frame\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allElementsInSameGroup = elements => {\n  if (elements.length >= 2) {\n    const groupIds = elements[0].groupIds;\n    for (const groupId of groupIds) {\n      if (elements.reduce((acc, element) => acc && isElementInGroup(element, groupId), true)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\nconst enableActionGroup = (elements, appState, app) => {\n  const selectedElements = app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    includeBoundTextElement: true\n  });\n  return selectedElements.length >= 2 && !allElementsInSameGroup(selectedElements);\n};\nexport const actionGroup = register({\n  name: \"group\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true\n    });\n    if (selectedElements.length < 2) {\n      // nothing to group\n      return {\n        appState,\n        elements,\n        commitToHistory: false\n      };\n    }\n    // if everything is already grouped into 1 group, there is nothing to do\n    const selectedGroupIds = getSelectedGroupIds(appState);\n    if (selectedGroupIds.length === 1) {\n      const selectedGroupId = selectedGroupIds[0];\n      const elementIdsInGroup = new Set(getElementsInGroup(elements, selectedGroupId).map(element => element.id));\n      const selectedElementIds = new Set(selectedElements.map(element => element.id));\n      const combinedSet = new Set([...Array.from(elementIdsInGroup), ...Array.from(selectedElementIds)]);\n      if (combinedSet.size === elementIdsInGroup.size) {\n        // no incremental ids in the selected ids\n        return {\n          appState,\n          elements,\n          commitToHistory: false\n        };\n      }\n    }\n    let nextElements = [...elements];\n\n    // this includes the case where we are grouping elements inside a frame\n    // and elements outside that frame\n    const groupingElementsFromDifferentFrames = new Set(selectedElements.map(element => element.frameId)).size > 1;\n    // when it happens, we want to remove elements that are in the frame\n    // and are going to be grouped from the frame (mouthful, I know)\n    if (groupingElementsFromDifferentFrames) {\n      const frameElementsMap = groupByFrames(selectedElements);\n      frameElementsMap.forEach((elementsInFrame, frameId) => {\n        nextElements = removeElementsFromFrame(nextElements, elementsInFrame, appState);\n      });\n    }\n    const newGroupId = randomId();\n    const selectElementIds = arrayToMap(selectedElements);\n    nextElements = nextElements.map(element => {\n      if (!selectElementIds.get(element.id)) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: addToGroup(element.groupIds, newGroupId, appState.editingGroupId)\n      });\n    });\n    // keep the z order within the group the same, but move them\n    // to the z order of the highest element in the layer stack\n    const elementsInGroup = getElementsInGroup(nextElements, newGroupId);\n    const lastElementInGroup = elementsInGroup[elementsInGroup.length - 1];\n    const lastGroupElementIndex = nextElements.lastIndexOf(lastElementInGroup);\n    const elementsAfterGroup = nextElements.slice(lastGroupElementIndex + 1);\n    const elementsBeforeGroup = nextElements.slice(0, lastGroupElementIndex).filter(updatedElement => !isElementInGroup(updatedElement, newGroupId));\n    nextElements = [...elementsBeforeGroup, ...elementsInGroup, ...elementsAfterGroup];\n    return {\n      appState: selectGroup(newGroupId, {\n        ...appState,\n        selectedGroupIds: {}\n      }, getNonDeletedElements(nextElements)),\n      elements: nextElements,\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.group\",\n  predicate: (elements, appState, _, app) => enableActionGroup(elements, appState, app),\n  keyTest: event => !event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G,\n  PanelComponent: _ref => {\n    let {\n      elements,\n      appState,\n      updateData,\n      app\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      hidden: !enableActionGroup(elements, appState, app),\n      type: \"button\",\n      icon: /*#__PURE__*/_jsxDEV(GroupIcon, {\n        theme: appState.theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this),\n      onClick: () => updateData(null),\n      title: `${t(\"labels.group\")} — ${getShortcutKey(\"CtrlOrCmd+G\")}`,\n      \"aria-label\": t(\"labels.group\"),\n      visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionUngroup = register({\n  name: \"ungroup\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    const groupIds = getSelectedGroupIds(appState);\n    if (groupIds.length === 0) {\n      return {\n        appState,\n        elements,\n        commitToHistory: false\n      };\n    }\n    let nextElements = [...elements];\n    const selectedElements = app.scene.getSelectedElements(appState);\n    const frames = selectedElements.filter(element => element.frameId).map(element => app.scene.getElement(element.frameId));\n    const boundTextElementIds = [];\n    nextElements = nextElements.map(element => {\n      if (isBoundToContainer(element)) {\n        boundTextElementIds.push(element.id);\n      }\n      const nextGroupIds = removeFromSelectedGroups(element.groupIds, appState.selectedGroupIds);\n      if (nextGroupIds.length === element.groupIds.length) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: nextGroupIds\n      });\n    });\n    const updateAppState = selectGroupsForSelectedElements({\n      ...appState,\n      selectedGroupIds: {}\n    }, getNonDeletedElements(nextElements), appState, null);\n    frames.forEach(frame => {\n      if (frame) {\n        nextElements = replaceAllElementsInFrame(nextElements, getElementsInResizingFrame(nextElements, frame, appState), frame, appState);\n      }\n    });\n\n    // remove binded text elements from selection\n    updateAppState.selectedElementIds = Object.entries(updateAppState.selectedElementIds).reduce((acc, _ref2) => {\n      let [id, selected] = _ref2;\n      if (selected && !boundTextElementIds.includes(id)) {\n        acc[id] = true;\n      }\n      return acc;\n    }, {});\n    return {\n      appState: updateAppState,\n      elements: nextElements,\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G.toUpperCase(),\n  contextItemLabel: \"labels.ungroup\",\n  predicate: (elements, appState) => getSelectedGroupIds(appState).length > 0,\n  PanelComponent: _ref3 => {\n    let {\n      elements,\n      appState,\n      updateData\n    } = _ref3;\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      hidden: getSelectedGroupIds(appState).length === 0,\n      icon: /*#__PURE__*/_jsxDEV(UngroupIcon, {\n        theme: appState.theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }, this),\n      onClick: () => updateData(null),\n      title: `${t(\"labels.ungroup\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+G\")}`,\n      \"aria-label\": t(\"labels.ungroup\"),\n      visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this);\n  }\n});","map":{"version":3,"names":["KEYS","t","arrayToMap","getShortcutKey","register","UngroupIcon","GroupIcon","newElementWith","isSomeElementSelected","getSelectedGroupIds","selectGroup","selectGroupsForSelectedElements","getElementsInGroup","addToGroup","removeFromSelectedGroups","isElementInGroup","getNonDeletedElements","randomId","ToolButton","isBoundToContainer","getElementsInResizingFrame","groupByFrames","removeElementsFromFrame","replaceAllElementsInFrame","jsxDEV","_jsxDEV","allElementsInSameGroup","elements","length","groupIds","groupId","reduce","acc","element","enableActionGroup","appState","app","selectedElements","scene","getSelectedElements","selectedElementIds","includeBoundTextElement","actionGroup","name","trackEvent","category","perform","_","commitToHistory","selectedGroupIds","selectedGroupId","elementIdsInGroup","Set","map","id","combinedSet","Array","from","size","nextElements","groupingElementsFromDifferentFrames","frameId","frameElementsMap","forEach","elementsInFrame","newGroupId","selectElementIds","get","editingGroupId","elementsInGroup","lastElementInGroup","lastGroupElementIndex","lastIndexOf","elementsAfterGroup","slice","elementsBeforeGroup","filter","updatedElement","contextItemLabel","predicate","keyTest","event","shiftKey","CTRL_OR_CMD","key","G","PanelComponent","_ref","updateData","hidden","type","icon","theme","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","visible","actionUngroup","frames","getElement","boundTextElementIds","push","nextGroupIds","updateAppState","frame","Object","entries","_ref2","selected","includes","toUpperCase","_ref3"],"sources":["D:/project/excalidraw-cn/src/actions/actionGroup.tsx"],"sourcesContent":["import { KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { arrayToMap, getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nimport { UngroupIcon, GroupIcon } from \"../components/icons\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isSomeElementSelected } from \"../scene\";\nimport {\n  getSelectedGroupIds,\n  selectGroup,\n  selectGroupsForSelectedElements,\n  getElementsInGroup,\n  addToGroup,\n  removeFromSelectedGroups,\n  isElementInGroup,\n} from \"../groups\";\nimport { getNonDeletedElements } from \"../element\";\nimport { randomId } from \"../random\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport {\n  ExcalidrawElement,\n  ExcalidrawFrameElement,\n  ExcalidrawTextElement,\n} from \"../element/types\";\nimport { AppClassProperties, AppState } from \"../types\";\nimport { isBoundToContainer } from \"../element/typeChecks\";\nimport {\n  getElementsInResizingFrame,\n  groupByFrames,\n  removeElementsFromFrame,\n  replaceAllElementsInFrame,\n} from \"../frame\";\n\nconst allElementsInSameGroup = (elements: readonly ExcalidrawElement[]) => {\n  if (elements.length >= 2) {\n    const groupIds = elements[0].groupIds;\n    for (const groupId of groupIds) {\n      if (\n        elements.reduce(\n          (acc, element) => acc && isElementInGroup(element, groupId),\n          true,\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst enableActionGroup = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  app: AppClassProperties,\n) => {\n  const selectedElements = app.scene.getSelectedElements({\n    selectedElementIds: appState.selectedElementIds,\n    includeBoundTextElement: true,\n  });\n  return (\n    selectedElements.length >= 2 && !allElementsInSameGroup(selectedElements)\n  );\n};\n\nexport const actionGroup = register({\n  name: \"group\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const selectedElements = app.scene.getSelectedElements({\n      selectedElementIds: appState.selectedElementIds,\n      includeBoundTextElement: true,\n    });\n    if (selectedElements.length < 2) {\n      // nothing to group\n      return { appState, elements, commitToHistory: false };\n    }\n    // if everything is already grouped into 1 group, there is nothing to do\n    const selectedGroupIds = getSelectedGroupIds(appState);\n    if (selectedGroupIds.length === 1) {\n      const selectedGroupId = selectedGroupIds[0];\n      const elementIdsInGroup = new Set(\n        getElementsInGroup(elements, selectedGroupId).map(\n          (element) => element.id,\n        ),\n      );\n      const selectedElementIds = new Set(\n        selectedElements.map((element) => element.id),\n      );\n      const combinedSet = new Set([\n        ...Array.from(elementIdsInGroup),\n        ...Array.from(selectedElementIds),\n      ]);\n      if (combinedSet.size === elementIdsInGroup.size) {\n        // no incremental ids in the selected ids\n        return { appState, elements, commitToHistory: false };\n      }\n    }\n\n    let nextElements = [...elements];\n\n    // this includes the case where we are grouping elements inside a frame\n    // and elements outside that frame\n    const groupingElementsFromDifferentFrames =\n      new Set(selectedElements.map((element) => element.frameId)).size > 1;\n    // when it happens, we want to remove elements that are in the frame\n    // and are going to be grouped from the frame (mouthful, I know)\n    if (groupingElementsFromDifferentFrames) {\n      const frameElementsMap = groupByFrames(selectedElements);\n\n      frameElementsMap.forEach((elementsInFrame, frameId) => {\n        nextElements = removeElementsFromFrame(\n          nextElements,\n          elementsInFrame,\n          appState,\n        );\n      });\n    }\n\n    const newGroupId = randomId();\n    const selectElementIds = arrayToMap(selectedElements);\n\n    nextElements = nextElements.map((element) => {\n      if (!selectElementIds.get(element.id)) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: addToGroup(\n          element.groupIds,\n          newGroupId,\n          appState.editingGroupId,\n        ),\n      });\n    });\n    // keep the z order within the group the same, but move them\n    // to the z order of the highest element in the layer stack\n    const elementsInGroup = getElementsInGroup(nextElements, newGroupId);\n    const lastElementInGroup = elementsInGroup[elementsInGroup.length - 1];\n    const lastGroupElementIndex = nextElements.lastIndexOf(lastElementInGroup);\n    const elementsAfterGroup = nextElements.slice(lastGroupElementIndex + 1);\n    const elementsBeforeGroup = nextElements\n      .slice(0, lastGroupElementIndex)\n      .filter(\n        (updatedElement) => !isElementInGroup(updatedElement, newGroupId),\n      );\n    nextElements = [\n      ...elementsBeforeGroup,\n      ...elementsInGroup,\n      ...elementsAfterGroup,\n    ];\n\n    return {\n      appState: selectGroup(\n        newGroupId,\n        { ...appState, selectedGroupIds: {} },\n        getNonDeletedElements(nextElements),\n      ),\n      elements: nextElements,\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.group\",\n  predicate: (elements, appState, _, app) =>\n    enableActionGroup(elements, appState, app),\n  keyTest: (event) =>\n    !event.shiftKey && event[KEYS.CTRL_OR_CMD] && event.key === KEYS.G,\n  PanelComponent: ({ elements, appState, updateData, app }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState, app)}\n      type=\"button\"\n      icon={<GroupIcon theme={appState.theme} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.group\")} — ${getShortcutKey(\"CtrlOrCmd+G\")}`}\n      aria-label={t(\"labels.group\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    ></ToolButton>\n  ),\n});\n\nexport const actionUngroup = register({\n  name: \"ungroup\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    const groupIds = getSelectedGroupIds(appState);\n    if (groupIds.length === 0) {\n      return { appState, elements, commitToHistory: false };\n    }\n\n    let nextElements = [...elements];\n\n    const selectedElements = app.scene.getSelectedElements(appState);\n    const frames = selectedElements\n      .filter((element) => element.frameId)\n      .map((element) =>\n        app.scene.getElement(element.frameId!),\n      ) as ExcalidrawFrameElement[];\n\n    const boundTextElementIds: ExcalidrawTextElement[\"id\"][] = [];\n    nextElements = nextElements.map((element) => {\n      if (isBoundToContainer(element)) {\n        boundTextElementIds.push(element.id);\n      }\n      const nextGroupIds = removeFromSelectedGroups(\n        element.groupIds,\n        appState.selectedGroupIds,\n      );\n      if (nextGroupIds.length === element.groupIds.length) {\n        return element;\n      }\n      return newElementWith(element, {\n        groupIds: nextGroupIds,\n      });\n    });\n\n    const updateAppState = selectGroupsForSelectedElements(\n      { ...appState, selectedGroupIds: {} },\n      getNonDeletedElements(nextElements),\n      appState,\n      null,\n    );\n\n    frames.forEach((frame) => {\n      if (frame) {\n        nextElements = replaceAllElementsInFrame(\n          nextElements,\n          getElementsInResizingFrame(nextElements, frame, appState),\n          frame,\n          appState,\n        );\n      }\n    });\n\n    // remove binded text elements from selection\n    updateAppState.selectedElementIds = Object.entries(\n      updateAppState.selectedElementIds,\n    ).reduce(\n      (acc: { [key: ExcalidrawElement[\"id\"]]: true }, [id, selected]) => {\n        if (selected && !boundTextElementIds.includes(id)) {\n          acc[id] = true;\n        }\n        return acc;\n      },\n      {},\n    );\n\n    return {\n      appState: updateAppState,\n      elements: nextElements,\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event.shiftKey &&\n    event[KEYS.CTRL_OR_CMD] &&\n    event.key === KEYS.G.toUpperCase(),\n  contextItemLabel: \"labels.ungroup\",\n  predicate: (elements, appState) => getSelectedGroupIds(appState).length > 0,\n\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      type=\"button\"\n      hidden={getSelectedGroupIds(appState).length === 0}\n      icon={<UngroupIcon theme={appState.theme} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.ungroup\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+G\")}`}\n      aria-label={t(\"labels.ungroup\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    ></ToolButton>\n  ),\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}