{"ast":null,"code":"// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n  const out = [];\n  let lastType = '';\n  let cx = 0,\n    cy = 0;\n  let subx = 0,\n    suby = 0;\n  let lcx = 0,\n    lcy = 0;\n  for (const {\n    key,\n    data\n  } of segments) {\n    switch (key) {\n      case 'M':\n        out.push({\n          key: 'M',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        [subx, suby] = data;\n        break;\n      case 'C':\n        out.push({\n          key: 'C',\n          data: [...data]\n        });\n        cx = data[4];\n        cy = data[5];\n        lcx = data[2];\n        lcy = data[3];\n        break;\n      case 'L':\n        out.push({\n          key: 'L',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        break;\n      case 'H':\n        cx = data[0];\n        out.push({\n          key: 'L',\n          data: [cx, cy]\n        });\n        break;\n      case 'V':\n        cy = data[0];\n        out.push({\n          key: 'L',\n          data: [cx, cy]\n        });\n        break;\n      case 'S':\n        {\n          let cx1 = 0,\n            cy1 = 0;\n          if (lastType === 'C' || lastType === 'S') {\n            cx1 = cx + (cx - lcx);\n            cy1 = cy + (cy - lcy);\n          } else {\n            cx1 = cx;\n            cy1 = cy;\n          }\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, ...data]\n          });\n          lcx = data[0];\n          lcy = data[1];\n          cx = data[2];\n          cy = data[3];\n          break;\n        }\n      case 'T':\n        {\n          const [x, y] = data;\n          let x1 = 0,\n            y1 = 0;\n          if (lastType === 'Q' || lastType === 'T') {\n            x1 = cx + (cx - lcx);\n            y1 = cy + (cy - lcy);\n          } else {\n            x1 = cx;\n            y1 = cy;\n          }\n          const cx1 = cx + 2 * (x1 - cx) / 3;\n          const cy1 = cy + 2 * (y1 - cy) / 3;\n          const cx2 = x + 2 * (x1 - x) / 3;\n          const cy2 = y + 2 * (y1 - y) / 3;\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lcx = x1;\n          lcy = y1;\n          cx = x;\n          cy = y;\n          break;\n        }\n      case 'Q':\n        {\n          const [x1, y1, x, y] = data;\n          const cx1 = cx + 2 * (x1 - cx) / 3;\n          const cy1 = cy + 2 * (y1 - cy) / 3;\n          const cx2 = x + 2 * (x1 - x) / 3;\n          const cy2 = y + 2 * (y1 - y) / 3;\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lcx = x1;\n          lcy = y1;\n          cx = x;\n          cy = y;\n          break;\n        }\n      case 'A':\n        {\n          const r1 = Math.abs(data[0]);\n          const r2 = Math.abs(data[1]);\n          const angle = data[2];\n          const largeArcFlag = data[3];\n          const sweepFlag = data[4];\n          const x = data[5];\n          const y = data[6];\n          if (r1 === 0 || r2 === 0) {\n            out.push({\n              key: 'C',\n              data: [cx, cy, x, y, x, y]\n            });\n            cx = x;\n            cy = y;\n          } else {\n            if (cx !== x || cy !== y) {\n              const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n              curves.forEach(function (curve) {\n                out.push({\n                  key: 'C',\n                  data: curve\n                });\n              });\n              cx = x;\n              cy = y;\n            }\n          }\n          break;\n        }\n      case 'Z':\n        out.push({\n          key: 'Z',\n          data: []\n        });\n        cx = subx;\n        cy = suby;\n        break;\n    }\n    lastType = key;\n  }\n  return out;\n}\nfunction degToRad(degrees) {\n  return Math.PI * degrees / 180;\n}\nfunction rotate(x, y, angleRad) {\n  const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n  const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n  return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n  const angleRad = degToRad(angle);\n  let params = [];\n  let f1 = 0,\n    f2 = 0,\n    cx = 0,\n    cy = 0;\n  if (recursive) {\n    [f1, f2, cx, cy] = recursive;\n  } else {\n    [x1, y1] = rotate(x1, y1, -angleRad);\n    [x2, y2] = rotate(x2, y2, -angleRad);\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = x * x / (r1 * r1) + y * y / (r2 * r2);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      r1 = h * r1;\n      r2 = h * r2;\n    }\n    const sign = largeArcFlag === sweepFlag ? -1 : 1;\n    const r1Pow = r1 * r1;\n    const r2Pow = r2 * r2;\n    const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n    const right = r1Pow * y * y + r2Pow * x * x;\n    const k = sign * Math.sqrt(Math.abs(left / right));\n    cx = k * r1 * y / r2 + (x1 + x2) / 2;\n    cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n    f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n    f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n    if (x1 < cx) {\n      f1 = Math.PI - f1;\n    }\n    if (x2 < cx) {\n      f2 = Math.PI - f2;\n    }\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n    if (sweepFlag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n    if (!sweepFlag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  }\n  let df = f2 - f1;\n  if (Math.abs(df) > Math.PI * 120 / 180) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    if (sweepFlag && f2 > f1) {\n      f2 = f1 + Math.PI * 120 / 180 * 1;\n    } else {\n      f2 = f1 + Math.PI * 120 / 180 * -1;\n    }\n    x2 = cx + r1 * Math.cos(f2);\n    y2 = cy + r2 * Math.sin(f2);\n    params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n  }\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = 4 / 3 * r1 * t;\n  const hy = 4 / 3 * r2 * t;\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2, m3, m4].concat(params);\n  } else {\n    params = [m2, m3, m4].concat(params);\n    const curves = [];\n    for (let i = 0; i < params.length; i += 3) {\n      const r1 = rotate(params[i][0], params[i][1], angleRad);\n      const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n      const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n      curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n    }\n    return curves;\n  }\n}","map":{"version":3,"names":["normalize","segments","out","lastType","cx","cy","subx","suby","lcx","lcy","key","data","push","cx1","cy1","x","y","x1","y1","cx2","cy2","r1","Math","abs","r2","angle","largeArcFlag","sweepFlag","curves","arcToCubicCurves","forEach","curve","degToRad","degrees","PI","rotate","angleRad","X","cos","sin","Y","x2","y2","recursive","params","f1","f2","h","sqrt","sign","r1Pow","r2Pow","left","right","k","asin","parseFloat","toFixed","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","concat","i","length","r3"],"sources":["D:/project/excalidraw-cn/node_modules/path-data-parser/lib/normalize.js"],"sourcesContent":["// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n    const out = [];\n    let lastType = '';\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    let lcx = 0, lcy = 0;\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                lcx = data[2];\n                lcy = data[3];\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'H':\n                cx = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'V':\n                cy = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'S': {\n                let cx1 = 0, cy1 = 0;\n                if (lastType === 'C' || lastType === 'S') {\n                    cx1 = cx + (cx - lcx);\n                    cy1 = cy + (cy - lcy);\n                }\n                else {\n                    cx1 = cx;\n                    cy1 = cy;\n                }\n                out.push({ key: 'C', data: [cx1, cy1, ...data] });\n                lcx = data[0];\n                lcy = data[1];\n                cx = data[2];\n                cy = data[3];\n                break;\n            }\n            case 'T': {\n                const [x, y] = data;\n                let x1 = 0, y1 = 0;\n                if (lastType === 'Q' || lastType === 'T') {\n                    x1 = cx + (cx - lcx);\n                    y1 = cy + (cy - lcy);\n                }\n                else {\n                    x1 = cx;\n                    y1 = cy;\n                }\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'Q': {\n                const [x1, y1, x, y] = data;\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'A': {\n                const r1 = Math.abs(data[0]);\n                const r2 = Math.abs(data[1]);\n                const angle = data[2];\n                const largeArcFlag = data[3];\n                const sweepFlag = data[4];\n                const x = data[5];\n                const y = data[6];\n                if (r1 === 0 || r2 === 0) {\n                    out.push({ key: 'C', data: [cx, cy, x, y, x, y] });\n                    cx = x;\n                    cy = y;\n                }\n                else {\n                    if (cx !== x || cy !== y) {\n                        const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n                        curves.forEach(function (curve) {\n                            out.push({ key: 'C', data: curve });\n                        });\n                        cx = x;\n                        cy = y;\n                    }\n                }\n                break;\n            }\n            case 'Z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n        lastType = key;\n    }\n    return out;\n}\nfunction degToRad(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nfunction rotate(x, y, angleRad) {\n    const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n    const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n    return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n    const angleRad = degToRad(angle);\n    let params = [];\n    let f1 = 0, f2 = 0, cx = 0, cy = 0;\n    if (recursive) {\n        [f1, f2, cx, cy] = recursive;\n    }\n    else {\n        [x1, y1] = rotate(x1, y1, -angleRad);\n        [x2, y2] = rotate(x2, y2, -angleRad);\n        const x = (x1 - x2) / 2;\n        const y = (y1 - y2) / 2;\n        let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            r1 = h * r1;\n            r2 = h * r2;\n        }\n        const sign = (largeArcFlag === sweepFlag) ? -1 : 1;\n        const r1Pow = r1 * r1;\n        const r2Pow = r2 * r2;\n        const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        const right = r1Pow * y * y + r2Pow * x * x;\n        const k = sign * Math.sqrt(Math.abs(left / right));\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n        if (x1 < cx) {\n            f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n            f2 = Math.PI - f2;\n        }\n        if (f1 < 0) {\n            f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n            f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n            f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n            f2 = f2 - Math.PI * 2;\n        }\n    }\n    let df = f2 - f1;\n    if (Math.abs(df) > (Math.PI * 120 / 180)) {\n        const f2old = f2;\n        const x2old = x2;\n        const y2old = y2;\n        if (sweepFlag && f2 > f1) {\n            f2 = f1 + (Math.PI * 120 / 180) * (1);\n        }\n        else {\n            f2 = f1 + (Math.PI * 120 / 180) * (-1);\n        }\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n    }\n    df = f2 - f1;\n    const c1 = Math.cos(f1);\n    const s1 = Math.sin(f1);\n    const c2 = Math.cos(f2);\n    const s2 = Math.sin(f2);\n    const t = Math.tan(df / 4);\n    const hx = 4 / 3 * r1 * t;\n    const hy = 4 / 3 * r2 * t;\n    const m1 = [x1, y1];\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\n    const m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(params);\n    }\n    else {\n        params = [m2, m3, m4].concat(params);\n        const curves = [];\n        for (let i = 0; i < params.length; i += 3) {\n            const r1 = rotate(params[i][0], params[i][1], angleRad);\n            const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n            const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n            curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n        }\n        return curves;\n    }\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,SAASA,CAACC,QAAQ,EAAE;EAChC,MAAMC,GAAG,GAAG,EAAE;EACd,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;EAClB,IAAIC,IAAI,GAAG,CAAC;IAAEC,IAAI,GAAG,CAAC;EACtB,IAAIC,GAAG,GAAG,CAAC;IAAEC,GAAG,GAAG,CAAC;EACpB,KAAK,MAAM;IAAEC,GAAG;IAAEC;EAAK,CAAC,IAAIV,QAAQ,EAAE;IAClC,QAAQS,GAAG;MACP,KAAK,GAAG;QACJR,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,CAAC,GAAGA,IAAI;QAAE,CAAC,CAAC;QACvC,CAACP,EAAE,EAAEC,EAAE,CAAC,GAAGM,IAAI;QACf,CAACL,IAAI,EAAEC,IAAI,CAAC,GAAGI,IAAI;QACnB;MACJ,KAAK,GAAG;QACJT,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,CAAC,GAAGA,IAAI;QAAE,CAAC,CAAC;QACvCP,EAAE,GAAGO,IAAI,CAAC,CAAC,CAAC;QACZN,EAAE,GAAGM,IAAI,CAAC,CAAC,CAAC;QACZH,GAAG,GAAGG,IAAI,CAAC,CAAC,CAAC;QACbF,GAAG,GAAGE,IAAI,CAAC,CAAC,CAAC;QACb;MACJ,KAAK,GAAG;QACJT,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,CAAC,GAAGA,IAAI;QAAE,CAAC,CAAC;QACvC,CAACP,EAAE,EAAEC,EAAE,CAAC,GAAGM,IAAI;QACf;MACJ,KAAK,GAAG;QACJP,EAAE,GAAGO,IAAI,CAAC,CAAC,CAAC;QACZT,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,CAACP,EAAE,EAAEC,EAAE;QAAE,CAAC,CAAC;QACtC;MACJ,KAAK,GAAG;QACJA,EAAE,GAAGM,IAAI,CAAC,CAAC,CAAC;QACZT,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE,CAACP,EAAE,EAAEC,EAAE;QAAE,CAAC,CAAC;QACtC;MACJ,KAAK,GAAG;QAAE;UACN,IAAIQ,GAAG,GAAG,CAAC;YAAEC,GAAG,GAAG,CAAC;UACpB,IAAIX,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,GAAG,EAAE;YACtCU,GAAG,GAAGT,EAAE,IAAIA,EAAE,GAAGI,GAAG,CAAC;YACrBM,GAAG,GAAGT,EAAE,IAAIA,EAAE,GAAGI,GAAG,CAAC;UACzB,CAAC,MACI;YACDI,GAAG,GAAGT,EAAE;YACRU,GAAG,GAAGT,EAAE;UACZ;UACAH,GAAG,CAACU,IAAI,CAAC;YAAEF,GAAG,EAAE,GAAG;YAAEC,IAAI,EAAE,CAACE,GAAG,EAAEC,GAAG,EAAE,GAAGH,IAAI;UAAE,CAAC,CAAC;UACjDH,GAAG,GAAGG,IAAI,CAAC,CAAC,CAAC;UACbF,GAAG,GAAGE,IAAI,CAAC,CAAC,CAAC;UACbP,EAAE,GAAGO,IAAI,CAAC,CAAC,CAAC;UACZN,EAAE,GAAGM,IAAI,CAAC,CAAC,CAAC;UACZ;QACJ;MACA,KAAK,GAAG;QAAE;UACN,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,GAAGL,IAAI;UACnB,IAAIM,EAAE,GAAG,CAAC;YAAEC,EAAE,GAAG,CAAC;UAClB,IAAIf,QAAQ,KAAK,GAAG,IAAIA,QAAQ,KAAK,GAAG,EAAE;YACtCc,EAAE,GAAGb,EAAE,IAAIA,EAAE,GAAGI,GAAG,CAAC;YACpBU,EAAE,GAAGb,EAAE,IAAIA,EAAE,GAAGI,GAAG,CAAC;UACxB,CAAC,MACI;YACDQ,EAAE,GAAGb,EAAE;YACPc,EAAE,GAAGb,EAAE;UACX;UACA,MAAMQ,GAAG,GAAGT,EAAE,GAAG,CAAC,IAAIa,EAAE,GAAGb,EAAE,CAAC,GAAG,CAAC;UAClC,MAAMU,GAAG,GAAGT,EAAE,GAAG,CAAC,IAAIa,EAAE,GAAGb,EAAE,CAAC,GAAG,CAAC;UAClC,MAAMc,GAAG,GAAGJ,CAAC,GAAG,CAAC,IAAIE,EAAE,GAAGF,CAAC,CAAC,GAAG,CAAC;UAChC,MAAMK,GAAG,GAAGJ,CAAC,GAAG,CAAC,IAAIE,EAAE,GAAGF,CAAC,CAAC,GAAG,CAAC;UAChCd,GAAG,CAACU,IAAI,CAAC;YAAEF,GAAG,EAAE,GAAG;YAAEC,IAAI,EAAE,CAACE,GAAG,EAAEC,GAAG,EAAEK,GAAG,EAAEC,GAAG,EAAEL,CAAC,EAAEC,CAAC;UAAE,CAAC,CAAC;UACxDR,GAAG,GAAGS,EAAE;UACRR,GAAG,GAAGS,EAAE;UACRd,EAAE,GAAGW,CAAC;UACNV,EAAE,GAAGW,CAAC;UACN;QACJ;MACA,KAAK,GAAG;QAAE;UACN,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAEH,CAAC,EAAEC,CAAC,CAAC,GAAGL,IAAI;UAC3B,MAAME,GAAG,GAAGT,EAAE,GAAG,CAAC,IAAIa,EAAE,GAAGb,EAAE,CAAC,GAAG,CAAC;UAClC,MAAMU,GAAG,GAAGT,EAAE,GAAG,CAAC,IAAIa,EAAE,GAAGb,EAAE,CAAC,GAAG,CAAC;UAClC,MAAMc,GAAG,GAAGJ,CAAC,GAAG,CAAC,IAAIE,EAAE,GAAGF,CAAC,CAAC,GAAG,CAAC;UAChC,MAAMK,GAAG,GAAGJ,CAAC,GAAG,CAAC,IAAIE,EAAE,GAAGF,CAAC,CAAC,GAAG,CAAC;UAChCd,GAAG,CAACU,IAAI,CAAC;YAAEF,GAAG,EAAE,GAAG;YAAEC,IAAI,EAAE,CAACE,GAAG,EAAEC,GAAG,EAAEK,GAAG,EAAEC,GAAG,EAAEL,CAAC,EAAEC,CAAC;UAAE,CAAC,CAAC;UACxDR,GAAG,GAAGS,EAAE;UACRR,GAAG,GAAGS,EAAE;UACRd,EAAE,GAAGW,CAAC;UACNV,EAAE,GAAGW,CAAC;UACN;QACJ;MACA,KAAK,GAAG;QAAE;UACN,MAAMK,EAAE,GAAGC,IAAI,CAACC,GAAG,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5B,MAAMa,EAAE,GAAGF,IAAI,CAACC,GAAG,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC;UAC5B,MAAMc,KAAK,GAAGd,IAAI,CAAC,CAAC,CAAC;UACrB,MAAMe,YAAY,GAAGf,IAAI,CAAC,CAAC,CAAC;UAC5B,MAAMgB,SAAS,GAAGhB,IAAI,CAAC,CAAC,CAAC;UACzB,MAAMI,CAAC,GAAGJ,IAAI,CAAC,CAAC,CAAC;UACjB,MAAMK,CAAC,GAAGL,IAAI,CAAC,CAAC,CAAC;UACjB,IAAIU,EAAE,KAAK,CAAC,IAAIG,EAAE,KAAK,CAAC,EAAE;YACtBtB,GAAG,CAACU,IAAI,CAAC;cAAEF,GAAG,EAAE,GAAG;cAAEC,IAAI,EAAE,CAACP,EAAE,EAAEC,EAAE,EAAEU,CAAC,EAAEC,CAAC,EAAED,CAAC,EAAEC,CAAC;YAAE,CAAC,CAAC;YAClDZ,EAAE,GAAGW,CAAC;YACNV,EAAE,GAAGW,CAAC;UACV,CAAC,MACI;YACD,IAAIZ,EAAE,KAAKW,CAAC,IAAIV,EAAE,KAAKW,CAAC,EAAE;cACtB,MAAMY,MAAM,GAAGC,gBAAgB,CAACzB,EAAE,EAAEC,EAAE,EAAEU,CAAC,EAAEC,CAAC,EAAEK,EAAE,EAAEG,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAEC,SAAS,CAAC;cACrFC,MAAM,CAACE,OAAO,CAAC,UAAUC,KAAK,EAAE;gBAC5B7B,GAAG,CAACU,IAAI,CAAC;kBAAEF,GAAG,EAAE,GAAG;kBAAEC,IAAI,EAAEoB;gBAAM,CAAC,CAAC;cACvC,CAAC,CAAC;cACF3B,EAAE,GAAGW,CAAC;cACNV,EAAE,GAAGW,CAAC;YACV;UACJ;UACA;QACJ;MACA,KAAK,GAAG;QACJd,GAAG,CAACU,IAAI,CAAC;UAAEF,GAAG,EAAE,GAAG;UAAEC,IAAI,EAAE;QAAG,CAAC,CAAC;QAChCP,EAAE,GAAGE,IAAI;QACTD,EAAE,GAAGE,IAAI;QACT;IAAM;IAEdJ,QAAQ,GAAGO,GAAG;EAClB;EACA,OAAOR,GAAG;AACd;AACA,SAAS8B,QAAQA,CAACC,OAAO,EAAE;EACvB,OAAQX,IAAI,CAACY,EAAE,GAAGD,OAAO,GAAI,GAAG;AACpC;AACA,SAASE,MAAMA,CAACpB,CAAC,EAAEC,CAAC,EAAEoB,QAAQ,EAAE;EAC5B,MAAMC,CAAC,GAAGtB,CAAC,GAAGO,IAAI,CAACgB,GAAG,CAACF,QAAQ,CAAC,GAAGpB,CAAC,GAAGM,IAAI,CAACiB,GAAG,CAACH,QAAQ,CAAC;EACzD,MAAMI,CAAC,GAAGzB,CAAC,GAAGO,IAAI,CAACiB,GAAG,CAACH,QAAQ,CAAC,GAAGpB,CAAC,GAAGM,IAAI,CAACgB,GAAG,CAACF,QAAQ,CAAC;EACzD,OAAO,CAACC,CAAC,EAAEG,CAAC,CAAC;AACjB;AACA,SAASX,gBAAgBA,CAACZ,EAAE,EAAEC,EAAE,EAAEuB,EAAE,EAAEC,EAAE,EAAErB,EAAE,EAAEG,EAAE,EAAEC,KAAK,EAAEC,YAAY,EAAEC,SAAS,EAAEgB,SAAS,EAAE;EACzF,MAAMP,QAAQ,GAAGJ,QAAQ,CAACP,KAAK,CAAC;EAChC,IAAImB,MAAM,GAAG,EAAE;EACf,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;IAAE1C,EAAE,GAAG,CAAC;IAAEC,EAAE,GAAG,CAAC;EAClC,IAAIsC,SAAS,EAAE;IACX,CAACE,EAAE,EAAEC,EAAE,EAAE1C,EAAE,EAAEC,EAAE,CAAC,GAAGsC,SAAS;EAChC,CAAC,MACI;IACD,CAAC1B,EAAE,EAAEC,EAAE,CAAC,GAAGiB,MAAM,CAAClB,EAAE,EAAEC,EAAE,EAAE,CAACkB,QAAQ,CAAC;IACpC,CAACK,EAAE,EAAEC,EAAE,CAAC,GAAGP,MAAM,CAACM,EAAE,EAAEC,EAAE,EAAE,CAACN,QAAQ,CAAC;IACpC,MAAMrB,CAAC,GAAG,CAACE,EAAE,GAAGwB,EAAE,IAAI,CAAC;IACvB,MAAMzB,CAAC,GAAG,CAACE,EAAE,GAAGwB,EAAE,IAAI,CAAC;IACvB,IAAIK,CAAC,GAAIhC,CAAC,GAAGA,CAAC,IAAKM,EAAE,GAAGA,EAAE,CAAC,GAAIL,CAAC,GAAGA,CAAC,IAAKQ,EAAE,GAAGA,EAAE,CAAC;IACjD,IAAIuB,CAAC,GAAG,CAAC,EAAE;MACPA,CAAC,GAAGzB,IAAI,CAAC0B,IAAI,CAACD,CAAC,CAAC;MAChB1B,EAAE,GAAG0B,CAAC,GAAG1B,EAAE;MACXG,EAAE,GAAGuB,CAAC,GAAGvB,EAAE;IACf;IACA,MAAMyB,IAAI,GAAIvB,YAAY,KAAKC,SAAS,GAAI,CAAC,CAAC,GAAG,CAAC;IAClD,MAAMuB,KAAK,GAAG7B,EAAE,GAAGA,EAAE;IACrB,MAAM8B,KAAK,GAAG3B,EAAE,GAAGA,EAAE;IACrB,MAAM4B,IAAI,GAAGF,KAAK,GAAGC,KAAK,GAAGD,KAAK,GAAGlC,CAAC,GAAGA,CAAC,GAAGmC,KAAK,GAAGpC,CAAC,GAAGA,CAAC;IAC1D,MAAMsC,KAAK,GAAGH,KAAK,GAAGlC,CAAC,GAAGA,CAAC,GAAGmC,KAAK,GAAGpC,CAAC,GAAGA,CAAC;IAC3C,MAAMuC,CAAC,GAAGL,IAAI,GAAG3B,IAAI,CAAC0B,IAAI,CAAC1B,IAAI,CAACC,GAAG,CAAC6B,IAAI,GAAGC,KAAK,CAAC,CAAC;IAClDjD,EAAE,GAAGkD,CAAC,GAAGjC,EAAE,GAAGL,CAAC,GAAGQ,EAAE,GAAG,CAACP,EAAE,GAAGwB,EAAE,IAAI,CAAC;IACpCpC,EAAE,GAAGiD,CAAC,GAAG,CAAC9B,EAAE,GAAGT,CAAC,GAAGM,EAAE,GAAG,CAACH,EAAE,GAAGwB,EAAE,IAAI,CAAC;IACrCG,EAAE,GAAGvB,IAAI,CAACiC,IAAI,CAACC,UAAU,CAAC,CAAC,CAACtC,EAAE,GAAGb,EAAE,IAAImB,EAAE,EAAEiC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACvDX,EAAE,GAAGxB,IAAI,CAACiC,IAAI,CAACC,UAAU,CAAC,CAAC,CAACd,EAAE,GAAGrC,EAAE,IAAImB,EAAE,EAAEiC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,IAAIxC,EAAE,GAAGb,EAAE,EAAE;MACTyC,EAAE,GAAGvB,IAAI,CAACY,EAAE,GAAGW,EAAE;IACrB;IACA,IAAIJ,EAAE,GAAGrC,EAAE,EAAE;MACT0C,EAAE,GAAGxB,IAAI,CAACY,EAAE,GAAGY,EAAE;IACrB;IACA,IAAID,EAAE,GAAG,CAAC,EAAE;MACRA,EAAE,GAAGvB,IAAI,CAACY,EAAE,GAAG,CAAC,GAAGW,EAAE;IACzB;IACA,IAAIC,EAAE,GAAG,CAAC,EAAE;MACRA,EAAE,GAAGxB,IAAI,CAACY,EAAE,GAAG,CAAC,GAAGY,EAAE;IACzB;IACA,IAAInB,SAAS,IAAIkB,EAAE,GAAGC,EAAE,EAAE;MACtBD,EAAE,GAAGA,EAAE,GAAGvB,IAAI,CAACY,EAAE,GAAG,CAAC;IACzB;IACA,IAAI,CAACP,SAAS,IAAImB,EAAE,GAAGD,EAAE,EAAE;MACvBC,EAAE,GAAGA,EAAE,GAAGxB,IAAI,CAACY,EAAE,GAAG,CAAC;IACzB;EACJ;EACA,IAAIwB,EAAE,GAAGZ,EAAE,GAAGD,EAAE;EAChB,IAAIvB,IAAI,CAACC,GAAG,CAACmC,EAAE,CAAC,GAAIpC,IAAI,CAACY,EAAE,GAAG,GAAG,GAAG,GAAI,EAAE;IACtC,MAAMyB,KAAK,GAAGb,EAAE;IAChB,MAAMc,KAAK,GAAGnB,EAAE;IAChB,MAAMoB,KAAK,GAAGnB,EAAE;IAChB,IAAIf,SAAS,IAAImB,EAAE,GAAGD,EAAE,EAAE;MACtBC,EAAE,GAAGD,EAAE,GAAIvB,IAAI,CAACY,EAAE,GAAG,GAAG,GAAG,GAAG,GAAK,CAAE;IACzC,CAAC,MACI;MACDY,EAAE,GAAGD,EAAE,GAAIvB,IAAI,CAACY,EAAE,GAAG,GAAG,GAAG,GAAG,GAAK,CAAC,CAAE;IAC1C;IACAO,EAAE,GAAGrC,EAAE,GAAGiB,EAAE,GAAGC,IAAI,CAACgB,GAAG,CAACQ,EAAE,CAAC;IAC3BJ,EAAE,GAAGrC,EAAE,GAAGmB,EAAE,GAAGF,IAAI,CAACiB,GAAG,CAACO,EAAE,CAAC;IAC3BF,MAAM,GAAGf,gBAAgB,CAACY,EAAE,EAAEC,EAAE,EAAEkB,KAAK,EAAEC,KAAK,EAAExC,EAAE,EAAEG,EAAE,EAAEC,KAAK,EAAE,CAAC,EAAEE,SAAS,EAAE,CAACmB,EAAE,EAAEa,KAAK,EAAEvD,EAAE,EAAEC,EAAE,CAAC,CAAC;EACrG;EACAqD,EAAE,GAAGZ,EAAE,GAAGD,EAAE;EACZ,MAAMiB,EAAE,GAAGxC,IAAI,CAACgB,GAAG,CAACO,EAAE,CAAC;EACvB,MAAMkB,EAAE,GAAGzC,IAAI,CAACiB,GAAG,CAACM,EAAE,CAAC;EACvB,MAAMmB,EAAE,GAAG1C,IAAI,CAACgB,GAAG,CAACQ,EAAE,CAAC;EACvB,MAAMmB,EAAE,GAAG3C,IAAI,CAACiB,GAAG,CAACO,EAAE,CAAC;EACvB,MAAMoB,CAAC,GAAG5C,IAAI,CAAC6C,GAAG,CAACT,EAAE,GAAG,CAAC,CAAC;EAC1B,MAAMU,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG/C,EAAE,GAAG6C,CAAC;EACzB,MAAMG,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG7C,EAAE,GAAG0C,CAAC;EACzB,MAAMI,EAAE,GAAG,CAACrD,EAAE,EAAEC,EAAE,CAAC;EACnB,MAAMqD,EAAE,GAAG,CAACtD,EAAE,GAAGmD,EAAE,GAAGL,EAAE,EAAE7C,EAAE,GAAGmD,EAAE,GAAGP,EAAE,CAAC;EACvC,MAAMU,EAAE,GAAG,CAAC/B,EAAE,GAAG2B,EAAE,GAAGH,EAAE,EAAEvB,EAAE,GAAG2B,EAAE,GAAGL,EAAE,CAAC;EACvC,MAAMS,EAAE,GAAG,CAAChC,EAAE,EAAEC,EAAE,CAAC;EACnB6B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;EACzBA,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC;EACzB,IAAI5B,SAAS,EAAE;IACX,OAAO,CAAC4B,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAACC,MAAM,CAAC9B,MAAM,CAAC;EACtC,CAAC,MACI;IACDA,MAAM,GAAG,CAAC2B,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAACC,MAAM,CAAC9B,MAAM,CAAC;IACpC,MAAMhB,MAAM,GAAG,EAAE;IACjB,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG/B,MAAM,CAACgC,MAAM,EAAED,CAAC,IAAI,CAAC,EAAE;MACvC,MAAMtD,EAAE,GAAGc,MAAM,CAACS,MAAM,CAAC+B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE/B,MAAM,CAAC+B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEvC,QAAQ,CAAC;MACvD,MAAMZ,EAAE,GAAGW,MAAM,CAACS,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE/B,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEvC,QAAQ,CAAC;MAC/D,MAAMyC,EAAE,GAAG1C,MAAM,CAACS,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE/B,MAAM,CAAC+B,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEvC,QAAQ,CAAC;MAC/DR,MAAM,CAAChB,IAAI,CAAC,CAACS,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAEG,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,EAAEqD,EAAE,CAAC,CAAC,CAAC,EAAEA,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D;IACA,OAAOjD,MAAM;EACjB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}