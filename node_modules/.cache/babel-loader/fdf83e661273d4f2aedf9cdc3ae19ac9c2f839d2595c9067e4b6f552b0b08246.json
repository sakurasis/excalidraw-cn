{"ast":null,"code":"import { register } from \"./register\";\nimport { getSelectedElements } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport { resizeMultipleElements } from \"../element/resizeElements\";\nimport { arrayToMap } from \"../utils\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getCommonBoundingBox } from \"../element/bounds\";\nimport { bindOrUnbindSelectedElements, isBindingEnabled, unbindLinearElements } from \"../element/binding\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\nexport const actionFlipHorizontal = register({\n  name: \"flipHorizontal\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(flipSelectedElements(elements, appState, \"horizontal\"), appState, app),\n      appState,\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.shiftKey && event.code === CODES.H,\n  contextItemLabel: \"labels.flipHorizontal\"\n});\nexport const actionFlipVertical = register({\n  name: \"flipVertical\",\n  trackEvent: {\n    category: \"element\"\n  },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(flipSelectedElements(elements, appState, \"vertical\"), appState, app),\n      appState,\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.shiftKey && event.code === CODES.V && !event[KEYS.CTRL_OR_CMD],\n  contextItemLabel: \"labels.flipVertical\"\n});\nconst flipSelectedElements = (elements, appState, flipDirection) => {\n  const selectedElements = getSelectedElements(getNonDeletedElements(elements), appState, {\n    includeElementsInFrames: true\n  });\n  const updatedElements = flipElements(selectedElements, appState, flipDirection);\n  const updatedElementsMap = arrayToMap(updatedElements);\n  return elements.map(element => updatedElementsMap.get(element.id) || element);\n};\nconst flipElements = (elements, appState, flipDirection) => {\n  const {\n    minX,\n    minY,\n    maxX,\n    maxY\n  } = getCommonBoundingBox(elements);\n  resizeMultipleElements({\n    originalElements: arrayToMap(elements)\n  }, elements, \"nw\", true, flipDirection === \"horizontal\" ? maxX : minX, flipDirection === \"horizontal\" ? minY : maxY);\n  (isBindingEnabled(appState) ? bindOrUnbindSelectedElements : unbindLinearElements)(elements);\n  return elements;\n};","map":{"version":3,"names":["register","getSelectedElements","getNonDeletedElements","resizeMultipleElements","arrayToMap","CODES","KEYS","getCommonBoundingBox","bindOrUnbindSelectedElements","isBindingEnabled","unbindLinearElements","updateFrameMembershipOfSelectedElements","actionFlipHorizontal","name","trackEvent","category","perform","elements","appState","_","app","flipSelectedElements","commitToHistory","keyTest","event","shiftKey","code","H","contextItemLabel","actionFlipVertical","V","CTRL_OR_CMD","flipDirection","selectedElements","includeElementsInFrames","updatedElements","flipElements","updatedElementsMap","map","element","get","id","minX","minY","maxX","maxY","originalElements"],"sources":["D:/project/excalidraw-cn/src/actions/actionFlip.ts"],"sourcesContent":["import { register } from \"./register\";\nimport { getSelectedElements } from \"../scene\";\nimport { getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement, NonDeleted } from \"../element/types\";\nimport { resizeMultipleElements } from \"../element/resizeElements\";\nimport { AppState, PointerDownState } from \"../types\";\nimport { arrayToMap } from \"../utils\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getCommonBoundingBox } from \"../element/bounds\";\nimport {\n  bindOrUnbindSelectedElements,\n  isBindingEnabled,\n  unbindLinearElements,\n} from \"../element/binding\";\nimport { updateFrameMembershipOfSelectedElements } from \"../frame\";\n\nexport const actionFlipHorizontal = register({\n  name: \"flipHorizontal\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(\n        flipSelectedElements(elements, appState, \"horizontal\"),\n        appState,\n        app,\n      ),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) => event.shiftKey && event.code === CODES.H,\n  contextItemLabel: \"labels.flipHorizontal\",\n});\n\nexport const actionFlipVertical = register({\n  name: \"flipVertical\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState, _, app) => {\n    return {\n      elements: updateFrameMembershipOfSelectedElements(\n        flipSelectedElements(elements, appState, \"vertical\"),\n        appState,\n        app,\n      ),\n      appState,\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event.shiftKey && event.code === CODES.V && !event[KEYS.CTRL_OR_CMD],\n  contextItemLabel: \"labels.flipVertical\",\n});\n\nconst flipSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  flipDirection: \"horizontal\" | \"vertical\",\n) => {\n  const selectedElements = getSelectedElements(\n    getNonDeletedElements(elements),\n    appState,\n    {\n      includeElementsInFrames: true,\n    },\n  );\n\n  const updatedElements = flipElements(\n    selectedElements,\n    appState,\n    flipDirection,\n  );\n\n  const updatedElementsMap = arrayToMap(updatedElements);\n\n  return elements.map(\n    (element) => updatedElementsMap.get(element.id) || element,\n  );\n};\n\nconst flipElements = (\n  elements: NonDeleted<ExcalidrawElement>[],\n  appState: AppState,\n  flipDirection: \"horizontal\" | \"vertical\",\n): ExcalidrawElement[] => {\n  const { minX, minY, maxX, maxY } = getCommonBoundingBox(elements);\n\n  resizeMultipleElements(\n    { originalElements: arrayToMap(elements) } as PointerDownState,\n    elements,\n    \"nw\",\n    true,\n    flipDirection === \"horizontal\" ? maxX : minX,\n    flipDirection === \"horizontal\" ? minY : maxY,\n  );\n\n  (isBindingEnabled(appState)\n    ? bindOrUnbindSelectedElements\n    : unbindLinearElements)(elements);\n\n  return elements;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}