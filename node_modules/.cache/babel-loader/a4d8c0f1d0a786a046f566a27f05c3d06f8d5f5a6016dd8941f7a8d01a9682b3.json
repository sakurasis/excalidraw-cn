{"ast":null,"code":"import fallbackLangData from \"./locales/en.json\";\nimport percentages from \"./locales/percentages.json\";\nimport { ENV } from \"./constants\";\nimport { jotaiScope, jotaiStore } from \"./jotai\";\nimport { atom, useAtomValue } from \"jotai\";\nconst COMPLETION_THRESHOLD = 85;\nexport const defaultLang = {\n  code: \"en\",\n  label: \"English\"\n};\nexport const languages = [defaultLang, ...[{\n  code: \"ar-SA\",\n  label: \"العربية\",\n  rtl: true\n}, {\n  code: \"bg-BG\",\n  label: \"Български\"\n}, {\n  code: \"ca-ES\",\n  label: \"Català\"\n}, {\n  code: \"cs-CZ\",\n  label: \"Česky\"\n}, {\n  code: \"de-DE\",\n  label: \"Deutsch\"\n}, {\n  code: \"el-GR\",\n  label: \"Ελληνικά\"\n}, {\n  code: \"es-ES\",\n  label: \"Español\"\n}, {\n  code: \"eu-ES\",\n  label: \"Euskara\"\n}, {\n  code: \"fa-IR\",\n  label: \"فارسی\",\n  rtl: true\n}, {\n  code: \"fi-FI\",\n  label: \"Suomi\"\n}, {\n  code: \"fr-FR\",\n  label: \"Français\"\n}, {\n  code: \"gl-ES\",\n  label: \"Galego\"\n}, {\n  code: \"he-IL\",\n  label: \"עברית\",\n  rtl: true\n}, {\n  code: \"hi-IN\",\n  label: \"हिन्दी\"\n}, {\n  code: \"hu-HU\",\n  label: \"Magyar\"\n}, {\n  code: \"id-ID\",\n  label: \"Bahasa Indonesia\"\n}, {\n  code: \"it-IT\",\n  label: \"Italiano\"\n}, {\n  code: \"ja-JP\",\n  label: \"日本語\"\n}, {\n  code: \"kab-KAB\",\n  label: \"Taqbaylit\"\n}, {\n  code: \"kk-KZ\",\n  label: \"Қазақ тілі\"\n}, {\n  code: \"ko-KR\",\n  label: \"한국어\"\n}, {\n  code: \"ku-TR\",\n  label: \"Kurdî\"\n}, {\n  code: \"lt-LT\",\n  label: \"Lietuvių\"\n}, {\n  code: \"lv-LV\",\n  label: \"Latviešu\"\n}, {\n  code: \"my-MM\",\n  label: \"Burmese\"\n}, {\n  code: \"nb-NO\",\n  label: \"Norsk bokmål\"\n}, {\n  code: \"nl-NL\",\n  label: \"Nederlands\"\n}, {\n  code: \"nn-NO\",\n  label: \"Norsk nynorsk\"\n}, {\n  code: \"oc-FR\",\n  label: \"Occitan\"\n}, {\n  code: \"pa-IN\",\n  label: \"ਪੰਜਾਬੀ\"\n}, {\n  code: \"pl-PL\",\n  label: \"Polski\"\n}, {\n  code: \"pt-BR\",\n  label: \"Português Brasileiro\"\n}, {\n  code: \"pt-PT\",\n  label: \"Português\"\n}, {\n  code: \"ro-RO\",\n  label: \"Română\"\n}, {\n  code: \"ru-RU\",\n  label: \"Русский\"\n}, {\n  code: \"sk-SK\",\n  label: \"Slovenčina\"\n}, {\n  code: \"sv-SE\",\n  label: \"Svenska\"\n}, {\n  code: \"sl-SI\",\n  label: \"Slovenščina\"\n}, {\n  code: \"tr-TR\",\n  label: \"Türkçe\"\n}, {\n  code: \"uk-UA\",\n  label: \"Українська\"\n}, {\n  code: \"zh-CN\",\n  label: \"简体中文\"\n}, {\n  code: \"zh-TW\",\n  label: \"繁體中文\"\n}, {\n  code: \"vi-VN\",\n  label: \"Tiếng Việt\"\n}, {\n  code: \"mr-IN\",\n  label: \"मराठी\"\n}].filter(lang => percentages[lang.code] >= COMPLETION_THRESHOLD).sort((left, right) => left.label > right.label ? 1 : -1)];\nconst TEST_LANG_CODE = \"__test__\";\nif (process.env.NODE_ENV === ENV.DEVELOPMENT) {\n  languages.unshift({\n    code: TEST_LANG_CODE,\n    label: \"test language\"\n  }, {\n    code: `${TEST_LANG_CODE}.rtl`,\n    label: \"\\u{202a}test language (rtl)\\u{202c}\",\n    rtl: true\n  });\n}\nlet currentLang = defaultLang;\nlet currentLangData = {};\nexport const setLanguage = async lang => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n  document.documentElement.lang = currentLang.code;\n  if (lang.code.startsWith(TEST_LANG_CODE)) {\n    currentLangData = {};\n  } else {\n    try {\n      currentLangData = await import( /* webpackChunkName: \"locales/[request]\" */`./locales/${currentLang.code}.json`);\n    } catch (error) {\n      console.error(`Failed to load language ${lang.code}:`, error.message);\n      currentLangData = fallbackLangData;\n    }\n  }\n  jotaiStore.set(editorLangCodeAtom, lang.code);\n};\nexport const getLanguage = () => currentLang;\nconst findPartsForData = (data, parts) => {\n  for (let index = 0; index < parts.length; ++index) {\n    const part = parts[index];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\nexport const t = (path, replacement, fallback) => {\n  if (currentLang.code.startsWith(TEST_LANG_CODE)) {\n    const name = replacement ? `${path}(${JSON.stringify(replacement).slice(1, -1)})` : path;\n    return `\\u{202a}[[${name}]]\\u{202c}`;\n  }\n  const parts = path.split(\".\");\n  let translation = findPartsForData(currentLangData, parts) || findPartsForData(fallbackLangData, parts) || fallback;\n  if (translation === undefined) {\n    const errorMessage = `Can't find translation for ${path}`;\n    // in production, don't blow up the app on a missing translation key\n    if (process.env.NODE_ENV === \"production\") {\n      console.warn(errorMessage);\n      return \"\";\n    }\n    throw new Error(errorMessage);\n  }\n  if (replacement) {\n    for (const key in replacement) {\n      translation = translation.replace(`{{${key}}}`, String(replacement[key]));\n    }\n  }\n  return translation;\n};\n\n/** @private atom used solely to rerender components using `useI18n` hook */\nconst editorLangCodeAtom = atom(defaultLang.code);\n\n// Should be used in components that fall under these cases:\n// - component is rendered as an <Excalidraw> child\n// - component is rendered internally by <Excalidraw>, but the component\n//   is memoized w/o being updated on `langCode`, `AppState`, or `UIAppState`\nexport const useI18n = () => {\n  const langCode = useAtomValue(editorLangCodeAtom, jotaiScope);\n  return {\n    t,\n    langCode\n  };\n};","map":{"version":3,"names":["fallbackLangData","percentages","ENV","jotaiScope","jotaiStore","atom","useAtomValue","COMPLETION_THRESHOLD","defaultLang","code","label","languages","rtl","filter","lang","sort","left","right","TEST_LANG_CODE","process","env","NODE_ENV","DEVELOPMENT","unshift","currentLang","currentLangData","setLanguage","document","documentElement","dir","startsWith","error","console","message","set","editorLangCodeAtom","getLanguage","findPartsForData","data","parts","index","length","part","undefined","t","path","replacement","fallback","name","JSON","stringify","slice","split","translation","errorMessage","warn","Error","key","replace","String","useI18n","langCode"],"sources":["D:/project/excalidraw-cn/src/i18n.ts"],"sourcesContent":["import fallbackLangData from \"./locales/en.json\";\nimport percentages from \"./locales/percentages.json\";\nimport { ENV } from \"./constants\";\nimport { jotaiScope, jotaiStore } from \"./jotai\";\nimport { atom, useAtomValue } from \"jotai\";\n\nconst COMPLETION_THRESHOLD = 85;\n\nexport interface Language {\n  code: string;\n  label: string;\n  rtl?: boolean;\n}\n\nexport const defaultLang = { code: \"en\", label: \"English\" };\n\nexport const languages: Language[] = [\n  defaultLang,\n  ...[\n    { code: \"ar-SA\", label: \"العربية\", rtl: true },\n    { code: \"bg-BG\", label: \"Български\" },\n    { code: \"ca-ES\", label: \"Català\" },\n    { code: \"cs-CZ\", label: \"Česky\" },\n    { code: \"de-DE\", label: \"Deutsch\" },\n    { code: \"el-GR\", label: \"Ελληνικά\" },\n    { code: \"es-ES\", label: \"Español\" },\n    { code: \"eu-ES\", label: \"Euskara\" },\n    { code: \"fa-IR\", label: \"فارسی\", rtl: true },\n    { code: \"fi-FI\", label: \"Suomi\" },\n    { code: \"fr-FR\", label: \"Français\" },\n    { code: \"gl-ES\", label: \"Galego\" },\n    { code: \"he-IL\", label: \"עברית\", rtl: true },\n    { code: \"hi-IN\", label: \"हिन्दी\" },\n    { code: \"hu-HU\", label: \"Magyar\" },\n    { code: \"id-ID\", label: \"Bahasa Indonesia\" },\n    { code: \"it-IT\", label: \"Italiano\" },\n    { code: \"ja-JP\", label: \"日本語\" },\n    { code: \"kab-KAB\", label: \"Taqbaylit\" },\n    { code: \"kk-KZ\", label: \"Қазақ тілі\" },\n    { code: \"ko-KR\", label: \"한국어\" },\n    { code: \"ku-TR\", label: \"Kurdî\" },\n    { code: \"lt-LT\", label: \"Lietuvių\" },\n    { code: \"lv-LV\", label: \"Latviešu\" },\n    { code: \"my-MM\", label: \"Burmese\" },\n    { code: \"nb-NO\", label: \"Norsk bokmål\" },\n    { code: \"nl-NL\", label: \"Nederlands\" },\n    { code: \"nn-NO\", label: \"Norsk nynorsk\" },\n    { code: \"oc-FR\", label: \"Occitan\" },\n    { code: \"pa-IN\", label: \"ਪੰਜਾਬੀ\" },\n    { code: \"pl-PL\", label: \"Polski\" },\n    { code: \"pt-BR\", label: \"Português Brasileiro\" },\n    { code: \"pt-PT\", label: \"Português\" },\n    { code: \"ro-RO\", label: \"Română\" },\n    { code: \"ru-RU\", label: \"Русский\" },\n    { code: \"sk-SK\", label: \"Slovenčina\" },\n    { code: \"sv-SE\", label: \"Svenska\" },\n    { code: \"sl-SI\", label: \"Slovenščina\" },\n    { code: \"tr-TR\", label: \"Türkçe\" },\n    { code: \"uk-UA\", label: \"Українська\" },\n    { code: \"zh-CN\", label: \"简体中文\" },\n    { code: \"zh-TW\", label: \"繁體中文\" },\n    { code: \"vi-VN\", label: \"Tiếng Việt\" },\n    { code: \"mr-IN\", label: \"मराठी\" },\n  ]\n    .filter(\n      (lang) =>\n        (percentages as Record<string, number>)[lang.code] >=\n        COMPLETION_THRESHOLD,\n    )\n    .sort((left, right) => (left.label > right.label ? 1 : -1)),\n];\n\nconst TEST_LANG_CODE = \"__test__\";\nif (process.env.NODE_ENV === ENV.DEVELOPMENT) {\n  languages.unshift(\n    { code: TEST_LANG_CODE, label: \"test language\" },\n    {\n      code: `${TEST_LANG_CODE}.rtl`,\n      label: \"\\u{202a}test language (rtl)\\u{202c}\",\n      rtl: true,\n    },\n  );\n}\n\nlet currentLang: Language = defaultLang;\nlet currentLangData = {};\n\nexport const setLanguage = async (lang: Language) => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n  document.documentElement.lang = currentLang.code;\n\n  if (lang.code.startsWith(TEST_LANG_CODE)) {\n    currentLangData = {};\n  } else {\n    try {\n      currentLangData = await import(\n        /* webpackChunkName: \"locales/[request]\" */ `./locales/${currentLang.code}.json`\n      );\n    } catch (error: any) {\n      console.error(`Failed to load language ${lang.code}:`, error.message);\n      currentLangData = fallbackLangData;\n    }\n  }\n\n  jotaiStore.set(editorLangCodeAtom, lang.code);\n};\n\nexport const getLanguage = () => currentLang;\n\nconst findPartsForData = (data: any, parts: string[]) => {\n  for (let index = 0; index < parts.length; ++index) {\n    const part = parts[index];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\n\nexport const t = (\n  path: string,\n  replacement?: { [key: string]: string | number } | null,\n  fallback?: string,\n) => {\n  if (currentLang.code.startsWith(TEST_LANG_CODE)) {\n    const name = replacement\n      ? `${path}(${JSON.stringify(replacement).slice(1, -1)})`\n      : path;\n    return `\\u{202a}[[${name}]]\\u{202c}`;\n  }\n\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLangData, parts) ||\n    findPartsForData(fallbackLangData, parts) ||\n    fallback;\n  if (translation === undefined) {\n    const errorMessage = `Can't find translation for ${path}`;\n    // in production, don't blow up the app on a missing translation key\n    if (process.env.NODE_ENV === \"production\") {\n      console.warn(errorMessage);\n      return \"\";\n    }\n    throw new Error(errorMessage);\n  }\n\n  if (replacement) {\n    for (const key in replacement) {\n      translation = translation.replace(`{{${key}}}`, String(replacement[key]));\n    }\n  }\n  return translation;\n};\n\n/** @private atom used solely to rerender components using `useI18n` hook */\nconst editorLangCodeAtom = atom(defaultLang.code);\n\n// Should be used in components that fall under these cases:\n// - component is rendered as an <Excalidraw> child\n// - component is rendered internally by <Excalidraw>, but the component\n//   is memoized w/o being updated on `langCode`, `AppState`, or `UIAppState`\nexport const useI18n = () => {\n  const langCode = useAtomValue(editorLangCodeAtom, jotaiScope);\n  return { t, langCode };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}