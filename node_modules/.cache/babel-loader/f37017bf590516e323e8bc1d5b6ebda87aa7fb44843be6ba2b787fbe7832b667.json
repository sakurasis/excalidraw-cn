{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\components\\\\ImageExportDialog.tsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { actionExportWithDarkMode, actionChangeExportBackground, actionChangeExportEmbedScene, actionChangeExportScale, actionChangeProjectName } from \"../actions/actionExport\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { DEFAULT_EXPORT_PADDING, EXPORT_IMAGE_TYPES, isFirefox, EXPORT_SCALES } from \"../constants\";\nimport { canvasToBlob } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas } from \"../packages/utils\";\nimport { copyIcon, downloadIcon, helpIcon } from \"./icons\";\nimport { Dialog } from \"./Dialog\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { Switch } from \"./Switch\";\nimport { Tooltip } from \"./Tooltip\";\nimport \"./ImageExportDialog.scss\";\nimport { useAppProps } from \"./App\";\nimport { FilledButton } from \"./FilledButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supportsContextFilters = (\"filter\" in document.createElement(\"canvas\").getContext(\"2d\"));\nexport const ErrorCanvasPreview = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t(\"canvasError.cannotShowPreview\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: t(\"canvasError.canvasTooBig\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n      children: [\"(\", t(\"canvasError.canvasTooBigTip\"), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\nconst ImageExportModal = _ref => {\n  let {\n    appState,\n    elements,\n    files,\n    actionManager,\n    onExportImage\n  } = _ref;\n  const appProps = useAppProps();\n  const [projectName, setProjectName] = useState(appState.name);\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const [exportWithBackground, setExportWithBackground] = useState(appState.exportBackground);\n  const [exportDarkMode, setExportDarkMode] = useState(appState.exportWithDarkMode);\n  const [embedScene, setEmbedScene] = useState(appState.exportEmbedScene);\n  const [exportScale, setExportScale] = useState(appState.exportScale);\n  const previewRef = useRef(null);\n  const [renderError, setRenderError] = useState(null);\n  const exportedElements = exportSelected ? getSelectedElements(elements, appState, {\n    includeBoundTextElement: true,\n    includeElementsInFrames: true\n  }) : elements;\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    if (!previewNode) {\n      return;\n    }\n    const maxWidth = previewNode.offsetWidth;\n    const maxHeight = previewNode.offsetHeight;\n    if (!maxWidth) {\n      return;\n    }\n    exportToCanvas({\n      elements: exportedElements,\n      appState,\n      files,\n      exportPadding: DEFAULT_EXPORT_PADDING,\n      maxWidthOrHeight: Math.max(maxWidth, maxHeight)\n    }).then(canvas => {\n      setRenderError(null);\n      // if converting to blob fails, there's some problem that will\n      // likely prevent preview and export (e.g. canvas too big)\n      return canvasToBlob(canvas).then(() => {\n        previewNode.replaceChildren(canvas);\n      });\n    }).catch(error => {\n      console.error(error);\n      setRenderError(error);\n    });\n  }, [appState, files, exportedElements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ImageExportModal\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t(\"imageExportDialog.header\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ImageExportModal__preview\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImageExportModal__preview__canvas\",\n        ref: previewRef,\n        children: renderError && /*#__PURE__*/_jsxDEV(ErrorCanvasPreview, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImageExportModal__preview__filename\",\n        children: !nativeFileSystemSupported && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"TextInput\",\n          value: projectName,\n          style: {\n            width: \"30ch\"\n          },\n          disabled: typeof appProps.name !== \"undefined\" || appState.viewModeEnabled,\n          onChange: event => {\n            setProjectName(event.target.value);\n            actionManager.executeAction(actionChangeProjectName, \"ui\", event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ImageExportModal__settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: t(\"imageExportDialog.header\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), someElementIsSelected && /*#__PURE__*/_jsxDEV(ExportSetting, {\n        label: t(\"imageExportDialog.label.onlySelected\"),\n        name: \"exportOnlySelected\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          name: \"exportOnlySelected\",\n          checked: exportSelected,\n          onChange: checked => {\n            setExportSelected(checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ExportSetting, {\n        label: t(\"imageExportDialog.label.withBackground\"),\n        name: \"exportBackgroundSwitch\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          name: \"exportBackgroundSwitch\",\n          checked: exportWithBackground,\n          onChange: checked => {\n            setExportWithBackground(checked);\n            actionManager.executeAction(actionChangeExportBackground, \"ui\", checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), supportsContextFilters && /*#__PURE__*/_jsxDEV(ExportSetting, {\n        label: t(\"imageExportDialog.label.darkMode\"),\n        name: \"exportDarkModeSwitch\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          name: \"exportDarkModeSwitch\",\n          checked: exportDarkMode,\n          onChange: checked => {\n            setExportDarkMode(checked);\n            actionManager.executeAction(actionExportWithDarkMode, \"ui\", checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ExportSetting, {\n        label: t(\"imageExportDialog.label.embedScene\"),\n        tooltip: t(\"imageExportDialog.tooltip.embedScene\"),\n        name: \"exportEmbedSwitch\",\n        children: /*#__PURE__*/_jsxDEV(Switch, {\n          name: \"exportEmbedSwitch\",\n          checked: embedScene,\n          onChange: checked => {\n            setEmbedScene(checked);\n            actionManager.executeAction(actionChangeExportEmbedScene, \"ui\", checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ExportSetting, {\n        label: t(\"imageExportDialog.label.scale\"),\n        name: \"exportScale\",\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          name: \"exportScale\",\n          value: exportScale,\n          onChange: scale => {\n            setExportScale(scale);\n            actionManager.executeAction(actionChangeExportScale, \"ui\", scale);\n          },\n          choices: EXPORT_SCALES.map(scale => ({\n            value: scale,\n            label: `${scale}\\u00d7`\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ImageExportModal__settings__buttons\",\n        children: [/*#__PURE__*/_jsxDEV(FilledButton, {\n          className: \"ImageExportModal__settings__buttons__button\",\n          label: t(\"imageExportDialog.title.exportToPng\"),\n          onClick: () => onExportImage(EXPORT_IMAGE_TYPES.png, exportedElements),\n          startIcon: downloadIcon,\n          children: t(\"imageExportDialog.button.exportToPng\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilledButton, {\n          className: \"ImageExportModal__settings__buttons__button\",\n          label: t(\"imageExportDialog.title.exportToSvg\"),\n          onClick: () => onExportImage(EXPORT_IMAGE_TYPES.svg, exportedElements),\n          startIcon: downloadIcon,\n          children: t(\"imageExportDialog.button.exportToSvg\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), (probablySupportsClipboardBlob || isFirefox) && /*#__PURE__*/_jsxDEV(FilledButton, {\n          className: \"ImageExportModal__settings__buttons__button\",\n          label: t(\"imageExportDialog.title.copyPngToClipboard\"),\n          onClick: () => onExportImage(EXPORT_IMAGE_TYPES.clipboard, exportedElements),\n          startIcon: copyIcon,\n          children: t(\"imageExportDialog.button.copyPngToClipboard\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\nconst ExportSetting = _ref2 => {\n  let {\n    label,\n    children,\n    tooltip,\n    name\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ImageExportModal__settings__setting\",\n    title: label,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      className: \"ImageExportModal__settings__setting__label\",\n      children: [label, tooltip && /*#__PURE__*/_jsxDEV(Tooltip, {\n        label: tooltip,\n        long: true,\n        children: helpIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ImageExportModal__settings__setting__content\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 294,\n    columnNumber: 5\n  }, this);\n};\nexport const ImageExportDialog = _ref3 => {\n  let {\n    elements,\n    appState,\n    files,\n    actionManager,\n    onExportImage,\n    onCloseRequest\n  } = _ref3;\n  if (appState.openDialog !== \"imageExport\") {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onCloseRequest: onCloseRequest,\n    size: \"wide\",\n    title: false,\n    children: /*#__PURE__*/_jsxDEV(ImageExportModal, {\n      elements: elements,\n      appState: appState,\n      files: files,\n      actionManager: actionManager,\n      onExportImage: onExportImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"names":["React","useEffect","useRef","useState","actionExportWithDarkMode","actionChangeExportBackground","actionChangeExportEmbedScene","actionChangeExportScale","actionChangeProjectName","probablySupportsClipboardBlob","DEFAULT_EXPORT_PADDING","EXPORT_IMAGE_TYPES","isFirefox","EXPORT_SCALES","canvasToBlob","nativeFileSystemSupported","t","getSelectedElements","isSomeElementSelected","exportToCanvas","copyIcon","downloadIcon","helpIcon","Dialog","RadioGroup","Switch","Tooltip","useAppProps","FilledButton","jsxDEV","_jsxDEV","supportsContextFilters","document","createElement","getContext","ErrorCanvasPreview","children","fileName","_jsxFileName","lineNumber","columnNumber","ImageExportModal","_ref","appState","elements","files","actionManager","onExportImage","appProps","projectName","setProjectName","name","someElementIsSelected","exportSelected","setExportSelected","exportWithBackground","setExportWithBackground","exportBackground","exportDarkMode","setExportDarkMode","exportWithDarkMode","embedScene","setEmbedScene","exportEmbedScene","exportScale","setExportScale","previewRef","renderError","setRenderError","exportedElements","includeBoundTextElement","includeElementsInFrames","previewNode","current","maxWidth","offsetWidth","maxHeight","offsetHeight","exportPadding","maxWidthOrHeight","Math","max","then","canvas","replaceChildren","catch","error","console","className","ref","type","value","style","width","disabled","viewModeEnabled","onChange","event","target","executeAction","ExportSetting","label","checked","tooltip","scale","choices","map","onClick","png","startIcon","svg","clipboard","_ref2","title","htmlFor","long","ImageExportDialog","_ref3","onCloseRequest","openDialog","size"],"sources":["D:/project/excalidraw-cn/src/components/ImageExportDialog.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nimport type { ActionManager } from \"../actions/manager\";\nimport type { AppClassProperties, BinaryFiles, UIAppState } from \"../types\";\n\nimport {\n  actionExportWithDarkMode,\n  actionChangeExportBackground,\n  actionChangeExportEmbedScene,\n  actionChangeExportScale,\n  actionChangeProjectName,\n} from \"../actions/actionExport\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport {\n  DEFAULT_EXPORT_PADDING,\n  EXPORT_IMAGE_TYPES,\n  isFirefox,\n  EXPORT_SCALES,\n} from \"../constants\";\n\nimport { canvasToBlob } from \"../data/blob\";\nimport { nativeFileSystemSupported } from \"../data/filesystem\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas } from \"../packages/utils\";\n\nimport { copyIcon, downloadIcon, helpIcon } from \"./icons\";\nimport { Dialog } from \"./Dialog\";\nimport { RadioGroup } from \"./RadioGroup\";\nimport { Switch } from \"./Switch\";\nimport { Tooltip } from \"./Tooltip\";\n\nimport \"./ImageExportDialog.scss\";\nimport { useAppProps } from \"./App\";\nimport { FilledButton } from \"./FilledButton\";\n\nconst supportsContextFilters =\n  \"filter\" in document.createElement(\"canvas\").getContext(\"2d\")!;\n\nexport const ErrorCanvasPreview = () => {\n  return (\n    <div>\n      <h3>{t(\"canvasError.cannotShowPreview\")}</h3>\n      <p>\n        <span>{t(\"canvasError.canvasTooBig\")}</span>\n      </p>\n      <em>({t(\"canvasError.canvasTooBigTip\")})</em>\n    </div>\n  );\n};\n\ntype ImageExportModalProps = {\n  appState: UIAppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  files: BinaryFiles;\n  actionManager: ActionManager;\n  onExportImage: AppClassProperties[\"onExportImage\"];\n};\n\nconst ImageExportModal = ({\n  appState,\n  elements,\n  files,\n  actionManager,\n  onExportImage,\n}: ImageExportModalProps) => {\n  const appProps = useAppProps();\n  const [projectName, setProjectName] = useState(appState.name);\n\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const [exportWithBackground, setExportWithBackground] = useState(\n    appState.exportBackground,\n  );\n  const [exportDarkMode, setExportDarkMode] = useState(\n    appState.exportWithDarkMode,\n  );\n  const [embedScene, setEmbedScene] = useState(appState.exportEmbedScene);\n  const [exportScale, setExportScale] = useState(appState.exportScale);\n\n  const previewRef = useRef<HTMLDivElement>(null);\n  const [renderError, setRenderError] = useState<Error | null>(null);\n\n  const exportedElements = exportSelected\n    ? getSelectedElements(elements, appState, {\n        includeBoundTextElement: true,\n        includeElementsInFrames: true,\n      })\n    : elements;\n\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    if (!previewNode) {\n      return;\n    }\n    const maxWidth = previewNode.offsetWidth;\n    const maxHeight = previewNode.offsetHeight;\n    if (!maxWidth) {\n      return;\n    }\n    exportToCanvas({\n      elements: exportedElements,\n      appState,\n      files,\n      exportPadding: DEFAULT_EXPORT_PADDING,\n      maxWidthOrHeight: Math.max(maxWidth, maxHeight),\n    })\n      .then((canvas) => {\n        setRenderError(null);\n        // if converting to blob fails, there's some problem that will\n        // likely prevent preview and export (e.g. canvas too big)\n        return canvasToBlob(canvas).then(() => {\n          previewNode.replaceChildren(canvas);\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        setRenderError(error);\n      });\n  }, [appState, files, exportedElements]);\n\n  return (\n    <div className=\"ImageExportModal\">\n      <h3>{t(\"imageExportDialog.header\")}</h3>\n      <div className=\"ImageExportModal__preview\">\n        <div className=\"ImageExportModal__preview__canvas\" ref={previewRef}>\n          {renderError && <ErrorCanvasPreview />}\n        </div>\n        <div className=\"ImageExportModal__preview__filename\">\n          {!nativeFileSystemSupported && (\n            <input\n              type=\"text\"\n              className=\"TextInput\"\n              value={projectName}\n              style={{ width: \"30ch\" }}\n              disabled={\n                typeof appProps.name !== \"undefined\" || appState.viewModeEnabled\n              }\n              onChange={(event) => {\n                setProjectName(event.target.value);\n                actionManager.executeAction(\n                  actionChangeProjectName,\n                  \"ui\",\n                  event.target.value,\n                );\n              }}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"ImageExportModal__settings\">\n        <h3>{t(\"imageExportDialog.header\")}</h3>\n        {someElementIsSelected && (\n          <ExportSetting\n            label={t(\"imageExportDialog.label.onlySelected\")}\n            name=\"exportOnlySelected\"\n          >\n            <Switch\n              name=\"exportOnlySelected\"\n              checked={exportSelected}\n              onChange={(checked) => {\n                setExportSelected(checked);\n              }}\n            />\n          </ExportSetting>\n        )}\n        <ExportSetting\n          label={t(\"imageExportDialog.label.withBackground\")}\n          name=\"exportBackgroundSwitch\"\n        >\n          <Switch\n            name=\"exportBackgroundSwitch\"\n            checked={exportWithBackground}\n            onChange={(checked) => {\n              setExportWithBackground(checked);\n              actionManager.executeAction(\n                actionChangeExportBackground,\n                \"ui\",\n                checked,\n              );\n            }}\n          />\n        </ExportSetting>\n        {supportsContextFilters && (\n          <ExportSetting\n            label={t(\"imageExportDialog.label.darkMode\")}\n            name=\"exportDarkModeSwitch\"\n          >\n            <Switch\n              name=\"exportDarkModeSwitch\"\n              checked={exportDarkMode}\n              onChange={(checked) => {\n                setExportDarkMode(checked);\n                actionManager.executeAction(\n                  actionExportWithDarkMode,\n                  \"ui\",\n                  checked,\n                );\n              }}\n            />\n          </ExportSetting>\n        )}\n        <ExportSetting\n          label={t(\"imageExportDialog.label.embedScene\")}\n          tooltip={t(\"imageExportDialog.tooltip.embedScene\")}\n          name=\"exportEmbedSwitch\"\n        >\n          <Switch\n            name=\"exportEmbedSwitch\"\n            checked={embedScene}\n            onChange={(checked) => {\n              setEmbedScene(checked);\n              actionManager.executeAction(\n                actionChangeExportEmbedScene,\n                \"ui\",\n                checked,\n              );\n            }}\n          />\n        </ExportSetting>\n        <ExportSetting\n          label={t(\"imageExportDialog.label.scale\")}\n          name=\"exportScale\"\n        >\n          <RadioGroup\n            name=\"exportScale\"\n            value={exportScale}\n            onChange={(scale) => {\n              setExportScale(scale);\n              actionManager.executeAction(actionChangeExportScale, \"ui\", scale);\n            }}\n            choices={EXPORT_SCALES.map((scale) => ({\n              value: scale,\n              label: `${scale}\\u00d7`,\n            }))}\n          />\n        </ExportSetting>\n\n        <div className=\"ImageExportModal__settings__buttons\">\n          <FilledButton\n            className=\"ImageExportModal__settings__buttons__button\"\n            label={t(\"imageExportDialog.title.exportToPng\")}\n            onClick={() =>\n              onExportImage(EXPORT_IMAGE_TYPES.png, exportedElements)\n            }\n            startIcon={downloadIcon}\n          >\n            {t(\"imageExportDialog.button.exportToPng\")}\n          </FilledButton>\n          <FilledButton\n            className=\"ImageExportModal__settings__buttons__button\"\n            label={t(\"imageExportDialog.title.exportToSvg\")}\n            onClick={() =>\n              onExportImage(EXPORT_IMAGE_TYPES.svg, exportedElements)\n            }\n            startIcon={downloadIcon}\n          >\n            {t(\"imageExportDialog.button.exportToSvg\")}\n          </FilledButton>\n          {(probablySupportsClipboardBlob || isFirefox) && (\n            <FilledButton\n              className=\"ImageExportModal__settings__buttons__button\"\n              label={t(\"imageExportDialog.title.copyPngToClipboard\")}\n              onClick={() =>\n                onExportImage(EXPORT_IMAGE_TYPES.clipboard, exportedElements)\n              }\n              startIcon={copyIcon}\n            >\n              {t(\"imageExportDialog.button.copyPngToClipboard\")}\n            </FilledButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype ExportSettingProps = {\n  label: string;\n  children: React.ReactNode;\n  tooltip?: string;\n  name?: string;\n};\n\nconst ExportSetting = ({\n  label,\n  children,\n  tooltip,\n  name,\n}: ExportSettingProps) => {\n  return (\n    <div className=\"ImageExportModal__settings__setting\" title={label}>\n      <label\n        htmlFor={name}\n        className=\"ImageExportModal__settings__setting__label\"\n      >\n        {label}\n        {tooltip && (\n          <Tooltip label={tooltip} long={true}>\n            {helpIcon}\n          </Tooltip>\n        )}\n      </label>\n      <div className=\"ImageExportModal__settings__setting__content\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport const ImageExportDialog = ({\n  elements,\n  appState,\n  files,\n  actionManager,\n  onExportImage,\n  onCloseRequest,\n}: {\n  appState: UIAppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  files: BinaryFiles;\n  actionManager: ActionManager;\n  onExportImage: AppClassProperties[\"onExportImage\"];\n  onCloseRequest: () => void;\n}) => {\n  if (appState.openDialog !== \"imageExport\") {\n    return null;\n  }\n\n  return (\n    <Dialog onCloseRequest={onCloseRequest} size=\"wide\" title={false}>\n      <ImageExportModal\n        elements={elements}\n        appState={appState}\n        files={files}\n        actionManager={actionManager}\n        onExportImage={onExportImage}\n      />\n    </Dialog>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}