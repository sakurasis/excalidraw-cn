{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /** @class */function () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n    this._breadcrumbs = [];\n    /** User */\n    this._user = {};\n    /** Tags */\n    this._tags = {};\n    /** Extra */\n    this._extra = {};\n    /** Contexts */\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d;\n    // often, this span will be a transaction, but it's not guaranteed to be\n    var span = this.getSpan();\n    // try it the new way first\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    }\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    }\n    // neither way found a transaction\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n    this._applyFingerprint(event);\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n    if (index === void 0) {\n      index = 0;\n    }\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this;\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n  return Scope;\n}();\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"names":["dateTimestampInSeconds","getGlobalObject","isPlainObject","isThenable","SyncPromise","Scope","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_user","_tags","_extra","_contexts","clone","scope","newScope","__spread","__assign","_level","_span","_session","_transactionName","_fingerprint","prototype","addScopeListener","callback","push","addEventProcessor","setUser","user","update","_notifyScopeListeners","getUser","setTags","tags","setTag","key","value","_a","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","level","setTransactionName","name","setTransaction","setContext","context","setSpan","span","getSpan","getTransaction","transaction","_b","_d","_c","spanRecorder","spans","undefined","setSession","session","getSession","captureContext","updatedScope","Object","keys","length","contexts","clear","addBreadcrumb","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","slice","clearBreadcrumbs","applyToEvent","event","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","index","_this","resolve","reject","processor","result","then","final","forEach","Array","isArray","concat","global","__SENTRY__","globalEventProcessors","addGlobalEventProcessor"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\hub\\src\\scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}