{"ast":null,"code":"import { MIN_ZOOM } from \"../constants\";\nexport const getNormalizedZoom = zoom => {\n  return Math.max(MIN_ZOOM, Math.min(zoom, 30));\n};\nexport const getStateForZoom = (_ref, appState) => {\n  let {\n    viewportX,\n    viewportY,\n    nextZoom\n  } = _ref;\n  const appLayerX = viewportX - appState.offsetLeft;\n  const appLayerY = viewportY - appState.offsetTop;\n  const currentZoom = appState.zoom.value;\n\n  // get original scroll position without zoom\n  const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);\n  const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);\n\n  // get scroll offsets for target zoom level\n  const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);\n  const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);\n  return {\n    scrollX: baseScrollX + zoomOffsetScrollX,\n    scrollY: baseScrollY + zoomOffsetScrollY,\n    zoom: {\n      value: nextZoom\n    }\n  };\n};","map":{"version":3,"names":["MIN_ZOOM","getNormalizedZoom","zoom","Math","max","min","getStateForZoom","_ref","appState","viewportX","viewportY","nextZoom","appLayerX","offsetLeft","appLayerY","offsetTop","currentZoom","value","baseScrollX","scrollX","baseScrollY","scrollY","zoomOffsetScrollX","zoomOffsetScrollY"],"sources":["D:/project/excalidraw-cn/src/scene/zoom.ts"],"sourcesContent":["import { MIN_ZOOM } from \"../constants\";\nimport { AppState, NormalizedZoomValue } from \"../types\";\n\nexport const getNormalizedZoom = (zoom: number): NormalizedZoomValue => {\n  return Math.max(MIN_ZOOM, Math.min(zoom, 30)) as NormalizedZoomValue;\n};\n\nexport const getStateForZoom = (\n  {\n    viewportX,\n    viewportY,\n    nextZoom,\n  }: {\n    viewportX: number;\n    viewportY: number;\n    nextZoom: NormalizedZoomValue;\n  },\n  appState: AppState,\n) => {\n  const appLayerX = viewportX - appState.offsetLeft;\n  const appLayerY = viewportY - appState.offsetTop;\n\n  const currentZoom = appState.zoom.value;\n\n  // get original scroll position without zoom\n  const baseScrollX = appState.scrollX + (appLayerX - appLayerX / currentZoom);\n  const baseScrollY = appState.scrollY + (appLayerY - appLayerY / currentZoom);\n\n  // get scroll offsets for target zoom level\n  const zoomOffsetScrollX = -(appLayerX - appLayerX / nextZoom);\n  const zoomOffsetScrollY = -(appLayerY - appLayerY / nextZoom);\n\n  return {\n    scrollX: baseScrollX + zoomOffsetScrollX,\n    scrollY: baseScrollY + zoomOffsetScrollY,\n    zoom: {\n      value: nextZoom,\n    },\n  };\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AAGvC,OAAO,MAAMC,iBAAiB,GAAIC,IAAY,IAA0B;EACtE,OAAOC,IAAI,CAACC,GAAG,CAACJ,QAAQ,EAAEG,IAAI,CAACE,GAAG,CAACH,IAAI,EAAE,EAAE,CAAC,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMI,eAAe,GAAGA,CAAAC,IAAA,EAU7BC,QAAkB,KACf;EAAA,IAVH;IACEC,SAAS;IACTC,SAAS;IACTC;EAKF,CAAC,GAAAJ,IAAA;EAGD,MAAMK,SAAS,GAAGH,SAAS,GAAGD,QAAQ,CAACK,UAAU;EACjD,MAAMC,SAAS,GAAGJ,SAAS,GAAGF,QAAQ,CAACO,SAAS;EAEhD,MAAMC,WAAW,GAAGR,QAAQ,CAACN,IAAI,CAACe,KAAK;;EAEvC;EACA,MAAMC,WAAW,GAAGV,QAAQ,CAACW,OAAO,IAAIP,SAAS,GAAGA,SAAS,GAAGI,WAAW,CAAC;EAC5E,MAAMI,WAAW,GAAGZ,QAAQ,CAACa,OAAO,IAAIP,SAAS,GAAGA,SAAS,GAAGE,WAAW,CAAC;;EAE5E;EACA,MAAMM,iBAAiB,GAAG,EAAEV,SAAS,GAAGA,SAAS,GAAGD,QAAQ,CAAC;EAC7D,MAAMY,iBAAiB,GAAG,EAAET,SAAS,GAAGA,SAAS,GAAGH,QAAQ,CAAC;EAE7D,OAAO;IACLQ,OAAO,EAAED,WAAW,GAAGI,iBAAiB;IACxCD,OAAO,EAAED,WAAW,GAAGG,iBAAiB;IACxCrB,IAAI,EAAE;MACJe,KAAK,EAAEN;IACT;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}