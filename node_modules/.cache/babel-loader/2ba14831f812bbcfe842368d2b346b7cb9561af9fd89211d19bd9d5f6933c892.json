{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\excalidraw-cn\\\\src\\\\excalidraw-app\\\\index.tsx\";\nimport polyfill from \"../polyfill\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ErrorDialog } from \"../components/ErrorDialog\";\nimport { TopErrorBoundary } from \"../components/TopErrorBoundary\";\nimport { APP_NAME, EVENT, THEME, TITLE_TIMEOUT, VERSION_TIMEOUT } from \"../constants\";\nimport { loadFromBlob } from \"../data/blob\";\nimport { useCallbackRefState } from \"../hooks/useCallbackRefState\";\nimport { t } from \"../i18n\";\nimport { Excalidraw, defaultLang, LiveCollaborationTrigger } from \"../packages/excalidraw/index\";\nimport { debounce, getVersion, getFrame, isTestEnv, preventUnload, resolvablePromise, isRunningInIframe } from \"../utils\";\nimport { FIREBASE_STORAGE_PREFIXES, STORAGE_KEYS, SYNC_BROWSER_TABS_TIMEOUT } from \"./app_constants\";\nimport Collab, { collabAPIAtom, collabDialogShownAtom, isCollaboratingAtom, isOfflineAtom } from \"./collab/Collab\";\nimport { exportToBackend, getCollaborationLinkData, isCollaborationLink, loadScene } from \"./data\";\nimport { getLibraryItemsFromStorage, importFromLocalStorage, importUsernameFromLocalStorage } from \"./data/localStorage\";\nimport CustomStats from \"./CustomStats\";\nimport { restore, restoreAppState } from \"../data/restore\";\nimport { ExportToExcalidrawPlus, exportToExcalidrawPlus } from \"./components/ExportToExcalidrawPlus\";\nimport { updateStaleImageStatuses } from \"./data/FileManager\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isInitializedImageElement } from \"../element/typeChecks\";\nimport { loadFilesFromFirebase } from \"./data/firebase\";\nimport { LocalData } from \"./data/LocalData\";\nimport { isBrowserStorageStateNewer } from \"./data/tabSync\";\nimport clsx from \"clsx\";\nimport { reconcileElements } from \"./collab/reconciliation\";\nimport { parseLibraryTokensFromUrl, useHandleLibrary } from \"../data/library\";\nimport { AppMainMenu } from \"./components/AppMainMenu\";\nimport { AppWelcomeScreen } from \"./components/AppWelcomeScreen\";\nimport { AppFooter } from \"./components/AppFooter\";\nimport { atom, Provider, useAtom, useAtomValue } from \"jotai\";\nimport { useAtomWithInitialValue } from \"../jotai\";\nimport { appJotaiStore } from \"./app-jotai\";\nimport \"./index.scss\";\nimport { ShareableLinkDialog } from \"../components/ShareableLinkDialog\";\nimport { openConfirmModal } from \"../components/OverwriteConfirm/OverwriteConfirmState\";\nimport { OverwriteConfirmDialog } from \"../components/OverwriteConfirm/OverwriteConfirm\";\nimport Trans from \"../components/Trans\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npolyfill();\nwindow.EXCALIDRAW_THROTTLE_RENDER = true;\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {}\n});\nconst shareableLinkConfirmDialog = {\n  title: t(\"overwriteConfirm.modal.shareableLink.title\"),\n  description: /*#__PURE__*/_jsxDEV(Trans, {\n    i18nKey: \"overwriteConfirm.modal.shareableLink.description\",\n    bold: text => /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 23\n    }, this),\n    br: () => /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this),\n  actionLabel: t(\"overwriteConfirm.modal.shareableLink.button\"),\n  color: \"danger\"\n};\nconst initializeScene = async opts => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const id = searchParams.get(\"id\");\n  const jsonBackendMatch = window.location.hash.match(/^#json=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/);\n  const externalUrlMatch = window.location.hash.match(/^#url=(.*)$/);\n  const localDataState = importFromLocalStorage();\n  let scene = await loadScene(null, null, localDataState);\n  let roomLinkData = getCollaborationLinkData(window.location.href);\n  const isExternalScene = !!(id || jsonBackendMatch || roomLinkData);\n  if (isExternalScene) {\n    if (\n    // don't prompt if scene is empty\n    !scene.elements.length ||\n    // don't prompt for collab scenes because we don't override local storage\n    roomLinkData || (\n    // otherwise, prompt whether user wants to override current scene\n    await openConfirmModal(shareableLinkConfirmDialog))) {\n      if (jsonBackendMatch) {\n        scene = await loadScene(jsonBackendMatch[1], jsonBackendMatch[2], localDataState);\n      }\n      scene.scrollToContent = true;\n      if (!roomLinkData) {\n        window.history.replaceState({}, APP_NAME, window.location.origin);\n      }\n    } else {\n      // https://github.com/excalidraw/excalidraw/issues/1919\n      if (document.hidden) {\n        return new Promise((resolve, reject) => {\n          window.addEventListener(\"focus\", () => initializeScene(opts).then(resolve).catch(reject), {\n            once: true\n          });\n        });\n      }\n      roomLinkData = null;\n      window.history.replaceState({}, APP_NAME, window.location.origin);\n    }\n  } else if (externalUrlMatch) {\n    window.history.replaceState({}, APP_NAME, window.location.origin);\n    const url = externalUrlMatch[1];\n    try {\n      const request = await fetch(window.decodeURIComponent(url));\n      const data = await loadFromBlob(await request.blob(), null, null);\n      if (!scene.elements.length || (await openConfirmModal(shareableLinkConfirmDialog))) {\n        return {\n          scene: data,\n          isExternalScene\n        };\n      }\n    } catch (error) {\n      return {\n        scene: {\n          appState: {\n            errorMessage: t(\"alerts.invalidSceneUrl\")\n          }\n        },\n        isExternalScene\n      };\n    }\n  }\n  if (roomLinkData && opts.collabAPI) {\n    var _localDataState$appSt, _scene$appState;\n    const {\n      excalidrawAPI\n    } = opts;\n    const scene = await opts.collabAPI.startCollaboration(roomLinkData);\n    return {\n      // when collaborating, the state may have already been updated at this\n      // point (we may have received updates from other clients), so reconcile\n      // elements and appState with existing state\n      scene: {\n        ...scene,\n        appState: {\n          ...restoreAppState({\n            ...(scene === null || scene === void 0 ? void 0 : scene.appState),\n            theme: (localDataState === null || localDataState === void 0 ? void 0 : (_localDataState$appSt = localDataState.appState) === null || _localDataState$appSt === void 0 ? void 0 : _localDataState$appSt.theme) || (scene === null || scene === void 0 ? void 0 : (_scene$appState = scene.appState) === null || _scene$appState === void 0 ? void 0 : _scene$appState.theme)\n          }, excalidrawAPI.getAppState()),\n          // necessary if we're invoking from a hashchange handler which doesn't\n          // go through App.initializeScene() that resets this flag\n          isLoading: false\n        },\n        elements: reconcileElements((scene === null || scene === void 0 ? void 0 : scene.elements) || [], excalidrawAPI.getSceneElementsIncludingDeleted(), excalidrawAPI.getAppState())\n      },\n      isExternalScene: true,\n      id: roomLinkData.roomId,\n      key: roomLinkData.roomKey\n    };\n  } else if (scene) {\n    return isExternalScene && jsonBackendMatch ? {\n      scene,\n      isExternalScene,\n      id: jsonBackendMatch[1],\n      key: jsonBackendMatch[2]\n    } : {\n      scene,\n      isExternalScene: false\n    };\n  }\n  return {\n    scene: null,\n    isExternalScene: false\n  };\n};\nconst detectedLangCode = languageDetector.detect() || defaultLang.code;\nexport const appLangCodeAtom = atom(Array.isArray(detectedLangCode) ? detectedLangCode[0] : detectedLangCode);\nconst ExcalidrawWrapper = () => {\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [langCode, setLangCode] = useAtom(appLangCodeAtom);\n  const isCollabDisabled = isRunningInIframe();\n\n  // initial state\n  // ---------------------------------------------------------------------------\n\n  const initialStatePromiseRef = useRef({\n    promise: null\n  });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n  useEffect(() => {\n    trackEvent(\"load\", \"frame\", getFrame());\n    // Delayed so that the app has a time to load the latest SW\n    setTimeout(() => {\n      trackEvent(\"load\", \"version\", getVersion());\n    }, VERSION_TIMEOUT);\n  }, []);\n  const [excalidrawAPI, excalidrawRefCallback] = useCallbackRefState();\n  const [collabAPI] = useAtom(collabAPIAtom);\n  const [, setCollabDialogShown] = useAtom(collabDialogShownAtom);\n  const [isCollaborating] = useAtomWithInitialValue(isCollaboratingAtom, () => {\n    return isCollaborationLink(window.location.href);\n  });\n  useHandleLibrary({\n    excalidrawAPI,\n    getInitialLibraryItems: getLibraryItemsFromStorage\n  });\n  useEffect(() => {\n    if (!excalidrawAPI || !isCollabDisabled && !collabAPI) {\n      return;\n    }\n    const loadImages = function (data) {\n      let isInitialLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!data.scene) {\n        return;\n      }\n      if (collabAPI !== null && collabAPI !== void 0 && collabAPI.isCollaborating()) {\n        if (data.scene.elements) {\n          collabAPI.fetchImageFilesFromFirebase({\n            elements: data.scene.elements,\n            forceFetchFiles: true\n          }).then(_ref => {\n            let {\n              loadedFiles,\n              erroredFiles\n            } = _ref;\n            excalidrawAPI.addFiles(loadedFiles);\n            updateStaleImageStatuses({\n              excalidrawAPI,\n              erroredFiles,\n              elements: excalidrawAPI.getSceneElementsIncludingDeleted()\n            });\n          });\n        }\n      } else {\n        var _data$scene$elements;\n        const fileIds = ((_data$scene$elements = data.scene.elements) === null || _data$scene$elements === void 0 ? void 0 : _data$scene$elements.reduce((acc, element) => {\n          if (isInitializedImageElement(element)) {\n            return acc.concat(element.fileId);\n          }\n          return acc;\n        }, [])) || [];\n        if (data.isExternalScene) {\n          loadFilesFromFirebase(`${FIREBASE_STORAGE_PREFIXES.shareLinkFiles}/${data.id}`, data.key, fileIds).then(_ref2 => {\n            let {\n              loadedFiles,\n              erroredFiles\n            } = _ref2;\n            excalidrawAPI.addFiles(loadedFiles);\n            updateStaleImageStatuses({\n              excalidrawAPI,\n              erroredFiles,\n              elements: excalidrawAPI.getSceneElementsIncludingDeleted()\n            });\n          });\n        } else if (isInitialLoad) {\n          if (fileIds.length) {\n            LocalData.fileStorage.getFiles(fileIds).then(_ref3 => {\n              let {\n                loadedFiles,\n                erroredFiles\n              } = _ref3;\n              if (loadedFiles.length) {\n                excalidrawAPI.addFiles(loadedFiles);\n              }\n              updateStaleImageStatuses({\n                excalidrawAPI,\n                erroredFiles,\n                elements: excalidrawAPI.getSceneElementsIncludingDeleted()\n              });\n            });\n          }\n          // on fresh load, clear unused files from IDB (from previous\n          // session)\n          LocalData.fileStorage.clearObsoleteFiles({\n            currentFileIds: fileIds\n          });\n        }\n      }\n    };\n    initializeScene({\n      collabAPI,\n      excalidrawAPI\n    }).then(async data => {\n      loadImages(data, /* isInitialLoad */true);\n      initialStatePromiseRef.current.promise.resolve(data.scene);\n    });\n    const onHashChange = async event => {\n      event.preventDefault();\n      const libraryUrlTokens = parseLibraryTokensFromUrl();\n      if (!libraryUrlTokens) {\n        if (collabAPI !== null && collabAPI !== void 0 && collabAPI.isCollaborating() && !isCollaborationLink(window.location.href)) {\n          collabAPI.stopCollaboration(false);\n        }\n        excalidrawAPI.updateScene({\n          appState: {\n            isLoading: true\n          }\n        });\n        initializeScene({\n          collabAPI,\n          excalidrawAPI\n        }).then(data => {\n          loadImages(data);\n          if (data.scene) {\n            excalidrawAPI.updateScene({\n              ...data.scene,\n              ...restore(data.scene, null, null, {\n                repairBindings: true\n              }),\n              commitToHistory: true\n            });\n          }\n        });\n      }\n    };\n    const titleTimeout = setTimeout(() => document.title = APP_NAME, TITLE_TIMEOUT);\n    const syncData = debounce(() => {\n      if (isTestEnv()) {\n        return;\n      }\n      if (!document.hidden && (collabAPI && !collabAPI.isCollaborating() || isCollabDisabled)) {\n        // don't sync if local state is newer or identical to browser state\n        if (isBrowserStorageStateNewer(STORAGE_KEYS.VERSION_DATA_STATE)) {\n          const localDataState = importFromLocalStorage();\n          const username = importUsernameFromLocalStorage();\n          let langCode = languageDetector.detect() || defaultLang.code;\n          if (Array.isArray(langCode)) {\n            langCode = langCode[0];\n          }\n          setLangCode(langCode);\n          excalidrawAPI.updateScene({\n            ...localDataState\n          });\n          excalidrawAPI.updateLibrary({\n            libraryItems: getLibraryItemsFromStorage()\n          });\n          collabAPI === null || collabAPI === void 0 ? void 0 : collabAPI.setUsername(username || \"\");\n        }\n        if (isBrowserStorageStateNewer(STORAGE_KEYS.VERSION_FILES)) {\n          const elements = excalidrawAPI.getSceneElementsIncludingDeleted();\n          const currFiles = excalidrawAPI.getFiles();\n          const fileIds = (elements === null || elements === void 0 ? void 0 : elements.reduce((acc, element) => {\n            if (isInitializedImageElement(element) &&\n            // only load and update images that aren't already loaded\n            !currFiles[element.fileId]) {\n              return acc.concat(element.fileId);\n            }\n            return acc;\n          }, [])) || [];\n          if (fileIds.length) {\n            LocalData.fileStorage.getFiles(fileIds).then(_ref4 => {\n              let {\n                loadedFiles,\n                erroredFiles\n              } = _ref4;\n              if (loadedFiles.length) {\n                excalidrawAPI.addFiles(loadedFiles);\n              }\n              updateStaleImageStatuses({\n                excalidrawAPI,\n                erroredFiles,\n                elements: excalidrawAPI.getSceneElementsIncludingDeleted()\n              });\n            });\n          }\n        }\n      }\n    }, SYNC_BROWSER_TABS_TIMEOUT);\n    const onUnload = () => {\n      LocalData.flushSave();\n    };\n    const visibilityChange = event => {\n      if (event.type === EVENT.BLUR || document.hidden) {\n        LocalData.flushSave();\n      }\n      if (event.type === EVENT.VISIBILITY_CHANGE || event.type === EVENT.FOCUS) {\n        syncData();\n      }\n    };\n    window.addEventListener(EVENT.HASHCHANGE, onHashChange, false);\n    window.addEventListener(EVENT.UNLOAD, onUnload, false);\n    window.addEventListener(EVENT.BLUR, visibilityChange, false);\n    document.addEventListener(EVENT.VISIBILITY_CHANGE, visibilityChange, false);\n    window.addEventListener(EVENT.FOCUS, visibilityChange, false);\n    return () => {\n      window.removeEventListener(EVENT.HASHCHANGE, onHashChange, false);\n      window.removeEventListener(EVENT.UNLOAD, onUnload, false);\n      window.removeEventListener(EVENT.BLUR, visibilityChange, false);\n      window.removeEventListener(EVENT.FOCUS, visibilityChange, false);\n      document.removeEventListener(EVENT.VISIBILITY_CHANGE, visibilityChange, false);\n      clearTimeout(titleTimeout);\n    };\n  }, [isCollabDisabled, collabAPI, excalidrawAPI, setLangCode]);\n  useEffect(() => {\n    const unloadHandler = event => {\n      LocalData.flushSave();\n      if (excalidrawAPI && LocalData.fileStorage.shouldPreventUnload(excalidrawAPI.getSceneElements())) {\n        preventUnload(event);\n      }\n    };\n    window.addEventListener(EVENT.BEFORE_UNLOAD, unloadHandler);\n    return () => {\n      window.removeEventListener(EVENT.BEFORE_UNLOAD, unloadHandler);\n    };\n  }, [excalidrawAPI]);\n  useEffect(() => {\n    languageDetector.cacheUserLanguage(langCode);\n  }, [langCode]);\n  const [theme, setTheme] = useState(() => {\n    var _importFromLocalStora;\n    return localStorage.getItem(STORAGE_KEYS.LOCAL_STORAGE_THEME) || ( // FIXME migration from old LS scheme. Can be removed later. #5660\n    (_importFromLocalStora = importFromLocalStorage().appState) === null || _importFromLocalStora === void 0 ? void 0 : _importFromLocalStora.theme) || THEME.LIGHT;\n  });\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEYS.LOCAL_STORAGE_THEME, theme);\n    // currently only used for body styling during init (see public/index.html),\n    // but may change in the future\n    document.documentElement.classList.toggle(\"dark\", theme === THEME.DARK);\n  }, [theme]);\n  const onChange = (elements, appState, files) => {\n    if (collabAPI !== null && collabAPI !== void 0 && collabAPI.isCollaborating()) {\n      collabAPI.syncElements(elements);\n    }\n    setTheme(appState.theme);\n\n    // this check is redundant, but since this is a hot path, it's best\n    // not to evaludate the nested expression every time\n    if (!LocalData.isSavePaused()) {\n      LocalData.save(elements, appState, files, () => {\n        if (excalidrawAPI) {\n          let didChange = false;\n          const elements = excalidrawAPI.getSceneElementsIncludingDeleted().map(element => {\n            if (LocalData.fileStorage.shouldUpdateImageElementStatus(element)) {\n              const newElement = newElementWith(element, {\n                status: \"saved\"\n              });\n              if (newElement !== element) {\n                didChange = true;\n              }\n              return newElement;\n            }\n            return element;\n          });\n          if (didChange) {\n            excalidrawAPI.updateScene({\n              elements\n            });\n          }\n        }\n      });\n    }\n  };\n  const [latestShareableLink, setLatestShareableLink] = useState(null);\n  const onExportToBackend = async (exportedElements, appState, files, canvas) => {\n    if (exportedElements.length === 0) {\n      return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n    }\n    if (canvas) {\n      try {\n        const {\n          url,\n          errorMessage\n        } = await exportToBackend(exportedElements, {\n          ...appState,\n          viewBackgroundColor: appState.exportBackground ? appState.viewBackgroundColor : getDefaultAppState().viewBackgroundColor\n        }, files);\n        if (errorMessage) {\n          setErrorMessage(errorMessage);\n        }\n        if (url) {\n          setLatestShareableLink(url);\n        }\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          const {\n            width,\n            height\n          } = canvas;\n          console.error(error, {\n            width,\n            height\n          });\n          setErrorMessage(error.message);\n        }\n      }\n    }\n  };\n  const renderCustomStats = (elements, appState) => {\n    return /*#__PURE__*/_jsxDEV(CustomStats, {\n      setToast: message => excalidrawAPI.setToast({\n        message\n      }),\n      appState: appState,\n      elements: elements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 625,\n      columnNumber: 7\n    }, this);\n  };\n  const onLibraryChange = async items => {\n    if (!items.length) {\n      localStorage.removeItem(STORAGE_KEYS.LOCAL_STORAGE_LIBRARY);\n      return;\n    }\n    const serializedItems = JSON.stringify(items);\n    localStorage.setItem(STORAGE_KEYS.LOCAL_STORAGE_LIBRARY, serializedItems);\n  };\n  const isOffline = useAtomValue(isOfflineAtom);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    className: clsx(\"excalidraw-app\", {\n      \"is-collaborating\": isCollaborating\n    }),\n    children: /*#__PURE__*/_jsxDEV(Excalidraw, {\n      ref: excalidrawRefCallback,\n      onChange: onChange,\n      initialData: initialStatePromiseRef.current.promise,\n      isCollaborating: isCollaborating,\n      onPointerUpdate: collabAPI === null || collabAPI === void 0 ? void 0 : collabAPI.onPointerUpdate,\n      UIOptions: {\n        canvasActions: {\n          toggleTheme: true,\n          export: {\n            onExportToBackend,\n            renderCustomUI: (elements, appState, files) => {\n              return /*#__PURE__*/_jsxDEV(ExportToExcalidrawPlus, {\n                elements: elements,\n                appState: appState,\n                files: files,\n                onError: error => {\n                  excalidrawAPI === null || excalidrawAPI === void 0 ? void 0 : excalidrawAPI.updateScene({\n                    appState: {\n                      errorMessage: error.message\n                    }\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 664,\n                columnNumber: 19\n              }, this);\n            }\n          }\n        }\n      },\n      langCode: langCode,\n      renderCustomStats: renderCustomStats,\n      detectScroll: false,\n      handleKeyboardGlobally: true,\n      onLibraryChange: onLibraryChange,\n      autoFocus: true,\n      theme: theme,\n      renderTopRightUI: isMobile => {\n        if (isMobile || !collabAPI || isCollabDisabled) {\n          return null;\n        }\n        return /*#__PURE__*/_jsxDEV(LiveCollaborationTrigger, {\n          isCollaborating: isCollaborating,\n          onSelect: () => setCollabDialogShown(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 13\n        }, this);\n      },\n      children: [/*#__PURE__*/_jsxDEV(AppMainMenu, {\n        setCollabDialogShown: setCollabDialogShown,\n        isCollaborating: isCollaborating,\n        isCollabEnabled: !isCollabDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppWelcomeScreen, {\n        setCollabDialogShown: setCollabDialogShown,\n        isCollabEnabled: !isCollabDisabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OverwriteConfirmDialog, {\n        children: [/*#__PURE__*/_jsxDEV(OverwriteConfirmDialog.Actions.ExportToImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OverwriteConfirmDialog.Actions.SaveToDisk, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this), excalidrawAPI && /*#__PURE__*/_jsxDEV(OverwriteConfirmDialog.Action, {\n          title: t(\"overwriteConfirm.action.excalidrawPlus.title\"),\n          actionLabel: t(\"overwriteConfirm.action.excalidrawPlus.button\"),\n          onClick: () => {\n            exportToExcalidrawPlus(excalidrawAPI.getSceneElements(), excalidrawAPI.getAppState(), excalidrawAPI.getFiles());\n          },\n          children: t(\"overwriteConfirm.action.excalidrawPlus.description\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AppFooter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 9\n      }, this), isCollaborating && isOffline && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"collab-offline-warning\",\n        children: t(\"alerts.collabOfflineWarning\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 11\n      }, this), latestShareableLink && /*#__PURE__*/_jsxDEV(ShareableLinkDialog, {\n        link: latestShareableLink,\n        onCloseRequest: () => setLatestShareableLink(null),\n        setErrorMessage: setErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 11\n      }, this), excalidrawAPI && !isCollabDisabled && /*#__PURE__*/_jsxDEV(Collab, {\n        excalidrawAPI: excalidrawAPI\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorDialog, {\n        onClose: () => setErrorMessage(\"\"),\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 651,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 645,\n    columnNumber: 5\n  }, this);\n};\nconst ExcalidrawApp = () => {\n  return /*#__PURE__*/_jsxDEV(TopErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(Provider, {\n      unstable_createStore: () => appJotaiStore,\n      children: /*#__PURE__*/_jsxDEV(ExcalidrawWrapper, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 756,\n    columnNumber: 5\n  }, this);\n};\nexport default ExcalidrawApp;","map":{"version":3,"names":["polyfill","LanguageDetector","useEffect","useRef","useState","trackEvent","getDefaultAppState","ErrorDialog","TopErrorBoundary","APP_NAME","EVENT","THEME","TITLE_TIMEOUT","VERSION_TIMEOUT","loadFromBlob","useCallbackRefState","t","Excalidraw","defaultLang","LiveCollaborationTrigger","debounce","getVersion","getFrame","isTestEnv","preventUnload","resolvablePromise","isRunningInIframe","FIREBASE_STORAGE_PREFIXES","STORAGE_KEYS","SYNC_BROWSER_TABS_TIMEOUT","Collab","collabAPIAtom","collabDialogShownAtom","isCollaboratingAtom","isOfflineAtom","exportToBackend","getCollaborationLinkData","isCollaborationLink","loadScene","getLibraryItemsFromStorage","importFromLocalStorage","importUsernameFromLocalStorage","CustomStats","restore","restoreAppState","ExportToExcalidrawPlus","exportToExcalidrawPlus","updateStaleImageStatuses","newElementWith","isInitializedImageElement","loadFilesFromFirebase","LocalData","isBrowserStorageStateNewer","clsx","reconcileElements","parseLibraryTokensFromUrl","useHandleLibrary","AppMainMenu","AppWelcomeScreen","AppFooter","atom","Provider","useAtom","useAtomValue","useAtomWithInitialValue","appJotaiStore","ShareableLinkDialog","openConfirmModal","OverwriteConfirmDialog","Trans","jsxDEV","_jsxDEV","window","EXCALIDRAW_THROTTLE_RENDER","languageDetector","init","languageUtils","shareableLinkConfirmDialog","title","description","i18nKey","bold","text","children","fileName","_jsxFileName","lineNumber","columnNumber","br","actionLabel","color","initializeScene","opts","searchParams","URLSearchParams","location","search","id","get","jsonBackendMatch","hash","match","externalUrlMatch","localDataState","scene","roomLinkData","href","isExternalScene","elements","length","scrollToContent","history","replaceState","origin","document","hidden","Promise","resolve","reject","addEventListener","then","catch","once","url","request","fetch","decodeURIComponent","data","blob","error","appState","errorMessage","collabAPI","_localDataState$appSt","_scene$appState","excalidrawAPI","startCollaboration","theme","getAppState","isLoading","getSceneElementsIncludingDeleted","roomId","key","roomKey","detectedLangCode","detect","code","appLangCodeAtom","Array","isArray","ExcalidrawWrapper","setErrorMessage","langCode","setLangCode","isCollabDisabled","initialStatePromiseRef","promise","current","setTimeout","excalidrawRefCallback","setCollabDialogShown","isCollaborating","getInitialLibraryItems","loadImages","isInitialLoad","arguments","undefined","fetchImageFilesFromFirebase","forceFetchFiles","_ref","loadedFiles","erroredFiles","addFiles","_data$scene$elements","fileIds","reduce","acc","element","concat","fileId","shareLinkFiles","_ref2","fileStorage","getFiles","_ref3","clearObsoleteFiles","currentFileIds","onHashChange","event","preventDefault","libraryUrlTokens","stopCollaboration","updateScene","repairBindings","commitToHistory","titleTimeout","syncData","VERSION_DATA_STATE","username","updateLibrary","libraryItems","setUsername","VERSION_FILES","currFiles","_ref4","onUnload","flushSave","visibilityChange","type","BLUR","VISIBILITY_CHANGE","FOCUS","HASHCHANGE","UNLOAD","removeEventListener","clearTimeout","unloadHandler","shouldPreventUnload","getSceneElements","BEFORE_UNLOAD","cacheUserLanguage","setTheme","_importFromLocalStora","localStorage","getItem","LOCAL_STORAGE_THEME","LIGHT","setItem","documentElement","classList","toggle","DARK","onChange","files","syncElements","isSavePaused","save","didChange","map","shouldUpdateImageElementStatus","newElement","status","latestShareableLink","setLatestShareableLink","onExportToBackend","exportedElements","canvas","alert","viewBackgroundColor","exportBackground","name","width","height","console","message","renderCustomStats","setToast","onLibraryChange","items","removeItem","LOCAL_STORAGE_LIBRARY","serializedItems","JSON","stringify","isOffline","style","className","ref","initialData","onPointerUpdate","UIOptions","canvasActions","toggleTheme","export","renderCustomUI","onError","detectScroll","handleKeyboardGlobally","autoFocus","renderTopRightUI","isMobile","onSelect","isCollabEnabled","Actions","ExportToImage","SaveToDisk","Action","onClick","link","onCloseRequest","onClose","ExcalidrawApp","unstable_createStore"],"sources":["D:/project/excalidraw-cn/src/excalidraw-app/index.tsx"],"sourcesContent":["import polyfill from \"../polyfill\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ErrorDialog } from \"../components/ErrorDialog\";\nimport { TopErrorBoundary } from \"../components/TopErrorBoundary\";\nimport {\n  APP_NAME,\n  EVENT,\n  THEME,\n  TITLE_TIMEOUT,\n  VERSION_TIMEOUT,\n} from \"../constants\";\nimport { loadFromBlob } from \"../data/blob\";\nimport {\n  ExcalidrawElement,\n  FileId,\n  NonDeletedExcalidrawElement,\n  Theme,\n} from \"../element/types\";\nimport { useCallbackRefState } from \"../hooks/useCallbackRefState\";\nimport { t } from \"../i18n\";\nimport {\n  Excalidraw,\n  defaultLang,\n  LiveCollaborationTrigger,\n} from \"../packages/excalidraw/index\";\nimport {\n  AppState,\n  LibraryItems,\n  ExcalidrawImperativeAPI,\n  BinaryFiles,\n  ExcalidrawInitialDataState,\n  UIAppState,\n} from \"../types\";\nimport {\n  debounce,\n  getVersion,\n  getFrame,\n  isTestEnv,\n  preventUnload,\n  ResolvablePromise,\n  resolvablePromise,\n  isRunningInIframe,\n} from \"../utils\";\nimport {\n  FIREBASE_STORAGE_PREFIXES,\n  STORAGE_KEYS,\n  SYNC_BROWSER_TABS_TIMEOUT,\n} from \"./app_constants\";\nimport Collab, {\n  CollabAPI,\n  collabAPIAtom,\n  collabDialogShownAtom,\n  isCollaboratingAtom,\n  isOfflineAtom,\n} from \"./collab/Collab\";\nimport {\n  exportToBackend,\n  getCollaborationLinkData,\n  isCollaborationLink,\n  loadScene,\n} from \"./data\";\nimport {\n  getLibraryItemsFromStorage,\n  importFromLocalStorage,\n  importUsernameFromLocalStorage,\n} from \"./data/localStorage\";\nimport CustomStats from \"./CustomStats\";\nimport { restore, restoreAppState, RestoredDataState } from \"../data/restore\";\nimport {\n  ExportToExcalidrawPlus,\n  exportToExcalidrawPlus,\n} from \"./components/ExportToExcalidrawPlus\";\nimport { updateStaleImageStatuses } from \"./data/FileManager\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isInitializedImageElement } from \"../element/typeChecks\";\nimport { loadFilesFromFirebase } from \"./data/firebase\";\nimport { LocalData } from \"./data/LocalData\";\nimport { isBrowserStorageStateNewer } from \"./data/tabSync\";\nimport clsx from \"clsx\";\nimport { reconcileElements } from \"./collab/reconciliation\";\nimport { parseLibraryTokensFromUrl, useHandleLibrary } from \"../data/library\";\nimport { AppMainMenu } from \"./components/AppMainMenu\";\nimport { AppWelcomeScreen } from \"./components/AppWelcomeScreen\";\nimport { AppFooter } from \"./components/AppFooter\";\nimport { atom, Provider, useAtom, useAtomValue } from \"jotai\";\nimport { useAtomWithInitialValue } from \"../jotai\";\nimport { appJotaiStore } from \"./app-jotai\";\n\nimport \"./index.scss\";\nimport { ResolutionType } from \"../utility-types\";\nimport { ShareableLinkDialog } from \"../components/ShareableLinkDialog\";\nimport { openConfirmModal } from \"../components/OverwriteConfirm/OverwriteConfirmState\";\nimport { OverwriteConfirmDialog } from \"../components/OverwriteConfirm/OverwriteConfirm\";\nimport Trans from \"../components/Trans\";\n\npolyfill();\n\nwindow.EXCALIDRAW_THROTTLE_RENDER = true;\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {},\n});\n\nconst shareableLinkConfirmDialog = {\n  title: t(\"overwriteConfirm.modal.shareableLink.title\"),\n  description: (\n    <Trans\n      i18nKey=\"overwriteConfirm.modal.shareableLink.description\"\n      bold={(text) => <strong>{text}</strong>}\n      br={() => <br />}\n    />\n  ),\n  actionLabel: t(\"overwriteConfirm.modal.shareableLink.button\"),\n  color: \"danger\",\n} as const;\n\nconst initializeScene = async (opts: {\n  collabAPI: CollabAPI | null;\n  excalidrawAPI: ExcalidrawImperativeAPI;\n}): Promise<\n  { scene: ExcalidrawInitialDataState | null } & (\n    | { isExternalScene: true; id: string; key: string }\n    | { isExternalScene: false; id?: null; key?: null }\n  )\n> => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const id = searchParams.get(\"id\");\n  const jsonBackendMatch = window.location.hash.match(\n    /^#json=([a-zA-Z0-9_-]+),([a-zA-Z0-9_-]+)$/,\n  );\n  const externalUrlMatch = window.location.hash.match(/^#url=(.*)$/);\n\n  const localDataState = importFromLocalStorage();\n\n  let scene: RestoredDataState & {\n    scrollToContent?: boolean;\n  } = await loadScene(null, null, localDataState);\n\n  let roomLinkData = getCollaborationLinkData(window.location.href);\n  const isExternalScene = !!(id || jsonBackendMatch || roomLinkData);\n  if (isExternalScene) {\n    if (\n      // don't prompt if scene is empty\n      !scene.elements.length ||\n      // don't prompt for collab scenes because we don't override local storage\n      roomLinkData ||\n      // otherwise, prompt whether user wants to override current scene\n      (await openConfirmModal(shareableLinkConfirmDialog))\n    ) {\n      if (jsonBackendMatch) {\n        scene = await loadScene(\n          jsonBackendMatch[1],\n          jsonBackendMatch[2],\n          localDataState,\n        );\n      }\n      scene.scrollToContent = true;\n      if (!roomLinkData) {\n        window.history.replaceState({}, APP_NAME, window.location.origin);\n      }\n    } else {\n      // https://github.com/excalidraw/excalidraw/issues/1919\n      if (document.hidden) {\n        return new Promise((resolve, reject) => {\n          window.addEventListener(\n            \"focus\",\n            () => initializeScene(opts).then(resolve).catch(reject),\n            {\n              once: true,\n            },\n          );\n        });\n      }\n\n      roomLinkData = null;\n      window.history.replaceState({}, APP_NAME, window.location.origin);\n    }\n  } else if (externalUrlMatch) {\n    window.history.replaceState({}, APP_NAME, window.location.origin);\n\n    const url = externalUrlMatch[1];\n    try {\n      const request = await fetch(window.decodeURIComponent(url));\n      const data = await loadFromBlob(await request.blob(), null, null);\n      if (\n        !scene.elements.length ||\n        (await openConfirmModal(shareableLinkConfirmDialog))\n      ) {\n        return { scene: data, isExternalScene };\n      }\n    } catch (error: any) {\n      return {\n        scene: {\n          appState: {\n            errorMessage: t(\"alerts.invalidSceneUrl\"),\n          },\n        },\n        isExternalScene,\n      };\n    }\n  }\n\n  if (roomLinkData && opts.collabAPI) {\n    const { excalidrawAPI } = opts;\n\n    const scene = await opts.collabAPI.startCollaboration(roomLinkData);\n\n    return {\n      // when collaborating, the state may have already been updated at this\n      // point (we may have received updates from other clients), so reconcile\n      // elements and appState with existing state\n      scene: {\n        ...scene,\n        appState: {\n          ...restoreAppState(\n            {\n              ...scene?.appState,\n              theme: localDataState?.appState?.theme || scene?.appState?.theme,\n            },\n            excalidrawAPI.getAppState(),\n          ),\n          // necessary if we're invoking from a hashchange handler which doesn't\n          // go through App.initializeScene() that resets this flag\n          isLoading: false,\n        },\n        elements: reconcileElements(\n          scene?.elements || [],\n          excalidrawAPI.getSceneElementsIncludingDeleted(),\n          excalidrawAPI.getAppState(),\n        ),\n      },\n      isExternalScene: true,\n      id: roomLinkData.roomId,\n      key: roomLinkData.roomKey,\n    };\n  } else if (scene) {\n    return isExternalScene && jsonBackendMatch\n      ? {\n          scene,\n          isExternalScene,\n          id: jsonBackendMatch[1],\n          key: jsonBackendMatch[2],\n        }\n      : { scene, isExternalScene: false };\n  }\n  return { scene: null, isExternalScene: false };\n};\n\nconst detectedLangCode = languageDetector.detect() || defaultLang.code;\nexport const appLangCodeAtom = atom(\n  Array.isArray(detectedLangCode) ? detectedLangCode[0] : detectedLangCode,\n);\n\nconst ExcalidrawWrapper = () => {\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [langCode, setLangCode] = useAtom(appLangCodeAtom);\n  const isCollabDisabled = isRunningInIframe();\n\n  // initial state\n  // ---------------------------------------------------------------------------\n\n  const initialStatePromiseRef = useRef<{\n    promise: ResolvablePromise<ExcalidrawInitialDataState | null>;\n  }>({ promise: null! });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise =\n      resolvablePromise<ExcalidrawInitialDataState | null>();\n  }\n\n  useEffect(() => {\n    trackEvent(\"load\", \"frame\", getFrame());\n    // Delayed so that the app has a time to load the latest SW\n    setTimeout(() => {\n      trackEvent(\"load\", \"version\", getVersion());\n    }, VERSION_TIMEOUT);\n  }, []);\n\n  const [excalidrawAPI, excalidrawRefCallback] =\n    useCallbackRefState<ExcalidrawImperativeAPI>();\n\n  const [collabAPI] = useAtom(collabAPIAtom);\n  const [, setCollabDialogShown] = useAtom(collabDialogShownAtom);\n  const [isCollaborating] = useAtomWithInitialValue(isCollaboratingAtom, () => {\n    return isCollaborationLink(window.location.href);\n  });\n\n  useHandleLibrary({\n    excalidrawAPI,\n    getInitialLibraryItems: getLibraryItemsFromStorage,\n  });\n\n  useEffect(() => {\n    if (!excalidrawAPI || (!isCollabDisabled && !collabAPI)) {\n      return;\n    }\n\n    const loadImages = (\n      data: ResolutionType<typeof initializeScene>,\n      isInitialLoad = false,\n    ) => {\n      if (!data.scene) {\n        return;\n      }\n      if (collabAPI?.isCollaborating()) {\n        if (data.scene.elements) {\n          collabAPI\n            .fetchImageFilesFromFirebase({\n              elements: data.scene.elements,\n              forceFetchFiles: true,\n            })\n            .then(({ loadedFiles, erroredFiles }) => {\n              excalidrawAPI.addFiles(loadedFiles);\n              updateStaleImageStatuses({\n                excalidrawAPI,\n                erroredFiles,\n                elements: excalidrawAPI.getSceneElementsIncludingDeleted(),\n              });\n            });\n        }\n      } else {\n        const fileIds =\n          data.scene.elements?.reduce((acc, element) => {\n            if (isInitializedImageElement(element)) {\n              return acc.concat(element.fileId);\n            }\n            return acc;\n          }, [] as FileId[]) || [];\n\n        if (data.isExternalScene) {\n          loadFilesFromFirebase(\n            `${FIREBASE_STORAGE_PREFIXES.shareLinkFiles}/${data.id}`,\n            data.key,\n            fileIds,\n          ).then(({ loadedFiles, erroredFiles }) => {\n            excalidrawAPI.addFiles(loadedFiles);\n            updateStaleImageStatuses({\n              excalidrawAPI,\n              erroredFiles,\n              elements: excalidrawAPI.getSceneElementsIncludingDeleted(),\n            });\n          });\n        } else if (isInitialLoad) {\n          if (fileIds.length) {\n            LocalData.fileStorage\n              .getFiles(fileIds)\n              .then(({ loadedFiles, erroredFiles }) => {\n                if (loadedFiles.length) {\n                  excalidrawAPI.addFiles(loadedFiles);\n                }\n                updateStaleImageStatuses({\n                  excalidrawAPI,\n                  erroredFiles,\n                  elements: excalidrawAPI.getSceneElementsIncludingDeleted(),\n                });\n              });\n          }\n          // on fresh load, clear unused files from IDB (from previous\n          // session)\n          LocalData.fileStorage.clearObsoleteFiles({ currentFileIds: fileIds });\n        }\n      }\n    };\n\n    initializeScene({ collabAPI, excalidrawAPI }).then(async (data) => {\n      loadImages(data, /* isInitialLoad */ true);\n      initialStatePromiseRef.current.promise.resolve(data.scene);\n    });\n\n    const onHashChange = async (event: HashChangeEvent) => {\n      event.preventDefault();\n      const libraryUrlTokens = parseLibraryTokensFromUrl();\n      if (!libraryUrlTokens) {\n        if (\n          collabAPI?.isCollaborating() &&\n          !isCollaborationLink(window.location.href)\n        ) {\n          collabAPI.stopCollaboration(false);\n        }\n        excalidrawAPI.updateScene({ appState: { isLoading: true } });\n\n        initializeScene({ collabAPI, excalidrawAPI }).then((data) => {\n          loadImages(data);\n          if (data.scene) {\n            excalidrawAPI.updateScene({\n              ...data.scene,\n              ...restore(data.scene, null, null, { repairBindings: true }),\n              commitToHistory: true,\n            });\n          }\n        });\n      }\n    };\n\n    const titleTimeout = setTimeout(\n      () => (document.title = APP_NAME),\n      TITLE_TIMEOUT,\n    );\n\n    const syncData = debounce(() => {\n      if (isTestEnv()) {\n        return;\n      }\n      if (\n        !document.hidden &&\n        ((collabAPI && !collabAPI.isCollaborating()) || isCollabDisabled)\n      ) {\n        // don't sync if local state is newer or identical to browser state\n        if (isBrowserStorageStateNewer(STORAGE_KEYS.VERSION_DATA_STATE)) {\n          const localDataState = importFromLocalStorage();\n          const username = importUsernameFromLocalStorage();\n          let langCode = languageDetector.detect() || defaultLang.code;\n          if (Array.isArray(langCode)) {\n            langCode = langCode[0];\n          }\n          setLangCode(langCode);\n          excalidrawAPI.updateScene({\n            ...localDataState,\n          });\n          excalidrawAPI.updateLibrary({\n            libraryItems: getLibraryItemsFromStorage(),\n          });\n          collabAPI?.setUsername(username || \"\");\n        }\n\n        if (isBrowserStorageStateNewer(STORAGE_KEYS.VERSION_FILES)) {\n          const elements = excalidrawAPI.getSceneElementsIncludingDeleted();\n          const currFiles = excalidrawAPI.getFiles();\n          const fileIds =\n            elements?.reduce((acc, element) => {\n              if (\n                isInitializedImageElement(element) &&\n                // only load and update images that aren't already loaded\n                !currFiles[element.fileId]\n              ) {\n                return acc.concat(element.fileId);\n              }\n              return acc;\n            }, [] as FileId[]) || [];\n          if (fileIds.length) {\n            LocalData.fileStorage\n              .getFiles(fileIds)\n              .then(({ loadedFiles, erroredFiles }) => {\n                if (loadedFiles.length) {\n                  excalidrawAPI.addFiles(loadedFiles);\n                }\n                updateStaleImageStatuses({\n                  excalidrawAPI,\n                  erroredFiles,\n                  elements: excalidrawAPI.getSceneElementsIncludingDeleted(),\n                });\n              });\n          }\n        }\n      }\n    }, SYNC_BROWSER_TABS_TIMEOUT);\n\n    const onUnload = () => {\n      LocalData.flushSave();\n    };\n\n    const visibilityChange = (event: FocusEvent | Event) => {\n      if (event.type === EVENT.BLUR || document.hidden) {\n        LocalData.flushSave();\n      }\n      if (\n        event.type === EVENT.VISIBILITY_CHANGE ||\n        event.type === EVENT.FOCUS\n      ) {\n        syncData();\n      }\n    };\n\n    window.addEventListener(EVENT.HASHCHANGE, onHashChange, false);\n    window.addEventListener(EVENT.UNLOAD, onUnload, false);\n    window.addEventListener(EVENT.BLUR, visibilityChange, false);\n    document.addEventListener(EVENT.VISIBILITY_CHANGE, visibilityChange, false);\n    window.addEventListener(EVENT.FOCUS, visibilityChange, false);\n    return () => {\n      window.removeEventListener(EVENT.HASHCHANGE, onHashChange, false);\n      window.removeEventListener(EVENT.UNLOAD, onUnload, false);\n      window.removeEventListener(EVENT.BLUR, visibilityChange, false);\n      window.removeEventListener(EVENT.FOCUS, visibilityChange, false);\n      document.removeEventListener(\n        EVENT.VISIBILITY_CHANGE,\n        visibilityChange,\n        false,\n      );\n      clearTimeout(titleTimeout);\n    };\n  }, [isCollabDisabled, collabAPI, excalidrawAPI, setLangCode]);\n\n  useEffect(() => {\n    const unloadHandler = (event: BeforeUnloadEvent) => {\n      LocalData.flushSave();\n\n      if (\n        excalidrawAPI &&\n        LocalData.fileStorage.shouldPreventUnload(\n          excalidrawAPI.getSceneElements(),\n        )\n      ) {\n        preventUnload(event);\n      }\n    };\n    window.addEventListener(EVENT.BEFORE_UNLOAD, unloadHandler);\n    return () => {\n      window.removeEventListener(EVENT.BEFORE_UNLOAD, unloadHandler);\n    };\n  }, [excalidrawAPI]);\n\n  useEffect(() => {\n    languageDetector.cacheUserLanguage(langCode);\n  }, [langCode]);\n\n  const [theme, setTheme] = useState<Theme>(\n    () =>\n      localStorage.getItem(STORAGE_KEYS.LOCAL_STORAGE_THEME) ||\n      // FIXME migration from old LS scheme. Can be removed later. #5660\n      importFromLocalStorage().appState?.theme ||\n      THEME.LIGHT,\n  );\n\n  useEffect(() => {\n    localStorage.setItem(STORAGE_KEYS.LOCAL_STORAGE_THEME, theme);\n    // currently only used for body styling during init (see public/index.html),\n    // but may change in the future\n    document.documentElement.classList.toggle(\"dark\", theme === THEME.DARK);\n  }, [theme]);\n\n  const onChange = (\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n    files: BinaryFiles,\n  ) => {\n    if (collabAPI?.isCollaborating()) {\n      collabAPI.syncElements(elements);\n    }\n\n    setTheme(appState.theme);\n\n    // this check is redundant, but since this is a hot path, it's best\n    // not to evaludate the nested expression every time\n    if (!LocalData.isSavePaused()) {\n      LocalData.save(elements, appState, files, () => {\n        if (excalidrawAPI) {\n          let didChange = false;\n\n          const elements = excalidrawAPI\n            .getSceneElementsIncludingDeleted()\n            .map((element) => {\n              if (\n                LocalData.fileStorage.shouldUpdateImageElementStatus(element)\n              ) {\n                const newElement = newElementWith(element, { status: \"saved\" });\n                if (newElement !== element) {\n                  didChange = true;\n                }\n                return newElement;\n              }\n              return element;\n            });\n\n          if (didChange) {\n            excalidrawAPI.updateScene({\n              elements,\n            });\n          }\n        }\n      });\n    }\n  };\n\n  const [latestShareableLink, setLatestShareableLink] = useState<string | null>(\n    null,\n  );\n\n  const onExportToBackend = async (\n    exportedElements: readonly NonDeletedExcalidrawElement[],\n    appState: Partial<AppState>,\n    files: BinaryFiles,\n    canvas: HTMLCanvasElement | null,\n  ) => {\n    if (exportedElements.length === 0) {\n      return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n    }\n    if (canvas) {\n      try {\n        const { url, errorMessage } = await exportToBackend(\n          exportedElements,\n          {\n            ...appState,\n            viewBackgroundColor: appState.exportBackground\n              ? appState.viewBackgroundColor\n              : getDefaultAppState().viewBackgroundColor,\n          },\n          files,\n        );\n\n        if (errorMessage) {\n          setErrorMessage(errorMessage);\n        }\n\n        if (url) {\n          setLatestShareableLink(url);\n        }\n      } catch (error: any) {\n        if (error.name !== \"AbortError\") {\n          const { width, height } = canvas;\n          console.error(error, { width, height });\n          setErrorMessage(error.message);\n        }\n      }\n    }\n  };\n\n  const renderCustomStats = (\n    elements: readonly NonDeletedExcalidrawElement[],\n    appState: UIAppState,\n  ) => {\n    return (\n      <CustomStats\n        setToast={(message) => excalidrawAPI!.setToast({ message })}\n        appState={appState}\n        elements={elements}\n      />\n    );\n  };\n\n  const onLibraryChange = async (items: LibraryItems) => {\n    if (!items.length) {\n      localStorage.removeItem(STORAGE_KEYS.LOCAL_STORAGE_LIBRARY);\n      return;\n    }\n    const serializedItems = JSON.stringify(items);\n    localStorage.setItem(STORAGE_KEYS.LOCAL_STORAGE_LIBRARY, serializedItems);\n  };\n\n  const isOffline = useAtomValue(isOfflineAtom);\n\n  return (\n    <div\n      style={{ height: \"100%\" }}\n      className={clsx(\"excalidraw-app\", {\n        \"is-collaborating\": isCollaborating,\n      })}\n    >\n      <Excalidraw\n        ref={excalidrawRefCallback}\n        onChange={onChange}\n        initialData={initialStatePromiseRef.current.promise}\n        isCollaborating={isCollaborating}\n        onPointerUpdate={collabAPI?.onPointerUpdate}\n        UIOptions={{\n          canvasActions: {\n            toggleTheme: true,\n            export: {\n              onExportToBackend,\n              renderCustomUI: (elements, appState, files) => {\n                return (\n                  <ExportToExcalidrawPlus\n                    elements={elements}\n                    appState={appState}\n                    files={files}\n                    onError={(error) => {\n                      excalidrawAPI?.updateScene({\n                        appState: {\n                          errorMessage: error.message,\n                        },\n                      });\n                    }}\n                  />\n                );\n              },\n            },\n          },\n        }}\n        langCode={langCode}\n        renderCustomStats={renderCustomStats}\n        detectScroll={false}\n        handleKeyboardGlobally={true}\n        onLibraryChange={onLibraryChange}\n        autoFocus={true}\n        theme={theme}\n        renderTopRightUI={(isMobile) => {\n          if (isMobile || !collabAPI || isCollabDisabled) {\n            return null;\n          }\n          return (\n            <LiveCollaborationTrigger\n              isCollaborating={isCollaborating}\n              onSelect={() => setCollabDialogShown(true)}\n            />\n          );\n        }}\n      >\n        <AppMainMenu\n          setCollabDialogShown={setCollabDialogShown}\n          isCollaborating={isCollaborating}\n          isCollabEnabled={!isCollabDisabled}\n        />\n        <AppWelcomeScreen\n          setCollabDialogShown={setCollabDialogShown}\n          isCollabEnabled={!isCollabDisabled}\n        />\n        <OverwriteConfirmDialog>\n          <OverwriteConfirmDialog.Actions.ExportToImage />\n          <OverwriteConfirmDialog.Actions.SaveToDisk />\n          {excalidrawAPI && (\n            <OverwriteConfirmDialog.Action\n              title={t(\"overwriteConfirm.action.excalidrawPlus.title\")}\n              actionLabel={t(\"overwriteConfirm.action.excalidrawPlus.button\")}\n              onClick={() => {\n                exportToExcalidrawPlus(\n                  excalidrawAPI.getSceneElements(),\n                  excalidrawAPI.getAppState(),\n                  excalidrawAPI.getFiles(),\n                );\n              }}\n            >\n              {t(\"overwriteConfirm.action.excalidrawPlus.description\")}\n            </OverwriteConfirmDialog.Action>\n          )}\n        </OverwriteConfirmDialog>\n        <AppFooter />\n        {isCollaborating && isOffline && (\n          <div className=\"collab-offline-warning\">\n            {t(\"alerts.collabOfflineWarning\")}\n          </div>\n        )}\n        {latestShareableLink && (\n          <ShareableLinkDialog\n            link={latestShareableLink}\n            onCloseRequest={() => setLatestShareableLink(null)}\n            setErrorMessage={setErrorMessage}\n          />\n        )}\n        {excalidrawAPI && !isCollabDisabled && (\n          <Collab excalidrawAPI={excalidrawAPI} />\n        )}\n        {errorMessage && (\n          <ErrorDialog onClose={() => setErrorMessage(\"\")}>\n            {errorMessage}\n          </ErrorDialog>\n        )}\n      </Excalidraw>\n    </div>\n  );\n};\n\nconst ExcalidrawApp = () => {\n  return (\n    <TopErrorBoundary>\n      <Provider unstable_createStore={() => appJotaiStore}>\n        <ExcalidrawWrapper />\n      </Provider>\n    </TopErrorBoundary>\n  );\n};\n\nexport default ExcalidrawApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}