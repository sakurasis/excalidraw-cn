{"ast":null,"code":"import { copyBlobToClipboardAsPng, copyTextToSystemClipboard } from \"../clipboard\";\nimport { DEFAULT_EXPORT_PADDING, isFirefox, MIME_TYPES } from \"../constants\";\nimport { t } from \"../i18n\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { canvasToBlob } from \"./blob\";\nimport { fileSave } from \"./filesystem\";\nimport { serializeAsJSON } from \"./json\";\nexport { loadFromBlob } from \"./blob\";\nexport { loadFromJSON, saveAsJSON } from \"./json\";\nexport const exportCanvas = async (type, elements, appState, files, _ref) => {\n  let {\n    exportBackground,\n    exportPadding = DEFAULT_EXPORT_PADDING,\n    viewBackgroundColor,\n    name,\n    fileHandle = null\n  } = _ref;\n  if (elements.length === 0) {\n    throw new Error(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = await exportToSvg(elements, {\n      exportBackground,\n      exportWithDarkMode: appState.exportWithDarkMode,\n      viewBackgroundColor,\n      exportPadding,\n      exportScale: appState.exportScale,\n      exportEmbedScene: appState.exportEmbedScene && type === \"svg\"\n    }, files);\n    if (type === \"svg\") {\n      return await fileSave(new Blob([tempSvg.outerHTML], {\n        type: MIME_TYPES.svg\n      }), {\n        description: \"Export to SVG\",\n        name,\n        extension: appState.exportEmbedScene ? \"excalidraw.svg\" : \"svg\",\n        fileHandle\n      });\n    } else if (type === \"clipboard-svg\") {\n      await copyTextToSystemClipboard(tempSvg.outerHTML);\n      return;\n    }\n  }\n  const tempCanvas = await exportToCanvas(elements, appState, files, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  if (type === \"png\") {\n    let blob = await canvasToBlob(tempCanvas);\n    tempCanvas.remove();\n    if (appState.exportEmbedScene) {\n      blob = await (await import( /* webpackChunkName: \"image\" */\"./image\")).encodePngMetadata({\n        blob,\n        metadata: serializeAsJSON(elements, appState, files, \"local\")\n      });\n    }\n    return await fileSave(blob, {\n      description: \"Export to PNG\",\n      name,\n      // FIXME reintroduce `excalidraw.png` when most people upgrade away\n      // from 111.0.5563.64 (arm64), see #6349\n      extension: /* appState.exportEmbedScene ? \"excalidraw.png\" : */\"png\",\n      fileHandle\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      const blob = canvasToBlob(tempCanvas);\n      await copyBlobToClipboardAsPng(blob);\n    } catch (error) {\n      console.warn(error);\n      if (error.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw error;\n      }\n      // TypeError *probably* suggests ClipboardItem not defined, which\n      // people on Firefox can enable through a flag, so let's tell them.\n      if (isFirefox && error.name === \"TypeError\") {\n        throw new Error(`${t(\"alerts.couldNotCopyToClipboard\")}\\n\\n${t(\"hints.firefox_clipboard_write\")}`);\n      } else {\n        throw new Error(t(\"alerts.couldNotCopyToClipboard\"));\n      }\n    } finally {\n      tempCanvas.remove();\n    }\n  } else {\n    tempCanvas.remove();\n    // shouldn't happen\n    throw new Error(\"Unsupported export type\");\n  }\n};","map":{"version":3,"names":["copyBlobToClipboardAsPng","copyTextToSystemClipboard","DEFAULT_EXPORT_PADDING","isFirefox","MIME_TYPES","t","exportToCanvas","exportToSvg","canvasToBlob","fileSave","serializeAsJSON","loadFromBlob","loadFromJSON","saveAsJSON","exportCanvas","type","elements","appState","files","_ref","exportBackground","exportPadding","viewBackgroundColor","name","fileHandle","length","Error","tempSvg","exportWithDarkMode","exportScale","exportEmbedScene","Blob","outerHTML","svg","description","extension","tempCanvas","style","display","document","body","appendChild","blob","remove","encodePngMetadata","metadata","error","console","warn"],"sources":["D:/project/excalidraw-cn/src/data/index.ts"],"sourcesContent":["import {\n  copyBlobToClipboardAsPng,\n  copyTextToSystemClipboard,\n} from \"../clipboard\";\nimport { DEFAULT_EXPORT_PADDING, isFirefox, MIME_TYPES } from \"../constants\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { ExportType } from \"../scene/types\";\nimport { AppState, BinaryFiles } from \"../types\";\nimport { canvasToBlob } from \"./blob\";\nimport { fileSave, FileSystemHandle } from \"./filesystem\";\nimport { serializeAsJSON } from \"./json\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { loadFromJSON, saveAsJSON } from \"./json\";\n\nexport const exportCanvas = async (\n  type: Omit<ExportType, \"backend\">,\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  files: BinaryFiles,\n  {\n    exportBackground,\n    exportPadding = DEFAULT_EXPORT_PADDING,\n    viewBackgroundColor,\n    name,\n    fileHandle = null,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    name: string;\n    fileHandle?: FileSystemHandle | null;\n  },\n) => {\n  if (elements.length === 0) {\n    throw new Error(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = await exportToSvg(\n      elements,\n      {\n        exportBackground,\n        exportWithDarkMode: appState.exportWithDarkMode,\n        viewBackgroundColor,\n        exportPadding,\n        exportScale: appState.exportScale,\n        exportEmbedScene: appState.exportEmbedScene && type === \"svg\",\n      },\n      files,\n    );\n    if (type === \"svg\") {\n      return await fileSave(\n        new Blob([tempSvg.outerHTML], { type: MIME_TYPES.svg }),\n        {\n          description: \"Export to SVG\",\n          name,\n          extension: appState.exportEmbedScene ? \"excalidraw.svg\" : \"svg\",\n          fileHandle,\n        },\n      );\n    } else if (type === \"clipboard-svg\") {\n      await copyTextToSystemClipboard(tempSvg.outerHTML);\n      return;\n    }\n  }\n\n  const tempCanvas = await exportToCanvas(elements, appState, files, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    let blob = await canvasToBlob(tempCanvas);\n    tempCanvas.remove();\n    if (appState.exportEmbedScene) {\n      blob = await (\n        await import(/* webpackChunkName: \"image\" */ \"./image\")\n      ).encodePngMetadata({\n        blob,\n        metadata: serializeAsJSON(elements, appState, files, \"local\"),\n      });\n    }\n\n    return await fileSave(blob, {\n      description: \"Export to PNG\",\n      name,\n      // FIXME reintroduce `excalidraw.png` when most people upgrade away\n      // from 111.0.5563.64 (arm64), see #6349\n      extension: /* appState.exportEmbedScene ? \"excalidraw.png\" : */ \"png\",\n      fileHandle,\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      const blob = canvasToBlob(tempCanvas);\n      await copyBlobToClipboardAsPng(blob);\n    } catch (error: any) {\n      console.warn(error);\n      if (error.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw error;\n      }\n      // TypeError *probably* suggests ClipboardItem not defined, which\n      // people on Firefox can enable through a flag, so let's tell them.\n      if (isFirefox && error.name === \"TypeError\") {\n        throw new Error(\n          `${t(\"alerts.couldNotCopyToClipboard\")}\\n\\n${t(\n            \"hints.firefox_clipboard_write\",\n          )}`,\n        );\n      } else {\n        throw new Error(t(\"alerts.couldNotCopyToClipboard\"));\n      }\n    } finally {\n      tempCanvas.remove();\n    }\n  } else {\n    tempCanvas.remove();\n    // shouldn't happen\n    throw new Error(\"Unsupported export type\");\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}