{"ast":null,"code":"import { getCommonBounds, getClosestElementBounds, getVisibleElements } from \"../element\";\nimport { sceneCoordsToViewportCoords, viewportCoordsToSceneCoords } from \"../utils\";\nconst isOutsideViewPort = (appState, canvas, cords) => {\n  const [x1, y1, x2, y2] = cords;\n  const {\n    x: viewportX1,\n    y: viewportY1\n  } = sceneCoordsToViewportCoords({\n    sceneX: x1,\n    sceneY: y1\n  }, appState);\n  const {\n    x: viewportX2,\n    y: viewportY2\n  } = sceneCoordsToViewportCoords({\n    sceneX: x2,\n    sceneY: y2\n  }, appState);\n  return viewportX2 - viewportX1 > appState.width || viewportY2 - viewportY1 > appState.height;\n};\nexport const centerScrollOn = _ref => {\n  let {\n    scenePoint,\n    viewportDimensions,\n    zoom\n  } = _ref;\n  return {\n    scrollX: viewportDimensions.width / 2 / zoom.value - scenePoint.x,\n    scrollY: viewportDimensions.height / 2 / zoom.value - scenePoint.y\n  };\n};\nexport const calculateScrollCenter = (elements, appState, canvas) => {\n  elements = getVisibleElements(elements);\n  if (!elements.length) {\n    return {\n      scrollX: 0,\n      scrollY: 0\n    };\n  }\n  let [x1, y1, x2, y2] = getCommonBounds(elements);\n  if (isOutsideViewPort(appState, canvas, [x1, y1, x2, y2])) {\n    [x1, y1, x2, y2] = getClosestElementBounds(elements, viewportCoordsToSceneCoords({\n      clientX: appState.scrollX,\n      clientY: appState.scrollY\n    }, appState));\n  }\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n  return centerScrollOn({\n    scenePoint: {\n      x: centerX,\n      y: centerY\n    },\n    viewportDimensions: {\n      width: appState.width,\n      height: appState.height\n    },\n    zoom: appState.zoom\n  });\n};","map":{"version":3,"names":["getCommonBounds","getClosestElementBounds","getVisibleElements","sceneCoordsToViewportCoords","viewportCoordsToSceneCoords","isOutsideViewPort","appState","canvas","cords","x1","y1","x2","y2","x","viewportX1","y","viewportY1","sceneX","sceneY","viewportX2","viewportY2","width","height","centerScrollOn","_ref","scenePoint","viewportDimensions","zoom","scrollX","value","scrollY","calculateScrollCenter","elements","length","clientX","clientY","centerX","centerY"],"sources":["D:/project/excalidraw-cn/src/scene/scroll.ts"],"sourcesContent":["import { AppState, PointerCoords, Zoom } from \"../types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport {\n  getCommonBounds,\n  getClosestElementBounds,\n  getVisibleElements,\n} from \"../element\";\n\nimport {\n  sceneCoordsToViewportCoords,\n  viewportCoordsToSceneCoords,\n} from \"../utils\";\n\nconst isOutsideViewPort = (\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n  cords: Array<number>,\n) => {\n  const [x1, y1, x2, y2] = cords;\n  const { x: viewportX1, y: viewportY1 } = sceneCoordsToViewportCoords(\n    { sceneX: x1, sceneY: y1 },\n    appState,\n  );\n  const { x: viewportX2, y: viewportY2 } = sceneCoordsToViewportCoords(\n    { sceneX: x2, sceneY: y2 },\n    appState,\n  );\n  return (\n    viewportX2 - viewportX1 > appState.width ||\n    viewportY2 - viewportY1 > appState.height\n  );\n};\n\nexport const centerScrollOn = ({\n  scenePoint,\n  viewportDimensions,\n  zoom,\n}: {\n  scenePoint: PointerCoords;\n  viewportDimensions: { height: number; width: number };\n  zoom: Zoom;\n}) => {\n  return {\n    scrollX: viewportDimensions.width / 2 / zoom.value - scenePoint.x,\n    scrollY: viewportDimensions.height / 2 / zoom.value - scenePoint.y,\n  };\n};\n\nexport const calculateScrollCenter = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement | null,\n): { scrollX: number; scrollY: number } => {\n  elements = getVisibleElements(elements);\n\n  if (!elements.length) {\n    return {\n      scrollX: 0,\n      scrollY: 0,\n    };\n  }\n  let [x1, y1, x2, y2] = getCommonBounds(elements);\n\n  if (isOutsideViewPort(appState, canvas, [x1, y1, x2, y2])) {\n    [x1, y1, x2, y2] = getClosestElementBounds(\n      elements,\n      viewportCoordsToSceneCoords(\n        { clientX: appState.scrollX, clientY: appState.scrollY },\n        appState,\n      ),\n    );\n  }\n\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n\n  return centerScrollOn({\n    scenePoint: { x: centerX, y: centerY },\n    viewportDimensions: { width: appState.width, height: appState.height },\n    zoom: appState.zoom,\n  });\n};\n"],"mappings":"AAEA,SACEA,eAAe,EACfC,uBAAuB,EACvBC,kBAAkB,QACb,YAAY;AAEnB,SACEC,2BAA2B,EAC3BC,2BAA2B,QACtB,UAAU;AAEjB,MAAMC,iBAAiB,GAAGA,CACxBC,QAAkB,EAClBC,MAAgC,EAChCC,KAAoB,KACjB;EACH,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGJ,KAAK;EAC9B,MAAM;IAAEK,CAAC,EAAEC,UAAU;IAAEC,CAAC,EAAEC;EAAW,CAAC,GAAGb,2BAA2B,CAClE;IAAEc,MAAM,EAAER,EAAE;IAAES,MAAM,EAAER;EAAG,CAAC,EAC1BJ,QAAQ,CACT;EACD,MAAM;IAAEO,CAAC,EAAEM,UAAU;IAAEJ,CAAC,EAAEK;EAAW,CAAC,GAAGjB,2BAA2B,CAClE;IAAEc,MAAM,EAAEN,EAAE;IAAEO,MAAM,EAAEN;EAAG,CAAC,EAC1BN,QAAQ,CACT;EACD,OACEa,UAAU,GAAGL,UAAU,GAAGR,QAAQ,CAACe,KAAK,IACxCD,UAAU,GAAGJ,UAAU,GAAGV,QAAQ,CAACgB,MAAM;AAE7C,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGC,IAAA,IAQxB;EAAA,IARyB;IAC7BC,UAAU;IACVC,kBAAkB;IAClBC;EAKF,CAAC,GAAAH,IAAA;EACC,OAAO;IACLI,OAAO,EAAEF,kBAAkB,CAACL,KAAK,GAAG,CAAC,GAAGM,IAAI,CAACE,KAAK,GAAGJ,UAAU,CAACZ,CAAC;IACjEiB,OAAO,EAAEJ,kBAAkB,CAACJ,MAAM,GAAG,CAAC,GAAGK,IAAI,CAACE,KAAK,GAAGJ,UAAU,CAACV;EACnE,CAAC;AACH,CAAC;AAED,OAAO,MAAMgB,qBAAqB,GAAGA,CACnCC,QAAsC,EACtC1B,QAAkB,EAClBC,MAAgC,KACS;EACzCyB,QAAQ,GAAG9B,kBAAkB,CAAC8B,QAAQ,CAAC;EAEvC,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;IACpB,OAAO;MACLL,OAAO,EAAE,CAAC;MACVE,OAAO,EAAE;IACX,CAAC;EACH;EACA,IAAI,CAACrB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGZ,eAAe,CAACgC,QAAQ,CAAC;EAEhD,IAAI3B,iBAAiB,CAACC,QAAQ,EAAEC,MAAM,EAAE,CAACE,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAAC,EAAE;IACzD,CAACH,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGX,uBAAuB,CACxC+B,QAAQ,EACR5B,2BAA2B,CACzB;MAAE8B,OAAO,EAAE5B,QAAQ,CAACsB,OAAO;MAAEO,OAAO,EAAE7B,QAAQ,CAACwB;IAAQ,CAAC,EACxDxB,QAAQ,CACT,CACF;EACH;EAEA,MAAM8B,OAAO,GAAG,CAAC3B,EAAE,GAAGE,EAAE,IAAI,CAAC;EAC7B,MAAM0B,OAAO,GAAG,CAAC3B,EAAE,GAAGE,EAAE,IAAI,CAAC;EAE7B,OAAOW,cAAc,CAAC;IACpBE,UAAU,EAAE;MAAEZ,CAAC,EAAEuB,OAAO;MAAErB,CAAC,EAAEsB;IAAQ,CAAC;IACtCX,kBAAkB,EAAE;MAAEL,KAAK,EAAEf,QAAQ,CAACe,KAAK;MAAEC,MAAM,EAAEhB,QAAQ,CAACgB;IAAO,CAAC;IACtEK,IAAI,EAAErB,QAAQ,CAACqB;EACjB,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}