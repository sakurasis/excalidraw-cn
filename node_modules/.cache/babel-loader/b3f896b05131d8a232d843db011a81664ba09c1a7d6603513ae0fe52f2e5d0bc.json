{"ast":null,"code":"import { KEYS } from \"../../keys\";\nimport { COLORS_PER_ROW, COLOR_PALETTE } from \"../../colors\";\nimport { colorPickerHotkeyBindings, getColorNameAndShadeFromColor } from \"./colorPickerUtils\";\nconst arrowHandler = (eventKey, currentIndex, length) => {\n  var _currentIndex;\n  const rows = Math.ceil(length / COLORS_PER_ROW);\n  currentIndex = (_currentIndex = currentIndex) !== null && _currentIndex !== void 0 ? _currentIndex : -1;\n  switch (eventKey) {\n    case \"ArrowLeft\":\n      {\n        const prevIndex = currentIndex - 1;\n        return prevIndex < 0 ? length - 1 : prevIndex;\n      }\n    case \"ArrowRight\":\n      {\n        return (currentIndex + 1) % length;\n      }\n    case \"ArrowDown\":\n      {\n        const nextIndex = currentIndex + COLORS_PER_ROW;\n        return nextIndex >= length ? currentIndex % COLORS_PER_ROW : nextIndex;\n      }\n    case \"ArrowUp\":\n      {\n        const prevIndex = currentIndex - COLORS_PER_ROW;\n        const newIndex = prevIndex < 0 ? COLORS_PER_ROW * rows + prevIndex : prevIndex;\n        return newIndex >= length ? undefined : newIndex;\n      }\n  }\n};\n/**\n * @returns true if the event was handled\n */\nconst hotkeyHandler = _ref => {\n  let {\n    e,\n    colorObj,\n    onChange,\n    palette,\n    customColors,\n    setActiveColorPickerSection,\n    activeShade\n  } = _ref;\n  if ((colorObj === null || colorObj === void 0 ? void 0 : colorObj.shade) != null) {\n    // shift + numpad is extremely messed up on windows apparently\n    if ([\"Digit1\", \"Digit2\", \"Digit3\", \"Digit4\", \"Digit5\"].includes(e.code) && e.shiftKey) {\n      const newShade = Number(e.code.slice(-1)) - 1;\n      onChange(palette[colorObj.colorName][newShade]);\n      setActiveColorPickerSection(\"shades\");\n      return true;\n    }\n  }\n  if ([\"1\", \"2\", \"3\", \"4\", \"5\"].includes(e.key)) {\n    const c = customColors[Number(e.key) - 1];\n    if (c) {\n      onChange(customColors[Number(e.key) - 1]);\n      setActiveColorPickerSection(\"custom\");\n      return true;\n    }\n  }\n  if (colorPickerHotkeyBindings.includes(e.key)) {\n    const index = colorPickerHotkeyBindings.indexOf(e.key);\n    const paletteKey = Object.keys(palette)[index];\n    const paletteValue = palette[paletteKey];\n    const r = Array.isArray(paletteValue) ? paletteValue[activeShade] : paletteValue;\n    onChange(r);\n    setActiveColorPickerSection(\"baseColors\");\n    return true;\n  }\n  return false;\n};\n/**\n * @returns true if the event was handled\n */\nexport const colorPickerKeyNavHandler = _ref2 => {\n  let {\n    event,\n    activeColorPickerSection,\n    palette,\n    color,\n    onChange,\n    customColors,\n    setActiveColorPickerSection,\n    updateData,\n    activeShade,\n    onEyeDropperToggle,\n    onEscape\n  } = _ref2;\n  if (event[KEYS.CTRL_OR_CMD]) {\n    return false;\n  }\n  if (event.key === KEYS.ESCAPE) {\n    onEscape(event);\n    return true;\n  }\n\n  // checkt using `key` to ignore combos with Alt modifier\n  if (event.key === KEYS.ALT) {\n    onEyeDropperToggle(true);\n    return true;\n  }\n  if (event.key === KEYS.I) {\n    onEyeDropperToggle();\n    return true;\n  }\n  const colorObj = getColorNameAndShadeFromColor({\n    color,\n    palette\n  });\n  if (event.key === KEYS.TAB) {\n    const sectionsMap = {\n      custom: !!customColors.length,\n      baseColors: true,\n      shades: (colorObj === null || colorObj === void 0 ? void 0 : colorObj.shade) != null,\n      hex: true\n    };\n    const sections = Object.entries(sectionsMap).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      if (value) {\n        acc.push(key);\n      }\n      return acc;\n    }, []);\n    const activeSectionIndex = sections.indexOf(activeColorPickerSection);\n    const indexOffset = event.shiftKey ? -1 : 1;\n    const nextSectionIndex = activeSectionIndex + indexOffset > sections.length - 1 ? 0 : activeSectionIndex + indexOffset < 0 ? sections.length - 1 : activeSectionIndex + indexOffset;\n    const nextSection = sections[nextSectionIndex];\n    if (nextSection) {\n      setActiveColorPickerSection(nextSection);\n    }\n    if (nextSection === \"custom\") {\n      onChange(customColors[0]);\n    } else if (nextSection === \"baseColors\") {\n      const baseColorName = Object.entries(palette).find(_ref4 => {\n        let [name, shades] = _ref4;\n        if (Array.isArray(shades)) {\n          return shades.includes(color);\n        } else if (shades === color) {\n          return name;\n        }\n        return null;\n      });\n      if (!baseColorName) {\n        onChange(COLOR_PALETTE.black);\n      }\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    return true;\n  }\n  if (hotkeyHandler({\n    e: event,\n    colorObj,\n    onChange,\n    palette,\n    customColors,\n    setActiveColorPickerSection,\n    activeShade\n  })) {\n    return true;\n  }\n  if (activeColorPickerSection === \"shades\") {\n    if (colorObj) {\n      const {\n        shade\n      } = colorObj;\n      const newShade = arrowHandler(event.key, shade, COLORS_PER_ROW);\n      if (newShade !== undefined) {\n        onChange(palette[colorObj.colorName][newShade]);\n        return true;\n      }\n    }\n  }\n  if (activeColorPickerSection === \"baseColors\") {\n    if (colorObj) {\n      const {\n        colorName\n      } = colorObj;\n      const colorNames = Object.keys(palette);\n      const indexOfColorName = colorNames.indexOf(colorName);\n      const newColorIndex = arrowHandler(event.key, indexOfColorName, colorNames.length);\n      if (newColorIndex !== undefined) {\n        const newColorName = colorNames[newColorIndex];\n        const newColorNameValue = palette[newColorName];\n        onChange(Array.isArray(newColorNameValue) ? newColorNameValue[activeShade] : newColorNameValue);\n        return true;\n      }\n    }\n  }\n  if (activeColorPickerSection === \"custom\") {\n    const indexOfColor = customColors.indexOf(color);\n    const newColorIndex = arrowHandler(event.key, indexOfColor, customColors.length);\n    if (newColorIndex !== undefined) {\n      const newColor = customColors[newColorIndex];\n      onChange(newColor);\n      return true;\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["KEYS","COLORS_PER_ROW","COLOR_PALETTE","colorPickerHotkeyBindings","getColorNameAndShadeFromColor","arrowHandler","eventKey","currentIndex","length","_currentIndex","rows","Math","ceil","prevIndex","nextIndex","newIndex","undefined","hotkeyHandler","_ref","e","colorObj","onChange","palette","customColors","setActiveColorPickerSection","activeShade","shade","includes","code","shiftKey","newShade","Number","slice","colorName","key","c","index","indexOf","paletteKey","Object","keys","paletteValue","r","Array","isArray","colorPickerKeyNavHandler","_ref2","event","activeColorPickerSection","color","updateData","onEyeDropperToggle","onEscape","CTRL_OR_CMD","ESCAPE","ALT","I","TAB","sectionsMap","custom","baseColors","shades","hex","sections","entries","reduce","acc","_ref3","value","push","activeSectionIndex","indexOffset","nextSectionIndex","nextSection","baseColorName","find","_ref4","name","black","preventDefault","stopPropagation","colorNames","indexOfColorName","newColorIndex","newColorName","newColorNameValue","indexOfColor","newColor"],"sources":["D:/project/excalidraw-cn/src/components/ColorPicker/keyboardNavHandlers.ts"],"sourcesContent":["import { KEYS } from \"../../keys\";\nimport {\n  ColorPickerColor,\n  ColorPalette,\n  ColorPaletteCustom,\n  COLORS_PER_ROW,\n  COLOR_PALETTE,\n} from \"../../colors\";\nimport { ValueOf } from \"../../utility-types\";\nimport {\n  ActiveColorPickerSectionAtomType,\n  colorPickerHotkeyBindings,\n  getColorNameAndShadeFromColor,\n} from \"./colorPickerUtils\";\n\nconst arrowHandler = (\n  eventKey: string,\n  currentIndex: number | null,\n  length: number,\n) => {\n  const rows = Math.ceil(length / COLORS_PER_ROW);\n\n  currentIndex = currentIndex ?? -1;\n\n  switch (eventKey) {\n    case \"ArrowLeft\": {\n      const prevIndex = currentIndex - 1;\n      return prevIndex < 0 ? length - 1 : prevIndex;\n    }\n    case \"ArrowRight\": {\n      return (currentIndex + 1) % length;\n    }\n    case \"ArrowDown\": {\n      const nextIndex = currentIndex + COLORS_PER_ROW;\n      return nextIndex >= length ? currentIndex % COLORS_PER_ROW : nextIndex;\n    }\n    case \"ArrowUp\": {\n      const prevIndex = currentIndex - COLORS_PER_ROW;\n      const newIndex =\n        prevIndex < 0 ? COLORS_PER_ROW * rows + prevIndex : prevIndex;\n      return newIndex >= length ? undefined : newIndex;\n    }\n  }\n};\n\ninterface HotkeyHandlerProps {\n  e: React.KeyboardEvent;\n  colorObj: { colorName: ColorPickerColor; shade: number | null } | null;\n  onChange: (color: string) => void;\n  palette: ColorPaletteCustom;\n  customColors: string[];\n  setActiveColorPickerSection: (\n    update: React.SetStateAction<ActiveColorPickerSectionAtomType>,\n  ) => void;\n  activeShade: number;\n}\n\n/**\n * @returns true if the event was handled\n */\nconst hotkeyHandler = ({\n  e,\n  colorObj,\n  onChange,\n  palette,\n  customColors,\n  setActiveColorPickerSection,\n  activeShade,\n}: HotkeyHandlerProps): boolean => {\n  if (colorObj?.shade != null) {\n    // shift + numpad is extremely messed up on windows apparently\n    if (\n      [\"Digit1\", \"Digit2\", \"Digit3\", \"Digit4\", \"Digit5\"].includes(e.code) &&\n      e.shiftKey\n    ) {\n      const newShade = Number(e.code.slice(-1)) - 1;\n      onChange(palette[colorObj.colorName][newShade]);\n      setActiveColorPickerSection(\"shades\");\n      return true;\n    }\n  }\n\n  if ([\"1\", \"2\", \"3\", \"4\", \"5\"].includes(e.key)) {\n    const c = customColors[Number(e.key) - 1];\n    if (c) {\n      onChange(customColors[Number(e.key) - 1]);\n      setActiveColorPickerSection(\"custom\");\n      return true;\n    }\n  }\n\n  if (colorPickerHotkeyBindings.includes(e.key)) {\n    const index = colorPickerHotkeyBindings.indexOf(e.key);\n    const paletteKey = Object.keys(palette)[index] as keyof ColorPalette;\n    const paletteValue = palette[paletteKey];\n    const r = Array.isArray(paletteValue)\n      ? paletteValue[activeShade]\n      : paletteValue;\n    onChange(r);\n    setActiveColorPickerSection(\"baseColors\");\n    return true;\n  }\n  return false;\n};\n\ninterface ColorPickerKeyNavHandlerProps {\n  event: React.KeyboardEvent;\n  activeColorPickerSection: ActiveColorPickerSectionAtomType;\n  palette: ColorPaletteCustom;\n  color: string;\n  onChange: (color: string) => void;\n  customColors: string[];\n  setActiveColorPickerSection: (\n    update: React.SetStateAction<ActiveColorPickerSectionAtomType>,\n  ) => void;\n  updateData: (formData?: any) => void;\n  activeShade: number;\n  onEyeDropperToggle: (force?: boolean) => void;\n  onEscape: (event: React.KeyboardEvent | KeyboardEvent) => void;\n}\n\n/**\n * @returns true if the event was handled\n */\nexport const colorPickerKeyNavHandler = ({\n  event,\n  activeColorPickerSection,\n  palette,\n  color,\n  onChange,\n  customColors,\n  setActiveColorPickerSection,\n  updateData,\n  activeShade,\n  onEyeDropperToggle,\n  onEscape,\n}: ColorPickerKeyNavHandlerProps): boolean => {\n  if (event[KEYS.CTRL_OR_CMD]) {\n    return false;\n  }\n\n  if (event.key === KEYS.ESCAPE) {\n    onEscape(event);\n    return true;\n  }\n\n  // checkt using `key` to ignore combos with Alt modifier\n  if (event.key === KEYS.ALT) {\n    onEyeDropperToggle(true);\n    return true;\n  }\n\n  if (event.key === KEYS.I) {\n    onEyeDropperToggle();\n    return true;\n  }\n\n  const colorObj = getColorNameAndShadeFromColor({ color, palette });\n\n  if (event.key === KEYS.TAB) {\n    const sectionsMap: Record<\n      NonNullable<ActiveColorPickerSectionAtomType>,\n      boolean\n    > = {\n      custom: !!customColors.length,\n      baseColors: true,\n      shades: colorObj?.shade != null,\n      hex: true,\n    };\n\n    const sections = Object.entries(sectionsMap).reduce((acc, [key, value]) => {\n      if (value) {\n        acc.push(key as ActiveColorPickerSectionAtomType);\n      }\n      return acc;\n    }, [] as ActiveColorPickerSectionAtomType[]);\n\n    const activeSectionIndex = sections.indexOf(activeColorPickerSection);\n    const indexOffset = event.shiftKey ? -1 : 1;\n    const nextSectionIndex =\n      activeSectionIndex + indexOffset > sections.length - 1\n        ? 0\n        : activeSectionIndex + indexOffset < 0\n        ? sections.length - 1\n        : activeSectionIndex + indexOffset;\n\n    const nextSection = sections[nextSectionIndex];\n\n    if (nextSection) {\n      setActiveColorPickerSection(nextSection);\n    }\n\n    if (nextSection === \"custom\") {\n      onChange(customColors[0]);\n    } else if (nextSection === \"baseColors\") {\n      const baseColorName = (\n        Object.entries(palette) as [string, ValueOf<ColorPalette>][]\n      ).find(([name, shades]) => {\n        if (Array.isArray(shades)) {\n          return shades.includes(color);\n        } else if (shades === color) {\n          return name;\n        }\n        return null;\n      });\n\n      if (!baseColorName) {\n        onChange(COLOR_PALETTE.black);\n      }\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    return true;\n  }\n\n  if (\n    hotkeyHandler({\n      e: event,\n      colorObj,\n      onChange,\n      palette,\n      customColors,\n      setActiveColorPickerSection,\n      activeShade,\n    })\n  ) {\n    return true;\n  }\n\n  if (activeColorPickerSection === \"shades\") {\n    if (colorObj) {\n      const { shade } = colorObj;\n      const newShade = arrowHandler(event.key, shade, COLORS_PER_ROW);\n\n      if (newShade !== undefined) {\n        onChange(palette[colorObj.colorName][newShade]);\n        return true;\n      }\n    }\n  }\n\n  if (activeColorPickerSection === \"baseColors\") {\n    if (colorObj) {\n      const { colorName } = colorObj;\n      const colorNames = Object.keys(palette) as (keyof ColorPalette)[];\n      const indexOfColorName = colorNames.indexOf(colorName);\n\n      const newColorIndex = arrowHandler(\n        event.key,\n        indexOfColorName,\n        colorNames.length,\n      );\n\n      if (newColorIndex !== undefined) {\n        const newColorName = colorNames[newColorIndex];\n        const newColorNameValue = palette[newColorName];\n\n        onChange(\n          Array.isArray(newColorNameValue)\n            ? newColorNameValue[activeShade]\n            : newColorNameValue,\n        );\n        return true;\n      }\n    }\n  }\n\n  if (activeColorPickerSection === \"custom\") {\n    const indexOfColor = customColors.indexOf(color);\n\n    const newColorIndex = arrowHandler(\n      event.key,\n      indexOfColor,\n      customColors.length,\n    );\n\n    if (newColorIndex !== undefined) {\n      const newColor = customColors[newColorIndex];\n      onChange(newColor);\n      return true;\n    }\n  }\n\n  return false;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}