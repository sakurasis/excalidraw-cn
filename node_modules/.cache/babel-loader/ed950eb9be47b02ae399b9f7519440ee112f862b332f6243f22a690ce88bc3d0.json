{"ast":null,"code":"var sliced = require('sliced');\nvar crc32 = require('crc-32');\nmodule.exports = encodeChunks;\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4);\nvar int32 = new Int32Array(uint8.buffer);\nvar uint32 = new Uint32Array(uint8.buffer);\nfunction encodeChunks(chunks) {\n  var totalSize = 8;\n  var idx = totalSize;\n  var i;\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length;\n    totalSize += 12;\n  }\n  var output = new Uint8Array(totalSize);\n  output[0] = 0x89;\n  output[1] = 0x50;\n  output[2] = 0x4E;\n  output[3] = 0x47;\n  output[4] = 0x0D;\n  output[5] = 0x0A;\n  output[6] = 0x1A;\n  output[7] = 0x0A;\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    var name = chunk.name;\n    var data = chunk.data;\n    var size = data.length;\n    var nameChars = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n    uint32[0] = size;\n    output[idx++] = uint8[3];\n    output[idx++] = uint8[2];\n    output[idx++] = uint8[1];\n    output[idx++] = uint8[0];\n    output[idx++] = nameChars[0];\n    output[idx++] = nameChars[1];\n    output[idx++] = nameChars[2];\n    output[idx++] = nameChars[3];\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++];\n    }\n    var crcCheck = nameChars.concat(sliced(data));\n    var crc = crc32.buf(crcCheck);\n    int32[0] = crc;\n    output[idx++] = uint8[3];\n    output[idx++] = uint8[2];\n    output[idx++] = uint8[1];\n    output[idx++] = uint8[0];\n  }\n  return output;\n}","map":{"version":3,"names":["sliced","require","crc32","module","exports","encodeChunks","uint8","Uint8Array","int32","Int32Array","buffer","uint32","Uint32Array","chunks","totalSize","idx","i","length","data","output","chunk","name","size","nameChars","charCodeAt","j","crcCheck","concat","crc","buf"],"sources":["D:/project/excalidraw-cn/node_modules/png-chunks-encode/index.js"],"sourcesContent":["var sliced = require('sliced')\nvar crc32 = require('crc-32')\n\nmodule.exports = encodeChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction encodeChunks (chunks) {\n  var totalSize = 8\n  var idx = totalSize\n  var i\n\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length\n    totalSize += 12\n  }\n\n  var output = new Uint8Array(totalSize)\n\n  output[0] = 0x89\n  output[1] = 0x50\n  output[2] = 0x4E\n  output[3] = 0x47\n  output[4] = 0x0D\n  output[5] = 0x0A\n  output[6] = 0x1A\n  output[7] = 0x0A\n\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i]\n    var name = chunk.name\n    var data = chunk.data\n    var size = data.length\n    var nameChars = [\n      name.charCodeAt(0),\n      name.charCodeAt(1),\n      name.charCodeAt(2),\n      name.charCodeAt(3)\n    ]\n\n    uint32[0] = size\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n\n    output[idx++] = nameChars[0]\n    output[idx++] = nameChars[1]\n    output[idx++] = nameChars[2]\n    output[idx++] = nameChars[3]\n\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++]\n    }\n\n    var crcCheck = nameChars.concat(sliced(data))\n    var crc = crc32.buf(crcCheck)\n\n    int32[0] = crc\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}