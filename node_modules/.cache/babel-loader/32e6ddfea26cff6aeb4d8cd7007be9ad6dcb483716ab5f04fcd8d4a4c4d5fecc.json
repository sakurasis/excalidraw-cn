{"ast":null,"code":"import * as GA from \"./ga\";\nimport * as GADirection from \"./gadirections\";\n\n/**\n * TODO: docs\n */\n\nexport const rotation = (pivot, angle) => GA.add(GA.mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));\nexport const translation = direction => [1, 0, 0, 0, -(0.5 * direction[5]), 0.5 * direction[4], 0, 0];\nexport const translationOrthogonal = (direction, distance) => {\n  const scale = 0.5 * distance;\n  return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];\n};\nexport const translationAlong = (line, distance) => GA.add(GA.mul(GADirection.orthogonalToLine(line), 0.5 * distance), 1);\nexport const compose = (motor1, motor2) => GA.mul(motor2, motor1);\nexport const apply = (motor, nvector) => GA.normalized(GA.mul(GA.mul(motor, nvector), GA.reverse(motor)));","map":{"version":3,"names":["GA","GADirection","rotation","pivot","angle","add","mul","Math","sin","cos","translation","direction","translationOrthogonal","distance","scale","translationAlong","line","orthogonalToLine","compose","motor1","motor2","apply","motor","nvector","normalized","reverse"],"sources":["D:/project/excalidraw-cn/src/gatransforms.ts"],"sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Direction, Point, Transform } from \"./ga\";\nimport * as GADirection from \"./gadirections\";\n\n/**\n * TODO: docs\n */\n\nexport const rotation = (pivot: Point, angle: number): Transform =>\n  GA.add(GA.mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));\n\nexport const translation = (direction: Direction): Transform => [\n  1,\n  0,\n  0,\n  0,\n  -(0.5 * direction[5]),\n  0.5 * direction[4],\n  0,\n  0,\n];\n\nexport const translationOrthogonal = (\n  direction: Direction,\n  distance: number,\n): Transform => {\n  const scale = 0.5 * distance;\n  return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];\n};\n\nexport const translationAlong = (line: Line, distance: number): Transform =>\n  GA.add(GA.mul(GADirection.orthogonalToLine(line), 0.5 * distance), 1);\n\nexport const compose = (motor1: Transform, motor2: Transform): Transform =>\n  GA.mul(motor2, motor1);\n\nexport const apply = (\n  motor: Transform,\n  nvector: Point | Direction | Line,\n): Point | Direction | Line =>\n  GA.normalized(GA.mul(GA.mul(motor, nvector), GA.reverse(motor)));\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,MAAM;AAE1B,OAAO,KAAKC,WAAW,MAAM,gBAAgB;;AAE7C;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAY,EAAEC,KAAa,KAClDJ,EAAE,CAACK,GAAG,CAACL,EAAE,CAACM,GAAG,CAACH,KAAK,EAAEI,IAAI,CAACC,GAAG,CAACJ,KAAK,GAAG,CAAC,CAAC,CAAC,EAAEG,IAAI,CAACE,GAAG,CAACL,KAAK,GAAG,CAAC,CAAC,CAAC;AAEjE,OAAO,MAAMM,WAAW,GAAIC,SAAoB,IAAgB,CAC9D,CAAC,EACD,CAAC,EACD,CAAC,EACD,CAAC,EACD,EAAE,GAAG,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,EACrB,GAAG,GAAGA,SAAS,CAAC,CAAC,CAAC,EAClB,CAAC,EACD,CAAC,CACF;AAED,OAAO,MAAMC,qBAAqB,GAAGA,CACnCD,SAAoB,EACpBE,QAAgB,KACF;EACd,MAAMC,KAAK,GAAG,GAAG,GAAGD,QAAQ;EAC5B,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEC,KAAK,GAAGH,SAAS,CAAC,CAAC,CAAC,EAAEG,KAAK,GAAGH,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACvE,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGA,CAACC,IAAU,EAAEH,QAAgB,KAC3Db,EAAE,CAACK,GAAG,CAACL,EAAE,CAACM,GAAG,CAACL,WAAW,CAACgB,gBAAgB,CAACD,IAAI,CAAC,EAAE,GAAG,GAAGH,QAAQ,CAAC,EAAE,CAAC,CAAC;AAEvE,OAAO,MAAMK,OAAO,GAAGA,CAACC,MAAiB,EAAEC,MAAiB,KAC1DpB,EAAE,CAACM,GAAG,CAACc,MAAM,EAAED,MAAM,CAAC;AAExB,OAAO,MAAME,KAAK,GAAGA,CACnBC,KAAgB,EAChBC,OAAiC,KAEjCvB,EAAE,CAACwB,UAAU,CAACxB,EAAE,CAACM,GAAG,CAACN,EAAE,CAACM,GAAG,CAACgB,KAAK,EAAEC,OAAO,CAAC,EAAEvB,EAAE,CAACyB,OAAO,CAACH,KAAK,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}