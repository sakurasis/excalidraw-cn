{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\n/** Regular expression used to parse a Dsn. */\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n/** Error message */\nvar ERROR_MESSAGE = 'Invalid Dsn';\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nvar Dsn = /** @class */function () {\n  /** Creates a new Dsn component */\n  function Dsn(from) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n    this._validate();\n  }\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  Dsn.prototype.toString = function (withPassword) {\n    if (withPassword === void 0) {\n      withPassword = false;\n    }\n    var _a = this,\n      host = _a.host,\n      path = _a.path,\n      pass = _a.pass,\n      port = _a.port,\n      projectId = _a.projectId,\n      protocol = _a.protocol,\n      publicKey = _a.publicKey;\n    return protocol + \"://\" + publicKey + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n  };\n  /** Parses a string into this Dsn. */\n  Dsn.prototype._fromString = function (str) {\n    var match = DSN_REGEX.exec(str);\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n    var _a = __read(match.slice(1), 6),\n      protocol = _a[0],\n      publicKey = _a[1],\n      _b = _a[2],\n      pass = _b === void 0 ? '' : _b,\n      host = _a[3],\n      _c = _a[4],\n      port = _c === void 0 ? '' : _c,\n      lastPath = _a[5];\n    var path = '';\n    var projectId = lastPath;\n    var split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop();\n    }\n    if (projectId) {\n      var projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n    this._fromComponents({\n      host: host,\n      pass: pass,\n      path: path,\n      projectId: projectId,\n      port: port,\n      protocol: protocol,\n      publicKey: publicKey\n    });\n  };\n  /** Maps Dsn components into this instance. */\n  Dsn.prototype._fromComponents = function (components) {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  };\n  /** Validates this Dsn and throws on error. */\n  Dsn.prototype._validate = function () {\n    var _this = this;\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(function (component) {\n      if (!_this[component]) {\n        throw new SentryError(ERROR_MESSAGE + \": \" + component + \" missing\");\n      }\n    });\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid projectId \" + this.projectId);\n    }\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid protocol \" + this.protocol);\n    }\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE + \": Invalid port \" + this.port);\n    }\n  };\n  return Dsn;\n}();\nexport { Dsn };","map":{"version":3,"names":["SentryError","DSN_REGEX","ERROR_MESSAGE","Dsn","from","_fromString","_fromComponents","_validate","prototype","toString","withPassword","_a","host","path","pass","port","projectId","protocol","publicKey","str","match","exec","__read","slice","_b","_c","lastPath","split","length","join","pop","projectMatch","components","user","_this","forEach","component","isNaN","parseInt"],"sources":["D:\\project\\excalidraw-cn\\node_modules\\@sentry\\utils\\src\\dsn.ts"],"sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key (deprecated, renamed to publicKey). */\n  public user!: string;\n  /** Public authorization key. */\n  public publicKey!: string;\n  /** Private authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    const { host, path, pass, port, projectId, protocol, publicKey } = this;\n    return (\n      `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n\n    if (projectId) {\n      const projectMatch = projectId.match(/^\\d+/);\n      if (projectMatch) {\n        projectId = projectMatch[0];\n      }\n    }\n\n    this._fromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    // TODO this is for backwards compatibility, and can be removed in a future version\n    if ('user' in components && !('publicKey' in components)) {\n      components.publicKey = components.user;\n    }\n    this.user = components.publicKey || '';\n\n    this.protocol = components.protocol;\n    this.publicKey = components.publicKey || '';\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'publicKey', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(`${ERROR_MESSAGE}: ${component} missing`);\n      }\n    });\n\n    if (!this.projectId.match(/^\\d+$/)) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid projectId ${this.projectId}`);\n    }\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid protocol ${this.protocol}`);\n    }\n\n    if (this.port && isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(`${ERROR_MESSAGE}: Invalid port ${this.port}`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}