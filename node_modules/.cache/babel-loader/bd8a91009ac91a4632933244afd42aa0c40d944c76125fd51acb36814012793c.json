{"ast":null,"code":"import _slicedToArray from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";// -----------------------------------------------------------------------------\n// ExcalidrawImageElement & related helpers\n// -----------------------------------------------------------------------------\nimport{MIME_TYPES,SVG_NS}from\"../constants\";import{t}from\"../i18n\";import{isInitializedImageElement}from\"./typeChecks\";export var loadHTMLImageElement=function loadHTMLImageElement(dataURL){return new Promise(function(resolve,reject){var image=new Image();image.onload=function(){resolve(image);};image.onerror=function(error){reject(error);};image.src=dataURL;});};/** NOTE: updates cache even if already populated with given image. Thus,\n * you should filter out the images upstream if you want to optimize this. */export var updateImageCache=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref){var fileIds,files,imageCache,updatedFiles,erroredFiles;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:fileIds=_ref.fileIds,files=_ref.files,imageCache=_ref.imageCache;updatedFiles=new Map();erroredFiles=new Map();_context2.next=5;return Promise.all(fileIds.reduce(function(promises,fileId){var fileData=files[fileId];if(fileData&&!updatedFiles.has(fileId)){updatedFiles.set(fileId,true);return promises.concat(_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var imagePromise,data,image;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.prev=0;if(!(fileData.mimeType===MIME_TYPES.binary)){_context.next=3;break;}throw new Error(\"Only images can be added to ImageCache\");case 3:imagePromise=loadHTMLImageElement(fileData.dataURL);data={image:imagePromise,mimeType:fileData.mimeType};// store the promise immediately to indicate there's an in-progress\n// initialization\nimageCache.set(fileId,data);_context.next=8;return imagePromise;case 8:image=_context.sent;imageCache.set(fileId,_objectSpread(_objectSpread({},data),{},{image:image}));_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);erroredFiles.set(fileId,true);case 15:case\"end\":return _context.stop();}},_callee,null,[[0,12]]);}))());}return promises;},[]));case 5:return _context2.abrupt(\"return\",{imageCache:imageCache,/** includes errored files because they cache was updated nonetheless */updatedFiles:updatedFiles,/** files that failed when creating HTMLImageElement */erroredFiles:erroredFiles});case 6:case\"end\":return _context2.stop();}},_callee2);}));return function updateImageCache(_x){return _ref2.apply(this,arguments);};}();export var getInitializedImageElements=function getInitializedImageElements(elements){return elements.filter(function(element){return isInitializedImageElement(element);});};export var isHTMLSVGElement=function isHTMLSVGElement(node){// lower-casing due to XML/HTML convention differences\n// https://johnresig.com/blog/nodename-case-sensitivity\nreturn(node===null||node===void 0?void 0:node.nodeName.toLowerCase())===\"svg\";};export var normalizeSVG=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(SVGString){var doc,svg,errorNode,viewBox,width,height,match,_match;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:doc=new DOMParser().parseFromString(SVGString,MIME_TYPES.svg);svg=doc.querySelector(\"svg\");errorNode=doc.querySelector(\"parsererror\");if(!(errorNode||!isHTMLSVGElement(svg))){_context3.next=7;break;}throw new Error(t(\"errors.invalidSVGString\"));case 7:if(!svg.hasAttribute(\"xmlns\")){svg.setAttribute(\"xmlns\",SVG_NS);}if(!svg.hasAttribute(\"width\")||!svg.hasAttribute(\"height\")){viewBox=svg.getAttribute(\"viewBox\");width=svg.getAttribute(\"width\")||\"50\";height=svg.getAttribute(\"height\")||\"50\";if(viewBox){match=viewBox.match(/\\d+ +\\d+ +(\\d+) +(\\d+)/);if(match){_match=_slicedToArray(match,3);width=_match[1];height=_match[2];}}svg.setAttribute(\"width\",width);svg.setAttribute(\"height\",height);}return _context3.abrupt(\"return\",svg.outerHTML);case 10:case\"end\":return _context3.stop();}},_callee3);}));return function normalizeSVG(_x2){return _ref4.apply(this,arguments);};}();","map":{"version":3,"names":["MIME_TYPES","SVG_NS","t","isInitializedImageElement","loadHTMLImageElement","dataURL","Promise","resolve","reject","image","Image","onload","onerror","error","src","updateImageCache","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_ref","fileIds","files","imageCache","updatedFiles","erroredFiles","wrap","_callee2$","_context2","prev","next","Map","all","reduce","promises","fileId","fileData","has","set","concat","_callee","imagePromise","data","_callee$","_context","mimeType","binary","Error","sent","_objectSpread","t0","stop","abrupt","_x","apply","arguments","getInitializedImageElements","elements","filter","element","isHTMLSVGElement","node","nodeName","toLowerCase","normalizeSVG","_ref4","_callee3","SVGString","doc","svg","errorNode","viewBox","width","height","match","_match","_callee3$","_context3","DOMParser","parseFromString","querySelector","hasAttribute","setAttribute","getAttribute","_slicedToArray","outerHTML","_x2"],"sources":["D:/project/excalidraw-cn/src/element/image.ts"],"sourcesContent":["// -----------------------------------------------------------------------------\n// ExcalidrawImageElement & related helpers\n// -----------------------------------------------------------------------------\n\nimport { MIME_TYPES, SVG_NS } from \"../constants\";\nimport { t } from \"../i18n\";\nimport { AppClassProperties, DataURL, BinaryFiles } from \"../types\";\nimport { isInitializedImageElement } from \"./typeChecks\";\nimport {\n  ExcalidrawElement,\n  FileId,\n  InitializedExcalidrawImageElement,\n} from \"./types\";\n\nexport const loadHTMLImageElement = (dataURL: DataURL) => {\n  return new Promise<HTMLImageElement>((resolve, reject) => {\n    const image = new Image();\n    image.onload = () => {\n      resolve(image);\n    };\n    image.onerror = (error) => {\n      reject(error);\n    };\n    image.src = dataURL;\n  });\n};\n\n/** NOTE: updates cache even if already populated with given image. Thus,\n * you should filter out the images upstream if you want to optimize this. */\nexport const updateImageCache = async ({\n  fileIds,\n  files,\n  imageCache,\n}: {\n  fileIds: FileId[];\n  files: BinaryFiles;\n  imageCache: AppClassProperties[\"imageCache\"];\n}) => {\n  const updatedFiles = new Map<FileId, true>();\n  const erroredFiles = new Map<FileId, true>();\n\n  await Promise.all(\n    fileIds.reduce((promises, fileId) => {\n      const fileData = files[fileId as string];\n      if (fileData && !updatedFiles.has(fileId)) {\n        updatedFiles.set(fileId, true);\n        return promises.concat(\n          (async () => {\n            try {\n              if (fileData.mimeType === MIME_TYPES.binary) {\n                throw new Error(\"Only images can be added to ImageCache\");\n              }\n\n              const imagePromise = loadHTMLImageElement(fileData.dataURL);\n              const data = {\n                image: imagePromise,\n                mimeType: fileData.mimeType,\n              } as const;\n              // store the promise immediately to indicate there's an in-progress\n              // initialization\n              imageCache.set(fileId, data);\n\n              const image = await imagePromise;\n\n              imageCache.set(fileId, { ...data, image });\n            } catch (error: any) {\n              erroredFiles.set(fileId, true);\n            }\n          })(),\n        );\n      }\n      return promises;\n    }, [] as Promise<any>[]),\n  );\n\n  return {\n    imageCache,\n    /** includes errored files because they cache was updated nonetheless */\n    updatedFiles,\n    /** files that failed when creating HTMLImageElement */\n    erroredFiles,\n  };\n};\n\nexport const getInitializedImageElements = (\n  elements: readonly ExcalidrawElement[],\n) =>\n  elements.filter((element) =>\n    isInitializedImageElement(element),\n  ) as InitializedExcalidrawImageElement[];\n\nexport const isHTMLSVGElement = (node: Node | null): node is SVGElement => {\n  // lower-casing due to XML/HTML convention differences\n  // https://johnresig.com/blog/nodename-case-sensitivity\n  return node?.nodeName.toLowerCase() === \"svg\";\n};\n\nexport const normalizeSVG = async (SVGString: string) => {\n  const doc = new DOMParser().parseFromString(SVGString, MIME_TYPES.svg);\n  const svg = doc.querySelector(\"svg\");\n  const errorNode = doc.querySelector(\"parsererror\");\n  if (errorNode || !isHTMLSVGElement(svg)) {\n    throw new Error(t(\"errors.invalidSVGString\"));\n  } else {\n    if (!svg.hasAttribute(\"xmlns\")) {\n      svg.setAttribute(\"xmlns\", SVG_NS);\n    }\n\n    if (!svg.hasAttribute(\"width\") || !svg.hasAttribute(\"height\")) {\n      const viewBox = svg.getAttribute(\"viewBox\");\n      let width = svg.getAttribute(\"width\") || \"50\";\n      let height = svg.getAttribute(\"height\") || \"50\";\n      if (viewBox) {\n        const match = viewBox.match(/\\d+ +\\d+ +(\\d+) +(\\d+)/);\n        if (match) {\n          [, width, height] = match;\n        }\n      }\n      svg.setAttribute(\"width\", width);\n      svg.setAttribute(\"height\", height);\n    }\n\n    return svg.outerHTML;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}