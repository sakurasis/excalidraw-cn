{"ast":null,"code":"import _objectSpread from\"D:/project/excalidraw-cn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{isTextElement,isExcalidrawElement,redrawTextBoundingBox}from\"../element\";import{CODES,KEYS}from\"../keys\";import{t}from\"../i18n\";import{register}from\"./register\";import{newElementWith}from\"../element/mutateElement\";import{DEFAULT_FONT_SIZE,DEFAULT_FONT_FAMILY,DEFAULT_TEXT_ALIGN}from\"../constants\";import{getBoundTextElement,getDefaultLineHeight}from\"../element/textElement\";import{hasBoundTextElement,canApplyRoundnessTypeToElement,getDefaultRoundnessTypeForElement,isFrameElement}from\"../element/typeChecks\";import{getSelectedElements}from\"../scene\";// `copiedStyles` is exported only for tests.\nexport var copiedStyles=\"{}\";export var actionCopyStyles=register({name:\"copyStyles\",trackEvent:{category:\"element\"},perform:function perform(elements,appState){var elementsCopied=[];var element=elements.find(function(el){return appState.selectedElementIds[el.id];});elementsCopied.push(element);if(element&&hasBoundTextElement(element)){var boundTextElement=getBoundTextElement(element);elementsCopied.push(boundTextElement);}if(element){copiedStyles=JSON.stringify(elementsCopied);}return{appState:_objectSpread(_objectSpread({},appState),{},{toast:{message:t(\"toast.copyStyles\")}}),commitToHistory:false};},contextItemLabel:\"labels.copyStyles\",keyTest:function keyTest(event){return event[KEYS.CTRL_OR_CMD]&&event.altKey&&event.code===CODES.C;}});export var actionPasteStyles=register({name:\"pasteStyles\",trackEvent:{category:\"element\"},perform:function perform(elements,appState){var elementsCopied=JSON.parse(copiedStyles);var pastedElement=elementsCopied[0];var boundTextElement=elementsCopied[1];if(!isExcalidrawElement(pastedElement)){return{elements:elements,commitToHistory:false};}var selectedElements=getSelectedElements(elements,appState,{includeBoundTextElement:true});var selectedElementIds=selectedElements.map(function(element){return element.id;});return{elements:elements.map(function(element){if(selectedElementIds.includes(element.id)){var _elementStylesToCopyF,_elementStylesToCopyF2,_elementStylesToCopyF3,_elementStylesToCopyF4,_elementStylesToCopyF5,_elementStylesToCopyF6,_elementStylesToCopyF7;var elementStylesToCopyFrom=pastedElement;if(isTextElement(element)&&element.containerId){elementStylesToCopyFrom=boundTextElement;}if(!elementStylesToCopyFrom){return element;}var newElement=newElementWith(element,{backgroundColor:(_elementStylesToCopyF=elementStylesToCopyFrom)===null||_elementStylesToCopyF===void 0?void 0:_elementStylesToCopyF.backgroundColor,strokeWidth:(_elementStylesToCopyF2=elementStylesToCopyFrom)===null||_elementStylesToCopyF2===void 0?void 0:_elementStylesToCopyF2.strokeWidth,strokeColor:(_elementStylesToCopyF3=elementStylesToCopyFrom)===null||_elementStylesToCopyF3===void 0?void 0:_elementStylesToCopyF3.strokeColor,strokeStyle:(_elementStylesToCopyF4=elementStylesToCopyFrom)===null||_elementStylesToCopyF4===void 0?void 0:_elementStylesToCopyF4.strokeStyle,fillStyle:(_elementStylesToCopyF5=elementStylesToCopyFrom)===null||_elementStylesToCopyF5===void 0?void 0:_elementStylesToCopyF5.fillStyle,opacity:(_elementStylesToCopyF6=elementStylesToCopyFrom)===null||_elementStylesToCopyF6===void 0?void 0:_elementStylesToCopyF6.opacity,roughness:(_elementStylesToCopyF7=elementStylesToCopyFrom)===null||_elementStylesToCopyF7===void 0?void 0:_elementStylesToCopyF7.roughness,roundness:elementStylesToCopyFrom.roundness?canApplyRoundnessTypeToElement(elementStylesToCopyFrom.roundness.type,element)?elementStylesToCopyFrom.roundness:getDefaultRoundnessTypeForElement(element):null});if(isTextElement(newElement)){var _elementStylesToCopyF8,_elementStylesToCopyF9,_elementStylesToCopyF10;var fontSize=((_elementStylesToCopyF8=elementStylesToCopyFrom)===null||_elementStylesToCopyF8===void 0?void 0:_elementStylesToCopyF8.fontSize)||DEFAULT_FONT_SIZE;var fontFamily=((_elementStylesToCopyF9=elementStylesToCopyFrom)===null||_elementStylesToCopyF9===void 0?void 0:_elementStylesToCopyF9.fontFamily)||DEFAULT_FONT_FAMILY;newElement=newElementWith(newElement,{fontSize:fontSize,fontFamily:fontFamily,textAlign:((_elementStylesToCopyF10=elementStylesToCopyFrom)===null||_elementStylesToCopyF10===void 0?void 0:_elementStylesToCopyF10.textAlign)||DEFAULT_TEXT_ALIGN,lineHeight:elementStylesToCopyFrom.lineHeight||getDefaultLineHeight(fontFamily)});var container=null;if(newElement.containerId){container=selectedElements.find(function(element){return isTextElement(newElement)&&element.id===newElement.containerId;})||null;}redrawTextBoundingBox(newElement,container);}if(newElement.type===\"arrow\"){newElement=newElementWith(newElement,{startArrowhead:elementStylesToCopyFrom.startArrowhead,endArrowhead:elementStylesToCopyFrom.endArrowhead});}if(isFrameElement(element)){newElement=newElementWith(newElement,{roundness:null,backgroundColor:\"transparent\"});}return newElement;}return element;}),commitToHistory:true};},contextItemLabel:\"labels.pasteStyles\",keyTest:function keyTest(event){return event[KEYS.CTRL_OR_CMD]&&event.altKey&&event.code===CODES.V;}});","map":{"version":3,"names":["isTextElement","isExcalidrawElement","redrawTextBoundingBox","CODES","KEYS","t","register","newElementWith","DEFAULT_FONT_SIZE","DEFAULT_FONT_FAMILY","DEFAULT_TEXT_ALIGN","getBoundTextElement","getDefaultLineHeight","hasBoundTextElement","canApplyRoundnessTypeToElement","getDefaultRoundnessTypeForElement","isFrameElement","getSelectedElements","copiedStyles","actionCopyStyles","name","trackEvent","category","perform","elements","appState","elementsCopied","element","find","el","selectedElementIds","id","push","boundTextElement","JSON","stringify","_objectSpread","toast","message","commitToHistory","contextItemLabel","keyTest","event","CTRL_OR_CMD","altKey","code","C","actionPasteStyles","parse","pastedElement","selectedElements","includeBoundTextElement","map","includes","_elementStylesToCopyF","_elementStylesToCopyF2","_elementStylesToCopyF3","_elementStylesToCopyF4","_elementStylesToCopyF5","_elementStylesToCopyF6","_elementStylesToCopyF7","elementStylesToCopyFrom","containerId","newElement","backgroundColor","strokeWidth","strokeColor","strokeStyle","fillStyle","opacity","roughness","roundness","type","_elementStylesToCopyF8","_elementStylesToCopyF9","_elementStylesToCopyF10","fontSize","fontFamily","textAlign","lineHeight","container","startArrowhead","endArrowhead","V"],"sources":["D:/project/excalidraw-cn/src/actions/actionStyles.ts"],"sourcesContent":["import {\n  isTextElement,\n  isExcalidrawElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { CODES, KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport {\n  DEFAULT_FONT_SIZE,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_TEXT_ALIGN,\n} from \"../constants\";\nimport {\n  getBoundTextElement,\n  getDefaultLineHeight,\n} from \"../element/textElement\";\nimport {\n  hasBoundTextElement,\n  canApplyRoundnessTypeToElement,\n  getDefaultRoundnessTypeForElement,\n  isFrameElement,\n} from \"../element/typeChecks\";\nimport { getSelectedElements } from \"../scene\";\n\n// `copiedStyles` is exported only for tests.\nexport let copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState) => {\n    const elementsCopied = [];\n    const element = elements.find((el) => appState.selectedElementIds[el.id]);\n    elementsCopied.push(element);\n    if (element && hasBoundTextElement(element)) {\n      const boundTextElement = getBoundTextElement(element);\n      elementsCopied.push(boundTextElement);\n    }\n    if (element) {\n      copiedStyles = JSON.stringify(elementsCopied);\n    }\n    return {\n      appState: {\n        ...appState,\n        toast: { message: t(\"toast.copyStyles\") },\n      },\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.C,\n});\n\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  trackEvent: { category: \"element\" },\n  perform: (elements, appState) => {\n    const elementsCopied = JSON.parse(copiedStyles);\n    const pastedElement = elementsCopied[0];\n    const boundTextElement = elementsCopied[1];\n    if (!isExcalidrawElement(pastedElement)) {\n      return { elements, commitToHistory: false };\n    }\n\n    const selectedElements = getSelectedElements(elements, appState, {\n      includeBoundTextElement: true,\n    });\n    const selectedElementIds = selectedElements.map((element) => element.id);\n    return {\n      elements: elements.map((element) => {\n        if (selectedElementIds.includes(element.id)) {\n          let elementStylesToCopyFrom = pastedElement;\n          if (isTextElement(element) && element.containerId) {\n            elementStylesToCopyFrom = boundTextElement;\n          }\n          if (!elementStylesToCopyFrom) {\n            return element;\n          }\n          let newElement = newElementWith(element, {\n            backgroundColor: elementStylesToCopyFrom?.backgroundColor,\n            strokeWidth: elementStylesToCopyFrom?.strokeWidth,\n            strokeColor: elementStylesToCopyFrom?.strokeColor,\n            strokeStyle: elementStylesToCopyFrom?.strokeStyle,\n            fillStyle: elementStylesToCopyFrom?.fillStyle,\n            opacity: elementStylesToCopyFrom?.opacity,\n            roughness: elementStylesToCopyFrom?.roughness,\n            roundness: elementStylesToCopyFrom.roundness\n              ? canApplyRoundnessTypeToElement(\n                  elementStylesToCopyFrom.roundness.type,\n                  element,\n                )\n                ? elementStylesToCopyFrom.roundness\n                : getDefaultRoundnessTypeForElement(element)\n              : null,\n          });\n\n          if (isTextElement(newElement)) {\n            const fontSize =\n              elementStylesToCopyFrom?.fontSize || DEFAULT_FONT_SIZE;\n            const fontFamily =\n              elementStylesToCopyFrom?.fontFamily || DEFAULT_FONT_FAMILY;\n            newElement = newElementWith(newElement, {\n              fontSize,\n              fontFamily,\n              textAlign:\n                elementStylesToCopyFrom?.textAlign || DEFAULT_TEXT_ALIGN,\n              lineHeight:\n                elementStylesToCopyFrom.lineHeight ||\n                getDefaultLineHeight(fontFamily),\n            });\n            let container = null;\n            if (newElement.containerId) {\n              container =\n                selectedElements.find(\n                  (element) =>\n                    isTextElement(newElement) &&\n                    element.id === newElement.containerId,\n                ) || null;\n            }\n            redrawTextBoundingBox(newElement, container);\n          }\n\n          if (newElement.type === \"arrow\") {\n            newElement = newElementWith(newElement, {\n              startArrowhead: elementStylesToCopyFrom.startArrowhead,\n              endArrowhead: elementStylesToCopyFrom.endArrowhead,\n            });\n          }\n\n          if (isFrameElement(element)) {\n            newElement = newElementWith(newElement, {\n              roundness: null,\n              backgroundColor: \"transparent\",\n            });\n          }\n\n          return newElement;\n        }\n        return element;\n      }),\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}