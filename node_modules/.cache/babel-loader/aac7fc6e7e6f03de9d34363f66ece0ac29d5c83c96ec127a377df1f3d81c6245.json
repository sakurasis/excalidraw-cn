{"ast":null,"code":"import { useEffect } from \"react\";\nimport { EVENT } from \"../constants\";\nexport function useOutsideClick(ref, /** if performance is of concern, memoize the callback */\ncallback,\n/**\n * Optional callback which is called on every click.\n *\n * Should return `true` if click should be considered as inside the container,\n * and `false` if it falls outside and should call the `callback`.\n *\n * Returning `true` overrides the default behavior and `callback` won't be\n * called.\n *\n * Returning `undefined` will fallback to the default behavior.\n */\nisInside) {\n  useEffect(() => {\n    function onOutsideClick(event) {\n      const _event = event;\n      if (!ref.current) {\n        return;\n      }\n      const isInsideOverride = isInside === null || isInside === void 0 ? void 0 : isInside(_event, ref.current);\n      if (isInsideOverride === true) {\n        return;\n      } else if (isInsideOverride === false) {\n        return callback(_event);\n      }\n\n      // clicked element is in the descenendant of the target container\n      if (ref.current.contains(_event.target) ||\n      // target is detached from DOM (happens when the element is removed\n      // on a pointerup event fired *before* this handler's pointerup is\n      // dispatched)\n      !document.documentElement.contains(_event.target)) {\n        return;\n      }\n      const isClickOnRadixPortal = _event.target.closest(\"[data-radix-portal]\") ||\n      // when radix popup is in \"modal\" mode, it disables pointer events on\n      // the `body` element, so the target element is going to be the `html`\n      // (note: this won't work if we selectively re-enable pointer events on\n      // specific elements as we do with navbar or excalidraw UI elements)\n      _event.target === document.documentElement && document.body.style.pointerEvents === \"none\";\n\n      // if clicking on radix portal, assume it's a popup that\n      // should be considered as part of the UI. Obviously this is a terrible\n      // hack you can end up click on radix popups that outside the tree,\n      // but it works for most cases and the downside is minimal for now\n      if (isClickOnRadixPortal) {\n        return;\n      }\n\n      // clicking on a container that ignores outside clicks\n      if (_event.target.closest(\"[data-prevent-outside-click]\")) {\n        return;\n      }\n      callback(_event);\n    }\n\n    // note: don't use `click` because it often reports incorrect `event.target`\n    document.addEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n    document.addEventListener(EVENT.TOUCH_START, onOutsideClick);\n    return () => {\n      document.removeEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n      document.removeEventListener(EVENT.TOUCH_START, onOutsideClick);\n    };\n  }, [ref, callback, isInside]);\n}","map":{"version":3,"names":["useEffect","EVENT","useOutsideClick","ref","callback","isInside","onOutsideClick","event","_event","current","isInsideOverride","contains","target","document","documentElement","isClickOnRadixPortal","closest","body","style","pointerEvents","addEventListener","POINTER_DOWN","TOUCH_START","removeEventListener"],"sources":["D:/project/excalidraw-cn/src/hooks/useOutsideClick.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { EVENT } from \"../constants\";\n\nexport function useOutsideClick<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  /** if performance is of concern, memoize the callback */\n  callback: (event: Event) => void,\n  /**\n   * Optional callback which is called on every click.\n   *\n   * Should return `true` if click should be considered as inside the container,\n   * and `false` if it falls outside and should call the `callback`.\n   *\n   * Returning `true` overrides the default behavior and `callback` won't be\n   * called.\n   *\n   * Returning `undefined` will fallback to the default behavior.\n   */\n  isInside?: (\n    event: Event & { target: HTMLElement },\n    /** the element of the passed ref */\n    container: T,\n  ) => boolean | undefined,\n) {\n  useEffect(() => {\n    function onOutsideClick(event: Event) {\n      const _event = event as Event & { target: T };\n\n      if (!ref.current) {\n        return;\n      }\n\n      const isInsideOverride = isInside?.(_event, ref.current);\n\n      if (isInsideOverride === true) {\n        return;\n      } else if (isInsideOverride === false) {\n        return callback(_event);\n      }\n\n      // clicked element is in the descenendant of the target container\n      if (\n        ref.current.contains(_event.target) ||\n        // target is detached from DOM (happens when the element is removed\n        // on a pointerup event fired *before* this handler's pointerup is\n        // dispatched)\n        !document.documentElement.contains(_event.target)\n      ) {\n        return;\n      }\n\n      const isClickOnRadixPortal =\n        _event.target.closest(\"[data-radix-portal]\") ||\n        // when radix popup is in \"modal\" mode, it disables pointer events on\n        // the `body` element, so the target element is going to be the `html`\n        // (note: this won't work if we selectively re-enable pointer events on\n        // specific elements as we do with navbar or excalidraw UI elements)\n        (_event.target === document.documentElement &&\n          document.body.style.pointerEvents === \"none\");\n\n      // if clicking on radix portal, assume it's a popup that\n      // should be considered as part of the UI. Obviously this is a terrible\n      // hack you can end up click on radix popups that outside the tree,\n      // but it works for most cases and the downside is minimal for now\n      if (isClickOnRadixPortal) {\n        return;\n      }\n\n      // clicking on a container that ignores outside clicks\n      if (_event.target.closest(\"[data-prevent-outside-click]\")) {\n        return;\n      }\n\n      callback(_event);\n    }\n\n    // note: don't use `click` because it often reports incorrect `event.target`\n    document.addEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n    document.addEventListener(EVENT.TOUCH_START, onOutsideClick);\n\n    return () => {\n      document.removeEventListener(EVENT.POINTER_DOWN, onOutsideClick);\n      document.removeEventListener(EVENT.TOUCH_START, onOutsideClick);\n    };\n  }, [ref, callback, isInside]);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,KAAK,QAAQ,cAAc;AAEpC,OAAO,SAASC,eAAeA,CAC7BC,GAAuB,EACvB;AACAC,QAAgC;AAChC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,QAIwB,EACxB;EACAL,SAAS,CAAC,MAAM;IACd,SAASM,cAAcA,CAACC,KAAY,EAAE;MACpC,MAAMC,MAAM,GAAGD,KAA8B;MAE7C,IAAI,CAACJ,GAAG,CAACM,OAAO,EAAE;QAChB;MACF;MAEA,MAAMC,gBAAgB,GAAGL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGG,MAAM,EAAEL,GAAG,CAACM,OAAO,CAAC;MAExD,IAAIC,gBAAgB,KAAK,IAAI,EAAE;QAC7B;MACF,CAAC,MAAM,IAAIA,gBAAgB,KAAK,KAAK,EAAE;QACrC,OAAON,QAAQ,CAACI,MAAM,CAAC;MACzB;;MAEA;MACA,IACEL,GAAG,CAACM,OAAO,CAACE,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAC;MACnC;MACA;MACA;MACA,CAACC,QAAQ,CAACC,eAAe,CAACH,QAAQ,CAACH,MAAM,CAACI,MAAM,CAAC,EACjD;QACA;MACF;MAEA,MAAMG,oBAAoB,GACxBP,MAAM,CAACI,MAAM,CAACI,OAAO,CAAC,qBAAqB,CAAC;MAC5C;MACA;MACA;MACA;MACCR,MAAM,CAACI,MAAM,KAAKC,QAAQ,CAACC,eAAe,IACzCD,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,aAAa,KAAK,MAAO;;MAEjD;MACA;MACA;MACA;MACA,IAAIJ,oBAAoB,EAAE;QACxB;MACF;;MAEA;MACA,IAAIP,MAAM,CAACI,MAAM,CAACI,OAAO,CAAC,8BAA8B,CAAC,EAAE;QACzD;MACF;MAEAZ,QAAQ,CAACI,MAAM,CAAC;IAClB;;IAEA;IACAK,QAAQ,CAACO,gBAAgB,CAACnB,KAAK,CAACoB,YAAY,EAAEf,cAAc,CAAC;IAC7DO,QAAQ,CAACO,gBAAgB,CAACnB,KAAK,CAACqB,WAAW,EAAEhB,cAAc,CAAC;IAE5D,OAAO,MAAM;MACXO,QAAQ,CAACU,mBAAmB,CAACtB,KAAK,CAACoB,YAAY,EAAEf,cAAc,CAAC;MAChEO,QAAQ,CAACU,mBAAmB,CAACtB,KAAK,CAACqB,WAAW,EAAEhB,cAAc,CAAC;IACjE,CAAC;EACH,CAAC,EAAE,CAACH,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}